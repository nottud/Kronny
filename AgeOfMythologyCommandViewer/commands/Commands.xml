<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<model>
    <method return="vector" name="kbGetMapCenter">
        <javadoc>Returns the center vector of the map.</javadoc>
    </method>
    <method return="float" name="kbGetMapXSize">
        <javadoc>Returns the X size of the map.</javadoc>
    </method>
    <method return="float" name="kbGetMapZSize">
        <javadoc>Returns the Z size of the map.</javadoc>
    </method>
    <method return="vector" name="kbGetTownLocation">
        <javadoc>Returns the location of the main town.</javadoc>
    </method>
    <method return="int" name="kbGetTownAreaID">
        <javadoc>Returns the area ID of the main town.</javadoc>
    </method>
    <method return="bool" name="kbSetTownLocation">
        <parameters type="vector" name="location"/>
        <javadoc>Sets the location of the main town.</javadoc>
    </method>
    <method return="bool" name="kbLocationVisible">
        <parameters type="vector" name="location"/>
        <javadoc>Returns true if the location is currently visible to the player.</javadoc>
    </method>
    <method return="int" name="kbFindAreaGroup">
        <parameters type="int" name="groupType"/>
        <parameters type="float" name="surfaceAreaRatio"/>
        <parameters type="int" name="compareAreaID"/>
        <javadoc>Returns the visible area group that matches the given criteria.</javadoc>
    </method>
    <method return="int" name="kbFindAreaGroupByLocation">
        <parameters type="int" name="groupType"/>
        <parameters type="float" name="relativeX"/>
        <parameters type="float" name="relativeZ"/>
        <javadoc>Returns the visible area group that matches the given criteria.</javadoc>
    </method>
    <method return="void" name="kbAreaCalculate">
        <javadoc>Creates areas and area groups. &lt;b&gt;Call this functions before any other call that needs areas&lt;/b&gt;.</javadoc>
    </method>
    <method return="int" name="kbAreaGetNumber">
        <javadoc>Returns the number of areas.</javadoc>
    </method>
    <method return="int" name="kbAreaGetIDByPosition">
        <parameters type="vector" name="position"/>
        <javadoc>Returns the ID of the given area.</javadoc>
    </method>
    <method return="int" name="kbAreaGroupGetIDByPosition">
        <parameters type="vector" name="position"/>
        <javadoc>Returns the ID of the given area group.</javadoc>
    </method>
    <method return="vector" name="kbAreaGetCenter">
        <parameters type="int" name="areaID"/>
        <javadoc>Returns the center of the given area.</javadoc>
    </method>
    <method return="int" name="kbAreaGetNumberTiles">
        <parameters type="int" name="areaID"/>
        <javadoc>Returns the number of tiles in the given area.</javadoc>
    </method>
    <method return="int" name="kbAreaGetNumberBlackTiles">
        <parameters type="int" name="areaID"/>
        <javadoc>Returns the number of black tiles in the given area.</javadoc>
    </method>
    <method return="int" name="kbAreaGetNumberVisibleTiles">
        <parameters type="int" name="areaID"/>
        <javadoc>Returns the number of visible tiles in the given area.</javadoc>
    </method>
    <method return="int" name="kbAreaGetNumberFogTiles">
        <parameters type="int" name="areaID"/>
        <javadoc>Returns the number of fog tiles in the given area.</javadoc>
    </method>
    <method return="int" name="kbAreaGetVisibilityChangeTime">
        <parameters type="int" name="areaID"/>
        <javadoc>Returns the game time of the last visibility change for the given area.</javadoc>
    </method>
    <method return="int" name="kbAreaGetNumberUnits">
        <parameters type="int" name="areaID"/>
        <javadoc>Returns the number of units in the given area.</javadoc>
    </method>
    <method return="int" name="kbAreaGetUnitID">
        <parameters type="int" name="areaID"/>
        <javadoc>Returns the Unit ID of the index'th unit in the given area.</javadoc>
    </method>
    <method return="int" name="kbAreaGetNumberBorderAreas">
        <parameters type="int" name="areaID"/>
        <javadoc>Returns the number of border areas for the given area.</javadoc>
    </method>
    <method return="int" name="kbAreaGetBorderAreaID">
        <parameters type="int" name="areaID"/>
        <javadoc>Returns the Area ID of the index'th border area in the given area.</javadoc>
    </method>
    <method return="int" name="kbAreaGetType">
        <parameters type="int" name="areaID"/>
        <javadoc>Returns the Type of area.</javadoc>
    </method>
    <method return="int" name="kbAreaFindBestGatherAreaID">
        <parameters type="int" name="unitTypeID"/>
        <javadoc>Returns the Area ID of the best area to gather the given unit type.</javadoc>
    </method>
    <method return="int" name="kbAreaGetClosetArea">
        <parameters type="vector" name="position"/>
        <parameters type="int" name="areaType"/>
        <parameters type="int" name="areaType1"/>
        <parameters type="float" name="minDistance"/>
        <javadoc>&#xD;
Returns the Area ID of the closest area, of the given types, to given position.&#xD;
@note Yes, that's an official typo right there.</javadoc>
    </method>
    <method return="void" name="rmAddAreaCliffEdgeAvoidClass">
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="avoidID"/>
        <parameters type="float" name="minDist"/>
        <javadoc>Adds a class for an area's cliff edge to avoid.</javadoc>
    </method>
    <method return="bool" name="rmAddAreaConstraint">
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="constraintID"/>
        <javadoc>Add specified constraint to an area.*/</javadoc>
    </method>
    <method return="void" name="rmAddAreaInfluencePoint">
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="xFraction"/>
        <parameters type="float" name="zFraction"/>
        <javadoc>Adds an area influence point.*/</javadoc>
    </method>
    <method return="void" name="rmAddAreaInfluenceSegment">
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="xFraction1"/>
        <parameters type="float" name="zFraction1"/>
        <parameters type="float" name="xFraction2"/>
        <parameters type="float" name="zFraction2"/>
        <javadoc>&#xD;
Adds an area influence segment. You may want an area to grow towards specific points or lines.&#xD;
A circular area placed at the center of the map with an influence point of 1, 1 will produce a peninsula that protrudes towards 12 oâ€™clock.&#xD;
Influence points and segments can be useful in getting areas, such as rivers, to extend beyond the edge of the map.</javadoc>
    </method>
    <method return="void" name="rmAddAreaRemoveType">
        <parameters type="int" name="areaID"/>
        <parameters type="string" name="typeName"/>
        <javadoc>&#xD;
Add an unit type that the specified area removes.&#xD;
Sometimes you may want an area to clean itself of objects, such as removing trees from ice.&#xD;
This will only work if the objects are already placed before the area, which is the reverse of how most ES maps are generated.&#xD;
You can reference specific units or abstract types, such as "unit" and "building."</javadoc>
    </method>
    <method return="void" name="rmAddAreaTerrainLayer">
        <parameters type="int" name="areaID"/>
        <parameters type="string" name="terrain"/>
        <parameters type="float" name="minDist"/>
        <parameters type="float" name="maxDist"/>
        <javadoc>&#xD;
Adds a terrain layer to an area. Terrain layers allow you to place a border of one or more textures around an area.&#xD;
For example, you can have grassDirt50 and grassDirt75 around an area of grass. You can specify multiple layers for an area,&#xD;
as long as the minDistance for one starts where the maxDistance for another leaves off.&#xD;
Because different textures overlap one another you may need to experiment with distances to get a good effect.&#xD;
Here is an example:&#xD;
&lt;code&gt;&#xD;
rmSetAreaTerrainType(areaID, "GrassA");&#xD;
rmAddAreaTerrainLayer(areaID, "SnowGrass75", 13, 20);&#xD;
rmAddAreaTerrainLayer(areaID, "SnowGrass50", 6, 13);&#xD;
rmAddAreaTerrainLayer(areaID, "SnowGrass25", 0, 6);&#xD;
&lt;/code&gt;</javadoc>
    </method>
    <method return="void" name="rmAddAreaTerrainReplacement">
        <parameters type="int" name="areaID"/>
        <parameters type="string" name="terrainTypeName"/>
        <parameters type="string" name="newTypeName"/>
        <javadoc>Adds a terrain replacement rule to the area. If you place an area with no terrain specified, it will use the terrain of the parent area (including the base map).&#xD;
However, specifying terrain replacement will paint an area only when another texture is present.&#xD;
This command is most useful with connections, where you want to replace water with land where a connection goes across a river, or replace rock with snow for mountain passes.</javadoc>
    </method>
    <method return="bool" name="rmAddAreaToClass">
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="classID"/>
        <javadoc>Add given area to specified class.</javadoc>
    </method>
    <method return="int" name="rmAreaID">
        <parameters type="string" name="name"/>
        <javadoc>Gets the area ID for given area name.</javadoc>
    </method>
    <method return="void" name="rmBuildAllAreas">
        <javadoc>&#xD;
Simultaneously builds all unbuilt areas. This does not include connections.&#xD;
@see #rmBuildArea(int)</javadoc>
    </method>
    <method return="void" name="rmBuildArea">
        <parameters type="int" name="areaID"/>
        <javadoc>&#xD;
Builds the specified area. Actually builds the area.&#xD;
Choosing when to use this command can have a big effect on your map.&#xD;
For example, if you place each player area one by one, the first few will have enough room to build,&#xD;
but if after 11 areas, area 12 still needs to be placed, it might have run out of space because the others were to greedy.&#xD;
To avoid this, build all player area's at the same time, so that the script can try to find a fair balance between all areas.&#xD;
@see #rmBuildAllAreas()</javadoc>
    </method>
    <method return="int" name="rmCreateArea">
        <parameters type="string" name="name"/>
        <parameters type="int" name="parentAreaID"/>
        <javadoc>Creates an area and returns the areaID.</javadoc>
    </method>
    <method return="void" name="rmPaintAreaTerrain">
        <parameters type="int" name="areaID"/>
        <javadoc>Paints the terrain for a specified area.</javadoc>
    </method>
    <method return="void" name="rmSetAreaBaseHeight">
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="height"/>
        <javadoc>Sets the base height for an area.</javadoc>
    </method>
    <method return="void" name="rmSetAreaCliffEdge">
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="count"/>
        <parameters type="float" name="size"/>
        <parameters type="float" name="variance"/>
        <parameters type="float" name="spacing"/>
        <parameters type="int" name="mapEdge"/>
        <javadoc>&#xD;
Set cliff edge parameters for an area. Determines whether there should be pathable ramps or not connecting the top of the cliff to the surrounding area.&#xD;
@param count Number of cliff edges to create. The count times the size should not be more than 1.0. Defaults to 1.&#xD;
@param size This specifies how much of the area's outline should be turned into cliff edges. It should be between 0.0 and 1.0. Set to 1.0 to make the whole area surrounded. Defaults to 0.5.&#xD;
@param variance The variance to use for the size. Defaults to 0.0.&#xD;
@param spacing Spacing modifier. This should be between 0.0 and 1.0. The smaller this is, the closer together the cliff edges will be. Defaults to 1.0.&#xD;
@param mapEdge Specifies where the cliff edge should be in relation to the map edge. Set to 0 for any, 1 to be away from the map edge, or 2 to be close to the map edge. Defaults to 0.</javadoc>
    </method>
    <method return="void" name="rmSetAreaCliffHeight">
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="val"/>
        <parameters type="float" name="variance"/>
        <parameters type="float" name="ramp"/>
        <javadoc>&#xD;
Set an area's cliff height.&#xD;
@param val Make positive for raised cliffs and negative for lowered cliffs. Defaults to 4.0.&#xD;
@param variance The variance to use for the height.&#xD;
@param ramp This is used to determine how quickly the height ramps up to the cliff height (it refers to steepness in this context, not pathable ramps to reach the top of a cliff). Defaults to 0.5.</javadoc>
    </method>
    <method return="void" name="rmSetAreaCliffPainting">
        <parameters type="int" name="areaID"/>
        <parameters type="bool" name="paintGround"/>
        <parameters type="bool" name="paintOutsideEdge"/>
        <parameters type="bool" name="paintSide"/>
        <parameters type="float" name="minSideHeight"/>
        <parameters type="bool" name="paintInsideEdge"/>
        <javadoc>&#xD;
Set cliff painting options for an area.&#xD;
Determines how a cliff is painted with impassable and passable textures.&#xD;
@param paintGround Specifies if the ground should be painted or just left whatever it already is. Defaults true.&#xD;
@param paintSide Specifies if the cliff sides should be painted. Defaults true.&#xD;
@param paintOutsideEdge Specifies if the outside cliff edge should be painted. This is the area between the cliff side and the ground. Defaults true.&#xD;
@param minSideHeight Specifies the minimum height that a cliff tile must be sloped before treating it as a cliff side. Set to 0 to have the minimum amount of cliff sides painted. Defaults to 1.5.&#xD;
@param paintInsideEdge Specifies if the inside cliff edge should be painted. This is the area between the cliff side and the ground. Defaults true.</javadoc>
    </method>
    <method return="void" name="rmSetAreaCliffType">
        <parameters type="int" name="areaID"/>
        <parameters type="string" name="cliffName"/>
        <javadoc>Sets the cliff type for an area.</javadoc>
    </method>
    <method return="void" name="rmSetAreaCoherence">
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="coherence"/>
        <javadoc>Sets area coherence (0-1).</javadoc>
    </method>
    <method return="void" name="rmSetAreaForestType">
        <parameters type="int" name="areaID"/>
        <parameters type="string" name="forestName"/>
        <javadoc>Sets the forest type for an area.</javadoc>
    </method>
    <method return="void" name="rmSetAreaHeightBlend">
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="heightBlend"/>
        <javadoc>&#xD;
Sets how smoothly area height blends into surroundings. Corresponds to the smooth tool in the Scenario Editor.&#xD;
Usually a heightBlend of 0 will leave geometric-looking jagged edges. A heightBlend of 1 will smooth smaller areas.&#xD;
A heightBlend of 2 will smooth larger areas or areas of disproportionate heights. Anything above 2 may flatten an area completely.</javadoc>
    </method>
    <method return="void" name="rmSetAreaLocation">
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="xFraction"/>
        <parameters type="float" name="zFraction"/>
        <javadoc>Set the area location.</javadoc>
    </method>
    <method return="void" name="rmSetAreaLocPlayer">
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="playerID"/>
        <javadoc>Set the area location to player's location.*/</javadoc>
    </method>
    <method return="void" name="rmSetAreaLocTeam">
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="teamID"/>
        <javadoc>Set the area location to team's location.*/</javadoc>
    </method>
    <method return="void" name="rmSetAreaMaxBlobDistance">
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="dist"/>
        <javadoc>Sets maximum blob distance.*/</javadoc>
    </method>
    <method return="void" name="rmSetAreaMaxBlobs">
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="blobs"/>
        <javadoc>Sets maximum number of area blobs. An area can be placed with multiple blobs. Blobs are placed independently, using the minimum and maximum distances below.&#xD;
Areas made with a single blob will be circular. Areas made with multiple blobs can be come long and sinuous.*/</javadoc>
    </method>
    <method return="void" name="rmSetAreaMinBlobDistance">
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="dist"/>
        <javadoc>Sets minimum blob distance.*/</javadoc>
    </method>
    <method return="void" name="rmSetAreaMinBlobs">
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="blobs"/>
        <javadoc>Sets minimum number of area blobs.*/</javadoc>
    </method>
    <method return="void" name="rmSetAreaSize">
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="minFraction"/>
        <parameters type="float" name="maxFraction"/>
        <javadoc>Set the area size to a min/max fraction of the map.*/</javadoc>
    </method>
    <method return="void" name="rmSetAreaSmoothDistance">
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="smoothDistance"/>
        <javadoc>Sets area edge smoothing distance (distance is number of neighbouring points to consider in each direction).</javadoc>
    </method>
    <method return="void" name="rmSetAreaTerrainLayerVariance">
        <parameters type="int" name="areaID"/>
        <parameters type="bool" name="variance"/>
        <javadoc>Specifies if the area should vary the terrain layer edges. Usually, variance in terrain layers looks better,&#xD;
but sometimes you might want to turn it off. Defaults to true.*/</javadoc>
    </method>
    <method return="void" name="rmSetAreaTerrainType">
        <parameters type="int" name="areaID"/>
        <parameters type="string" name="terrainTypeName"/>
        <javadoc>&#xD;
Sets the terrain type for an area.&#xD;
Even if your area does not place special terrain,&#xD;
it can be helpful to temporarily paint the area with a distinct texture,&#xD;
such as "Black" or "SnowA", to see where and if it is actually getting placed.</javadoc>
    </method>
    <method return="void" name="rmSetAreaWarnFailure">
        <parameters type="int" name="areaID"/>
        <parameters type="bool" name="warn"/>
        <javadoc>&#xD;
Sets whether the area build process will warn if it fails.&#xD;
It is very easy to over-constrain areas to the point where there is no room for them.&#xD;
This can cause two problems: the map may take a long time to generate, or if you are in debug mode,&#xD;
the debugger will pop up and generation will stop.&#xD;
Sometimes you want to catch these errors,&#xD;
but when you are done with your map it is a good idea to set SetAreaWarnFailure to false.&#xD;
</javadoc>
    </method>
    <method return="void" name="rmSetAreaWaterType">
        <parameters type="int" name="areaID"/>
        <parameters type="string" name="waterName"/>
        <javadoc>Sets the water type for an area.*/</javadoc>
    </method>
    <method return="int" name="kbArmyCreate">
        <parameters type="string" name="name"/>
        <parameters type="bool" name="exclusiveUnits"/>
        <javadoc>Creates a army with the given name.</javadoc>
    </method>
    <method return="bool" name="kbArmyDestroy">
        <parameters type="int" name="armyID"/>
        <javadoc>Destroys the given army.</javadoc>
    </method>
    <method return="int" name="kbArmyGetNumber">
        <javadoc>Returns the number of armies.</javadoc>
    </method>
    <method return="int" name="kbArmyGetID">
        <parameters type="string" name="name"/>
        <javadoc>Finds an army with the given name (as set {@link #kbArmyCreate(string, bool) at creation} or in the editor).</javadoc>
    </method>
    <method return="int" name="kbArmyGetIDByIndex">
        <javadoc>Returns the index'th army ID.</javadoc>
    </method>
    <method return="string" name="kbArmyGetName">
        <parameters type="int" name="amryID"/>
        <javadoc>Returns the name of the given army.</javadoc>
    </method>
    <method return="int" name="kbArmyGetNumberUnits">
        <parameters type="int" name="armyID"/>
        <javadoc>Returns the number of units in the given army.</javadoc>
    </method>
    <method return="int" name="kbArmyGetUnitID">
        <parameters type="int" name="armyID"/>
        <javadoc>Returns the appropriate unitID from the given army.</javadoc>
    </method>
    <method return="bool" name="kbArmyAddUnit">
        <parameters type="int" name="armyID"/>
        <parameters type="int" name="unitID"/>
        <javadoc>Adds the unitID to the given army.</javadoc>
    </method>
    <method return="bool" name="kbArmyRemoveUnit">
        <parameters type="int" name="armyID"/>
        <parameters type="int" name="unitID"/>
        <javadoc>Removes the unitID from the given army.</javadoc>
    </method>
    <method return="bool" name="kbArmyRemoveUnitByIndex">
        <parameters type="int" name="armyID"/>
        <parameters type="int" name="unitIndex"/>
        <javadoc>Removes the unitIndex'th unit from the given army.</javadoc>
    </method>
    <method return="bool" name="kbArmyRemoveUnits">
        <parameters type="int" name="armyID"/>
        <javadoc>Removes all units from the given army.</javadoc>
    </method>
    <method return="int" name="kbArmyGetPlanID">
        <parameters type="int" name="armyID"/>
        <javadoc>Returns the planID for the given army.</javadoc>
    </method>
    <method return="int" name="kbArmyGetCreationTime">
        <parameters type="int" name="armyID"/>
        <javadoc>Returns the creation time for the given army.</javadoc>
    </method>
    <method return="int" name="kbArmyGetMembershipTime">
        <parameters type="int" name="armyID"/>
        <javadoc>Returns the creation time for the given army.</javadoc>
    </method>
    <method return="vector" name="kbArmyGetLocation">
        <parameters type="int" name="armyID"/>
        <javadoc>Returns the vector location for the given army.</javadoc>
    </method>
    <method return="int" name="kbArmyGetNumberWithinLocation">
        <parameters type="int" name="armyID"/>
        <parameters type="vector" name="point"/>
        <parameters type="float" name="range"/>
        <javadoc>Returns the number of units within range of the given point in the given army.</javadoc>
    </method>
    <method return="float" name="kbArmyGetCurrentHitpoints">
        <parameters type="int" name="armyID"/>
        <javadoc>Returns the current total hitpoints for the given army.</javadoc>
    </method>
    <method return="float" name="kbArmyGetMaximumHitpoints">
        <parameters type="int" name="armyID"/>
        <javadoc>Returns the maximum total hitpoints for the given army.</javadoc>
    </method>
    <method return="float" name="kbArmyGetHealth">
        <parameters type="int" name="armyID"/>
        <javadoc>Returns the health for the given army.</javadoc>
    </method>
    <method return="int" name="kbArmyGetNumberWithHealth">
        <parameters type="int" name="armyID"/>
        <parameters type="float" name="minimumHealth"/>
        <javadoc>Returns the number of units with at least the minimum amount of health specified for the given army.</javadoc>
    </method>
    <method return="float" name="kbArmyGetCurrentAICost">
        <parameters type="int" name="armyID"/>
        <javadoc>Returns the current AI cost (worth) for the given army.</javadoc>
    </method>
    <method return="float" name="kbArmyGetMaximumAICost">
        <parameters type="int" name="armyID"/>
        <javadoc>Returns the maximum AI cost (worth) for the given army.</javadoc>
    </method>
    <method return="float" name="kbArmyGetAPSDamageTaken">
        <parameters type="int" name="armyID"/>
        <parameters type="float" name="timeSpan"/>
        <javadoc>Returns the APS damage taken by the given army.</javadoc>
    </method>
    <method return="float" name="kbArmyGetAPSDamageGiven">
        <parameters type="int" name="armyID"/>
        <parameters type="float" name="timeSpan"/>
        <javadoc>Returns the APS damage given by the given army.</javadoc>
    </method>
    <method return="float" name="kbArmyGetAPSResourcesGathered">
        <parameters type="int" name="armyID"/>
        <parameters type="float" name="timeSpan"/>
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the APS resources gathered by the given army.</javadoc>
    </method>
    <method return="void" name="aiEcho">
        <parameters type="string" name="echoString"/>
        <javadoc>CP AI echo.</javadoc>
    </method>
    <method return="void" name="aiErrorMessage">
        <parameters type="string" name="errorString"/>
        <javadoc>CP AI error.</javadoc>
    </method>
    <method return="void" name="aiRandSetSeed">
        <parameters type="int" name="seed"/>
        <javadoc>Sets the seed of the random number generator.</javadoc>
    </method>
    <method return="int" name="aiRandInt">
        <parameters type="int" name="max"/>
        <javadoc>Returns a random number (mod'ed by max if provided).</javadoc>
    </method>
    <method return="vector" name="aiRandLocation">
        <javadoc>Returns a random location guaranteed to be on the map.</javadoc>
    </method>
    <method return="void" name="aiSet">
        <parameters type="string" name="filename"/>
        <parameters type="int" name="playerID"/>
        <javadoc>Sets playerID's AI to the given filename.&#xD;
@deprecated</javadoc>
    </method>
    <method return="void" name="aiBreakpointSet">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="filename"/>
        <parameters type="int" name="lineNumber"/>
        <parameters type="bool" name="on"/>
        <javadoc>Sets a breakpoint.&#xD;
@deprecated</javadoc>
    </method>
    <method return="void" name="aiBreakpointGo">
        <parameters type="int" name="playerID"/>
        <javadoc>Restart XS execution after the current breakpoint.&#xD;
@deprecated</javadoc>
    </method>
    <method return="string" name="aiGetPersonality">
        <javadoc>Gets the player's personality.</javadoc>
    </method>
    <method return="bool" name="aiSetPersonality">
        <parameters type="string" name="name"/>
        <javadoc>Sets the player's personality.</javadoc>
    </method>
    <method return="int" name="aiGoalGetNumber">
        <parameters type="int" name="goalType"/>
        <parameters type="int" name="goalState"/>
        <parameters type="bool" name="active"/>
        <javadoc>Returns the number of matching goals.</javadoc>
    </method>
    <method return="int" name="aiGoalGetIDByIndex">
        <parameters type="int" name="goalType"/>
        <parameters type="int" name="goalState"/>
        <parameters type="bool" name="active"/>
        <parameters type="int" name="index"/>
        <javadoc>Returns the ID of matching goal.</javadoc>
    </method>
    <method return="bool" name="aiGetAllowBuildings">
        <javadoc>Returns allow buildings on/off.</javadoc>
    </method>
    <method return="void" name="aiSetAllowBuildings">
        <parameters type="bool" name="v"/>
        <javadoc>Sets allow buildings on/off.</javadoc>
    </method>
    <method return="int" name="aiNumberUnassignedUnits">
        <parameters type="int" name="typeID"/>
        <javadoc>Returns the number of unassigned units of the given type.</javadoc>
    </method>
    <method return="int" name="aiNumberUnassignedUnitsByGoal">
        <parameters type="int" name="goalID"/>
        <javadoc>Returns the number of unassigned units based on the goal's unit type(s).</javadoc>
    </method>
    <method return="int" name="aiUnitCreateCheat">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="protoUnitID"/>
        <parameters type="vector" name="position"/>
        <parameters type="string" name="name"/>
        <parameters type="int" name="numberUnits"/>
        <parameters type="int" name="angle"/>
        <javadoc>Creates unit(s) with the given parms.</javadoc>
    </method>
    <method return="int" name="aiGetWorldDifficulty">
        <javadoc>Returns the world difficulty level.</javadoc>
    </method>
    <method return="void" name="aiSetWorldDifficulty">
        <parameters type="int" name="v"/>
        <javadoc>Sets the world difficulty level.</javadoc>
    </method>
    <method return="string" name="aiGetWorldDifficultyName">
        <parameters type="int" name="level"/>
        <javadoc>Returns the name of the level.</javadoc>
    </method>
    <method return="int" name="aiGetGameMode">
        <javadoc>Returns the game mode.</javadoc>
    </method>
    <method return="int" name="aiGetCaptainPlayerID">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the captain for the given player's team.</javadoc>
    </method>
    <method return="void" name="aiAutoSavegame">
        <parameters type="string" name="filename"/>
        <javadoc>Saves the auto, debugging savegames. Does not work.</javadoc>
    </method>
    <method return="bool" name="aiGetAutosaveOn">
        <javadoc>Returns whether or not its cool to turn AI autosaves on.</javadoc>
    </method>
    <method return="bool" name="aiSetExploreDangerThreshold">
        <parameters type="float" name="value"/>
        <javadoc>Sets the ai's Explore Danger Threshold value.</javadoc>
    </method>
    <method return="float" name="aiGetExploreDangerThreshold">
        <javadoc>Gets the ai's Explore Danger Threshold value.</javadoc>
    </method>
    <method return="void" name="aiSetRandomMap">
        <parameters type="bool" name="v"/>
        <javadoc>Sets the RM bool in the AI.</javadoc>
    </method>
    <method return="void" name="aiSetPauseAllAgeUpgrades">
        <parameters type="bool" name="v"/>
        <javadoc>Sets the pause all age upgrades flag in the AI.</javadoc>
    </method>
    <method return="bool" name="aiGetPauseAllAgeUpgrades">
        <javadoc>Gets the pause all age upgrades flag from the AI.</javadoc>
    </method>
    <method return="void" name="aiResign">
        <javadoc>Reigns the current player..</javadoc>
    </method>
    <method return="void" name="aiAttemptResign">
        <javadoc>Asks the player if its ok to resign</javadoc>
    </method>
    <method return="void" name="aiSetMaxLOSProtoUnitLimit">
        <parameters type="int" name="limit"/>
        <javadoc>Sets the limit for how many LOS Protounits (e.g. obelisks) the AI can build</javadoc>
    </method>
    <method return="int" name="aiGetMaxLOSProtoUnitLimit">
        <javadoc>Gets the limit for how many LOS Protounits (e.g. obelisks) the AI can build</javadoc>
    </method>
    <method return="int" name="aiGetPopNeeds">
        <javadoc>Gets the current Pop needs of all the plans.</javadoc>
    </method>
    <method return="void" name="aiSwitchMainBase">
        <parameters type="int" name="newBaseID"/>
        <parameters type="bool" name="force"/>
        <javadoc>Switch the newBaseID to be the main base.</javadoc>
    </method>
    <method return="void" name="aiSetDefaultStance">
        <parameters type="int" name="defaultStance"/>
        <javadoc>Sets your default stance for all of your units.</javadoc>
    </method>
    <method return="void" name="aiSetWaterMap">
        <parameters type="bool" name="v"/>
        <javadoc>Tells the AI if this is a water map or not.</javadoc>
    </method>
    <method return="bool" name="aiGetWaterMap">
        <javadoc>Tells us if the AI thinks this is a water map or not.</javadoc>
    </method>
    <method return="void" name="aiQueueAutoSavegame">
        <parameters type="int" name="saveNumber"/>
        <javadoc>Queues the auto savegame.</javadoc>
    </method>
    <method return="bool" name="aiIsMultiplayer">
        <javadoc>Returns true, if this is a multiplayer game.</javadoc>
    </method>
    <method return="void" name="kbSetForwardBasePosition">
        <parameters type="vector" name="position"/>
        <javadoc>Set the explicit position that every forward base will use.</javadoc>
    </method>
    <method return="bool" name="kbBaseAddUnit">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <parameters type="int" name="unitID"/>
        <javadoc>Adds the given unit to the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseRemoveUnit">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <parameters type="int" name="unitID"/>
        <javadoc>Removes the given unit to the base.</javadoc>
    </method>
    <method return="int" name="kbBaseGetNumberUnits">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <parameters type="int" name="relation"/>
        <parameters type="int" name="unitTypeID"/>
        <javadoc>Returns the number of units that match the criteria.</javadoc>
    </method>
    <method return="int" name="kbBaseFindCreateForwardBase">
        <parameters type="int" name="enemyPlayerID"/>
        <parameters type="int" name="enemyBaseID"/>
        <javadoc>Finds/Creates a 'forward' military base against the given enemy base.</javadoc>
    </method>
    <method return="bool" name="kbBaseDestroy">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Destroys the given base.</javadoc>
    </method>
    <method return="void" name="kbBaseDestroyAll">
        <parameters type="int" name="playerID"/>
        <javadoc>Destroys all of the bases for the given player.</javadoc>
    </method>
    <method return="vector" name="kbBaseGetLocation">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the location of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseSetFrontVector">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <parameters type="vector" name="frontVector"/>
        <javadoc>Sets the front (and back) of the base.</javadoc>
    </method>
    <method return="vector" name="kbBaseGetFrontVector">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the front vector of the base.</javadoc>
    </method>
    <method return="vector" name="kbBaseGetBackVector">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the back vector of the base.</javadoc>
    </method>
    <method return="int" name="kbBaseGetTimeUnderAttack">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Returns the number of continuous seconds the base has been under attack.</javadoc>
    </method>
    <method return="bool" name="kbBaseGetUnderAttack">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the under attack flag of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseSetActive">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <parameters type="bool" name="active"/>
        <javadoc>Sets the active flag of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseGetActive">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the active flag of the base.</javadoc>
    </method>
    <method return="int" name="kbBaseGetMainID">
        <parameters type="int" name="playerID"/>
        <javadoc>Gets the main base ID for the player.</javadoc>
    </method>
    <method return="bool" name="kbBaseSetMain">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <parameters type="bool" name="main"/>
        <javadoc>Sets the main flag of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseGetMain">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the main flag of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseSetForward">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <parameters type="bool" name="forward"/>
        <javadoc>Sets the forward flag of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseGetForward">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the forward flag of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseSetSettlement">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <parameters type="bool" name="settlement"/>
        <javadoc>Sets the settlement flag of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseGetSettlement">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the settlement flag of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseSetMilitary">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <parameters type="bool" name="military"/>
        <javadoc>Sets the military flag of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseGetMilitary">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the military flag of the base.</javadoc>
    </method>
    <method return="vector" name="kbBaseGetMilitaryGatherPoint">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the military gather point of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseSetMilitaryGatherPoint">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <parameters type="vector" name="gatherPoint"/>
        <javadoc>Sets the military gather point of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseSetEconomy">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <parameters type="bool" name="Economy"/>
        <javadoc>Sets the economy flag of the base.</javadoc>
    </method>
    <method return="bool" name="kbBaseGetEconomy">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the economy flag of the base.</javadoc>
    </method>
    <method return="float" name="kbBaseGetMaximumResourceDistance">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the maximum resource distance of the base.</javadoc>
    </method>
    <method return="void" name="kbBaseSetMaximumResourceDistance">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="baseID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Sets the maximum resource distance of the base.</javadoc>
    </method>
    <method return="bool" name="kbGetAutoBaseCreate">
        <javadoc>Returns the auto base creation value.</javadoc>
    </method>
    <method return="void" name="kbSetAutoBaseCreate">
        <parameters type="bool" name="v"/>
        <javadoc>Sets the auto base creation value.</javadoc>
    </method>
    <method return="float" name="kbGetAutoBaseCreateDistance">
        <javadoc>Returns the auto base creation distance.</javadoc>
    </method>
    <method return="void" name="kbSetAutoBaseCreateDistance">
        <parameters type="float" name="v"/>
        <javadoc>Sets the auto base creation distance.</javadoc>
    </method>
    <method return="bool" name="kbGetAutoBaseDetect">
        <javadoc>Returns the auto base detection value.</javadoc>
    </method>
    <method return="void" name="kbSetAutoBaseDetect">
        <parameters type="bool" name="v"/>
        <javadoc>Sets the auto base detection value.</javadoc>
    </method>
    <method return="float" name="kbGetAutoBaseDetectDistance">
        <javadoc>Returns the auto base creation distance.</javadoc>
    </method>
    <method return="void" name="kbSetAutoBaseDetectDistance">
        <parameters type="float" name="v"/>
        <javadoc>Sets the auto base creation distance.</javadoc>
    </method>
    <method return="int" name="kbBaseGetNextID">
        <javadoc>Returns the ID of the next base that will be created.</javadoc>
    </method>
    <method return="int" name="kbBaseGetNumber">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the number of bases for the given player.</javadoc>
    </method>
    <method return="int" name="kbBaseGetIDByIndex">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="index"/>
        <javadoc>Returns the BaseID for the given base.</javadoc>
    </method>
    <method return="int" name="kbBaseCreate">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="name"/>
        <parameters type="vector" name="position"/>
        <parameters type="float" name="distance"/>
        <javadoc>Creates a base.</javadoc>
    </method>
    <method return="int" name="kbBuildingPlacementCreate">
        <parameters type="string" name="name"/>
        <javadoc>Creates a building placement; returns the ID.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementDestroy">
        <parameters type="int" name="id"/>
        <javadoc>Destroys the given building placement.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementResetResults">
        <javadoc>Resets the current building placement.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementSelect">
        <parameters type="int" name="id"/>
        <javadoc>Selects the given building placement.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementSetEventHandler">
        <parameters type="int" name="eventType"/>
        <parameters type="string" name="handlerName"/>
        <javadoc>Sets event handler function for the current Building Placement and event.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementSetBuildingType">
        <parameters type="int" name="buildingTypeID"/>
        <javadoc>Sets the building type for the current building placement.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementSetBaseID">
        <parameters type="int" name="baseID"/>
        <parameters type="int" name="locationPref"/>
        <javadoc>Sets the base ID and location preference for the current building placement.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementAddAreaID">
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="numberBorderAreaLayers"/>
        <parameters type="bool" name="addCenterInfluence"/>
        <javadoc>Adds the Area ID - with the given number of border area layers - to the current Building Placement. addCenterInfluence adds a positional influence from the area center.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementAddAreaGroupID">
        <parameters type="int" name="areaGroupID"/>
        <javadoc>Adds the AreaGroup ID to the current Building Placement.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementSetCenterPosition">
        <parameters type="vector" name="position"/>
        <parameters type="float" name="distance"/>
        <parameters type="float" name="obstructionRadius"/>
        <javadoc>Sets up center position-based Building Placement.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementAddUnitInfluence">
        <parameters type="int" name="typeID"/>
        <parameters type="float" name="value"/>
        <parameters type="float" name="distance"/>
        <javadoc>Adds the unit influence for the current building placement.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementAddPositionInfluence">
        <parameters type="vector" name="position"/>
        <parameters type="float" name="value"/>
        <parameters type="float" name="distance"/>
        <javadoc>Adds the position influence for the current building placement.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementSetMinimumValue">
        <parameters type="float" name="minimumValue"/>
        <javadoc>Sets the minimum acceptable value for evaluated spots in the Building Placement.</javadoc>
    </method>
    <method return="bool" name="kbBuildingPlacementStart">
        <javadoc>Starts the placement of current building.</javadoc>
    </method>
    <method return="vector" name="kbBuildingPlacementGetResultPosition">
        <parameters type="int" name="bpID"/>
        <javadoc>Returns the vector result position for given Building Placement ID.</javadoc>
    </method>
    <method return="float" name="kbBuildingPlacementGetResultValue">
        <parameters type="int" name="bpID"/>
        <javadoc>Returns the result value for given Building Placement ID.</javadoc>
    </method>
    <method return="void" name="trCampaignAdvance">
        <javadoc>Advances the campaign (advance user profile, AND plays the next scenario).</javadoc>
    </method>
    <method return="void" name="trCampaignAdvanceProgress">
        <javadoc>Advances the user progress through the campaign.(updates user profile only).</javadoc>
    </method>
    <method return="void" name="trCampaignPlayCurrent">
        <javadoc>Plays the current scenario in the campaign.</javadoc>
    </method>
    <method return="void" name="trBranchScenario">
        <javadoc>Generate a yes/no message box. Branches the current scenario.</javadoc>
    </method>
    <method return="void" name="trShowCampaignDlg">
        <parameters type="string" name="nextCampaign"/>
        <parameters type="string" name="message"/>
        <javadoc>Shows the campaign dialog, with the given message.</javadoc>
    </method>
    <method return="void" name="trChatHistoryClear">
        <javadoc>Forces the chat history to reset.</javadoc>
    </method>
    <method return="bool" name="trChatHistoryContains">
        <parameters type="string" name="text"/>
        <parameters type="int" name="playerID"/>
        <javadoc>Returns whether or not the current chat history contains this text of the given player.&#xD;
&lt;p&gt;&#xD;
Can cause out of sync in multiplayer, even in a low priority trigger.</javadoc>
    </method>
    <method return="void" name="trChatSend">
        <parameters type="int" name="fromID"/>
        <parameters type="string" name="message"/>
        <javadoc>Sends a chat message prefixed with the given player's name, e.g. "Player 1: the text here".&#xD;
&lt;p&gt;&#xD;
The exception is player 0, which results in the given line to be added as yellowish text to the chat history&#xD;
(normal chat is white and has a coloured icon indicating the sending player).</javadoc>
    </method>
    <method return="void" name="trChatSendSpoofed">
        <parameters type="int" name="fromID"/>
        <parameters type="string" name="message"/>
        <javadoc>Sends a chat message with the coloured icon of the given player but without their name prepended to the text.</javadoc>
    </method>
    <method return="void" name="trChatSendSpoofedToPlayer">
        <parameters type="int" name="fromID"/>
        <parameters type="int" name="toID"/>
        <parameters type="string" name="message"/>
        <javadoc>Same as {@link #trChatSendSpoofed(int, string)}, but only sent to a given player.</javadoc>
    </method>
    <method return="void" name="trChatSendToPlayer">
        <parameters type="int" name="fromID"/>
        <parameters type="int" name="toID"/>
        <parameters type="string" name="message"/>
        <javadoc>Same as {@link #trChatSend(int, string)}, but only sent to a given player.</javadoc>
    </method>
    <method return="void" name="trChatSetStatus">
        <parameters type="bool" name="on"/>
        <javadoc>Enables (true) or disables (false) the chat. This also prevents all other functions in this class (like {@link #trChatSend(int, string)}) from working.</javadoc>
    </method>
    <method return="void" name="trCameraCut">
        <parameters type="vector" name="pos"/>
        <parameters type="vector" name="dir"/>
        <parameters type="vector" name="up"/>
        <parameters type="vector" name="right"/>
        <javadoc>Puts the camera in the specified location</javadoc>
    </method>
    <method return="void" name="trCameraShake">
        <parameters type="float" name="duration"/>
        <parameters type="float" name="strength"/>
        <javadoc>Makes the camera shake.</javadoc>
    </method>
    <method return="void" name="trCamTrackLoad">
        <parameters type="string" name="filename"/>
        <javadoc>Loads a camera track.</javadoc>
    </method>
    <method return="void" name="trCamTrackPlay">
        <parameters type="float" name="duration"/>
        <parameters type="int" name="eventID"/>
        <javadoc>Plays the current camera track, and optinally calls and event when done.&#xD;
&lt;p&gt;&#xD;
If the given duration is -1, the duration of the track is used.</javadoc>
    </method>
    <method return="bool" name="trCinematicAbort">
        <javadoc>Returns whether the player has requested the cinematic to be skipped.</javadoc>
    </method>
    <method return="void" name="trCinematicDoAbort">
        <javadoc>Pretends a player has requested a cinematic to be skipped, i.e. {@link #trCinematicAbort()} will return true after this call.</javadoc>
    </method>
    <method return="void" name="trForceNonCinematicModels">
        <javadoc>Forces models to be in non-cinematic mode.</javadoc>
    </method>
    <method return="void" name="trLetterBox">
        <parameters type="bool" name="on"/>
        <javadoc>Turns letter box mode (cinematic mode) on or off.</javadoc>
    </method>
    <method return="void" name="trOverlayText">
        <parameters type="string" name="message"/>
        <parameters type="float" name="duration"/>
        <parameters type="int" name="x"/>
        <parameters type="int" name="y"/>
        <parameters type="int" name="width"/>
        <javadoc>&#xD;
Puts up a big movie-credits style text overlay, optionally in a strange location.&#xD;
&lt;p&gt;&#xD;
x, y, and width are relative to the top left of a 1024x768 pixels display. If any of these values is -1, the default position is used.&#xD;
&lt;p&gt;&#xD;
On widescreen monitors, the text will still be at the very left of the monitor at x=0,&#xD;
but somewhere in the right center at x=1000, and lines will wrap there as if the screen ended.</javadoc>
    </method>
    <method return="void" name="trOverlayTextColour">
        <parameters type="float" name="r"/>
        <parameters type="float" name="g"/>
        <parameters type="float" name="b"/>
        <javadoc>&#xD;
Sets the overlay text colour.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="trWaypointAddPoint">
        <parameters type="vector" name="a"/>
        <javadoc>Adds the waypoint into the trigger selection system.</javadoc>
    </method>
    <method return="void" name="trWaypointAddUnit">
        <parameters type="string" name="unitScenarioName"/>
        <javadoc>Adds the unit's position as a waypoint in the trigger selection system.</javadoc>
    </method>
    <method return="void" name="trWaypointClear">
        <javadoc>Clears the waypoints in the trigger selection system</javadoc>
    </method>
    <method return="vector" name="aiCommsGetRecordPosition">
        <parameters type="int" name="id"/>
        <javadoc>Get the position of a given record.</javadoc>
    </method>
    <method return="int" name="aiCommsSendPromptWithVector">
        <parameters type="int" name="targetPlayerID"/>
        <parameters type="int" name="promptType"/>
        <parameters type="int" name="textVariant"/>
        <parameters type="float" name="timeout"/>
        <parameters type="int" name="yesOrderType"/>
        <parameters type="int" name="noOrderType"/>
        <parameters type="int" name="data1"/>
        <parameters type="vector" name="position"/>
        <javadoc>Sends a prompt to the designated player and sets up a response.</javadoc>
    </method>
    <method return="int" name="aiCommsSendPrompt">
        <parameters type="int" name="targetPlayerID"/>
        <parameters type="int" name="promptType"/>
        <parameters type="int" name="textVariant"/>
        <parameters type="float" name="timeout"/>
        <parameters type="int" name="yesOrderType"/>
        <parameters type="int" name="noOrderType"/>
        <parameters type="int" name="data1"/>
        <javadoc>Sends a prompt to the designated player and sets up a response.</javadoc>
    </method>
    <method return="int" name="aiCommsSendOrderWithVector">
        <parameters type="int" name="targetPlayerID"/>
        <parameters type="int" name="promptType"/>
        <parameters type="int" name="data1"/>
        <parameters type="vector" name="position"/>
        <javadoc>Sends an order to the designated player.</javadoc>
    </method>
    <method return="int" name="aiCommsSendOrder">
        <parameters type="int" name="targetPlayerID"/>
        <parameters type="int" name="promptType"/>
        <parameters type="int" name="data1"/>
        <javadoc>Sends an order to the designated player.</javadoc>
    </method>
    <method return="int" name="aiCommsSendStatement">
        <parameters type="int" name="targetPlayerID"/>
        <parameters type="int" name="promptType"/>
        <parameters type="int" name="textVariant"/>
        <javadoc>Sends a statement to the designated player.</javadoc>
    </method>
    <method return="int" name="aiCommsSendStatementWithVector">
        <parameters type="int" name="targetPlayerID"/>
        <parameters type="int" name="promptType"/>
        <parameters type="int" name="textVariant"/>
        <parameters type="vector" name="v"/>
        <javadoc>Sends a statement to the designated player. Adds a location flare.</javadoc>
    </method>
    <method return="bool" name="aiCommsSetEventHandler">
        <parameters type="string" name="handlerFunctionName"/>
        <javadoc>Sets the handler for the communications system (invalid name unsets the handler).</javadoc>
    </method>
    <method return="bool" name="aiCommsSetSpecificEventHandler">
        <parameters type="string" name="handlerFunctionName"/>
        <javadoc>Sets the handler for a specific chat record in the comms system (invalid name unsets the handler).</javadoc>
    </method>
    <method return="void" name="aiChat">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="chatString"/>
        <javadoc>CP AI chat to playerID.&#xD;
@deprecated</javadoc>
    </method>
    <method return="void" name="aiSendChatToEveryone">
        <parameters type="string" name="chatString"/>
        <javadoc>CP AI chat to everyone.&#xD;
@deprecated</javadoc>
    </method>
    <method return="void" name="aiSendChatToAllies">
        <parameters type="string" name="chatString"/>
        <javadoc>CP AI chat to allies.&#xD;
@deprecated</javadoc>
    </method>
    <method return="void" name="aiSendChatToEnemies">
        <parameters type="string" name="chatString"/>
        <javadoc>CP AI chat to enemies.&#xD;
@deprecated</javadoc>
    </method>
    <method return="void" name="rmAddConnectionArea">
        <parameters type="int" name="connectionID"/>
        <parameters type="int" name="areaID"/>
        <javadoc>&#xD;
Adds an area to the connection. This is only valid if you set the connection type is set to cConnectAreas.&#xD;
You must specify this while defining the area, after the connection is defined, and before building the connection.</javadoc>
    </method>
    <method return="bool" name="rmAddConnectionConstraint">
        <parameters type="int" name="connectionID"/>
        <parameters type="int" name="constraintID"/>
        <javadoc>Add specified constraint to a connection.*/</javadoc>
    </method>
    <method return="bool" name="rmAddConnectionEndConstraint">
        <parameters type="int" name="connectionID"/>
        <parameters type="int" name="constraintID"/>
        <javadoc>Add specified constraint for a connection end point.*/</javadoc>
    </method>
    <method return="bool" name="rmAddConnectionStartConstraint">
        <parameters type="int" name="connectionID"/>
        <parameters type="int" name="constraintID"/>
        <javadoc>Add specified constraint for a connection start point.</javadoc>
    </method>
    <method return="void" name="rmAddConnectionTerrainReplacement">
        <parameters type="int" name="connectionID"/>
        <parameters type="string" name="terrainTypeName"/>
        <parameters type="string" name="newTypeName"/>
        <javadoc>Adds a terrain replacement rule to the connection.*/</javadoc>
    </method>
    <method return="void" name="rmAddConnectionToClass">
        <parameters type="int" name="connectionID"/>
        <parameters type="int" name="classID"/>
        <javadoc>Adds the connection to specified class.*/</javadoc>
    </method>
    <method return="void" name="rmBuildConnection">
        <parameters type="int" name="connectionID"/>
        <javadoc>Builds the given connection.</javadoc>
    </method>
    <method return="void" name="rmCreateConnection">
        <parameters type="string" name="name"/>
        <javadoc>Creates an connection.</javadoc>
    </method>
    <method return="void" name="rmSetConnectionBaseHeight">
        <parameters type="int" name="connectionID"/>
        <parameters type="float" name="width"/>
        <javadoc>Sets the base height of a connection.*/</javadoc>
    </method>
    <method return="void" name="rmSetConnectionBaseTerrainCost">
        <parameters type="int" name="connectionID"/>
        <parameters type="float" name="cost"/>
        <javadoc>Sets the base terrain cost for a connection.*/</javadoc>
    </method>
    <method return="void" name="rmSetConnectionCoherence">
        <parameters type="int" name="connectionID"/>
        <parameters type="float" name="width"/>
        <javadoc>Sets area coherence (0.0-1.0).*/</javadoc>
    </method>
    <method return="void" name="rmSetConnectionHeightBlend">
        <parameters type="int" name="connectionID"/>
        <parameters type="float" name="width"/>
        <javadoc>Sets how smoothly connection height blends into surroundings.*/</javadoc>
    </method>
    <method return="void" name="rmSetConnectionPositionVariance">
        <parameters type="int" name="connectionID"/>
        <parameters type="float" name="variance"/>
        <javadoc>&#xD;
Sets the position variance of a connection. The connection will normally start at the area's position, but this allows it to vary from that position.&#xD;
You can set this to -1 for it to pick completely random positions within the starting and ending areas.&#xD;
This command is often needed when specifying multiple connections (for example, one within a team and another between teams) so that the connections do not overlap.</javadoc>
    </method>
    <method return="void" name="rmSetConnectionSmoothDistance">
        <parameters type="int" name="connectionID"/>
        <parameters type="float" name="width"/>
        <javadoc>Sets connection edge smoothing distance (distance is number of neighboring points to consider in each direction).*/</javadoc>
    </method>
    <method return="void" name="rmSetConnectionTerrainCost">
        <parameters type="int" name="connectionID"/>
        <parameters type="string" name="terrainTypeName"/>
        <parameters type="float" name="cost"/>
        <javadoc>Sets the terrain cost for a connection.*/</javadoc>
    </method>
    <method return="void" name="rmSetConnectionType">
        <parameters type="int" name="connectionID"/>
        <parameters type="int" name="connectionType"/>
        <parameters type="bool" name="connectAll"/>
        <parameters type="float" name="connectPercentage"/>
        <javadoc>&#xD;
Sets the connection type.&#xD;
@param connectionType This command determines which players are connected. The valid values are:&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;cConnectAreas: This is the default that is used if you don't call rmSetConnectionType. You have to specify each area to be connected by calling rmAddConnectionArea().&lt;/li&gt;&#xD;
&lt;li&gt;cConnectPlayers: Connect all player areas.&lt;/li&gt;&#xD;
&lt;li&gt;cConnectAllies: Connect all ally player areas.&lt;/li&gt;&#xD;
&lt;li&gt;cConnectEnemies: Connect enemy player areas.&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
@param connectAll Set this parameter to true if you want all of the areas to get connected to all of the other areas.&#xD;
Set it to false to have the areas connected sequentially where the first area gets connected to the second area,&#xD;
the second area gets connected to the third area, etc.&#xD;
&#xD;
@param connectPercentage You can use this parameter to reduce the number of connections that are generated.&#xD;
For example, if you set it to 0.5, then half of the connections will get generated. The ones that are generated are randomly chosen.&#xD;
Some ES maps with connections connect all players when player number is small (less than 6) and uses a connection percentage on larger maps,&#xD;
otherwise so many connections can get placed that the barrier (like water or rock) is obscured.</javadoc>
    </method>
    <method return="void" name="rmSetConnectionWarnFailure">
        <parameters type="int" name="connectionID"/>
        <parameters type="bool" name="warn"/>
        <javadoc>Sets whether a connection warns on failure.*/</javadoc>
    </method>
    <method return="void" name="rmSetConnectionWidth">
        <parameters type="int" name="connectionID"/>
        <parameters type="float" name="width"/>
        <parameters type="float" name="variance"/>
        <javadoc>Sets the width of a connection.*/</javadoc>
    </method>
    <method return="int" name="rmConstraintID">
        <parameters type="string" name="name"/>
        <javadoc>Gets constraint ID for given constraint name.</javadoc>
    </method>
    <method return="int" name="rmCreateAreaConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <javadoc>Make a constraint that forces something to remain within an area. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateAreaDistanceConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Make a constraint that forces something to stay away from an area. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateAreaMaxDistanceConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Make a constraint that forces something to remain within a given distance from the areaID. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateAreaOverlapConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <javadoc>Make an area overlap constraint. This prevents areas from overlapping. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateBoxConstraint">
        <parameters type="string" name="name"/>
        <parameters type="float" name="startX"/>
        <parameters type="float" name="startZ"/>
        <parameters type="float" name="endX"/>
        <parameters type="float" name="endZ"/>
        <parameters type="float" name="bufferFraction"/>
        <javadoc>Make a box constraint and forces something to remain in it. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateClassDistanceConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="classID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Make a class distance constraint taht forces something to stay away from everything in the given class. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateCliffEdgeConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <javadoc>Make a constraint that forces something to remain within an area's cliff edge. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateCliffEdgeDistanceConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Make an area cliff edge distance constraint. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateCliffEdgeMaxDistanceConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Make an area cliff edge max distance constraint. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateCliffRampConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <javadoc>Make a constraint that forces something to remain within an area's cliff ramp edge. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateCliffRampDistanceConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Make an area cliff ramp edge distance constraint. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateCliffRampMaxDistanceConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Make an area cliff ramp edge max distance constraint. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateEdgeConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <javadoc>Make a constraint that forces something to remain within an area's edge. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateEdgeDistanceConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Make an area edge distance constraint and returns its ID</javadoc>
    </method>
    <method return="int" name="rmCreateEdgeMaxDistanceConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Make an area edge max distance constraint. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmCreateTerrainDistanceConstraint">
        <parameters type="string" name="name"/>
        <parameters type="string" name="type"/>
        <parameters type="bool" name="passable"/>
        <parameters type="float" name="distance"/>
        <javadoc>Make a constraint to avoid terrain with certain a passability.</javadoc>
    </method>
    <method return="int" name="rmCreateTerrainMaxDistanceConstraint">
        <parameters type="string" name="name"/>
        <parameters type="string" name="type"/>
        <parameters type="bool" name="passable"/>
        <parameters type="float" name="distance"/>
        <javadoc>Make a constraint to be close to terrain with certain a passability.</javadoc>
    </method>
    <method return="int" name="rmCreateTypeDistanceConstraint">
        <parameters type="string" name="name"/>
        <parameters type="int" name="classID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Make a type distance constraint.</javadoc>
    </method>
    <method return="float" name="rmTilesToMeters">
        <parameters type="int" name="tiles"/>
        <javadoc>Converts a number of tiles to a distance in meters.</javadoc>
    </method>
    <method return="float" name="rmXFractionToMeters">
        <parameters type="float" name="meters"/>
        <javadoc>Converts a fraction of the map in the x direction to meters.</javadoc>
    </method>
    <method return="float" name="rmXFractionToTiles">
        <parameters type="float" name="fraction"/>
        <javadoc>Converts an fraction of the map in the x direction to tile count.*/</javadoc>
    </method>
    <method return="float" name="rmXMetersToFraction">
        <parameters type="float" name="meters"/>
        <javadoc>Converts meters into a fraction of the map in the x direction.</javadoc>
    </method>
    <method return="float" name="rmXTilesToFraction">
        <parameters type="int" name="tiles"/>
        <javadoc>Converts tile count in the x direction to fraction of map.</javadoc>
    </method>
    <method return="float" name="rmZFractionToMeters">
        <parameters type="float" name="meters"/>
        <javadoc>Converts a fraction of the map in the z direction to meters.</javadoc>
    </method>
    <method return="float" name="rmZFractionToTiles">
        <parameters type="float" name="fraction"/>
        <javadoc>Converts an fraction of the map in the z direction to tile count.</javadoc>
    </method>
    <method return="float" name="rmZMetersToFraction">
        <parameters type="float" name="meters"/>
        <javadoc>Converts meters into a fraction of the map in the z direction.</javadoc>
    </method>
    <method return="float" name="rmZTilesToFraction">
        <parameters type="int" name="tiles"/>
        <javadoc>Converts tile count in the z direction to fraction of map.</javadoc>
    </method>
    <method return="float" name="rmAreaFractionToTiles">
        <parameters type="float" name="fraction"/>
        <javadoc>Converts an area from fraction of the map to tile count.</javadoc>
    </method>
    <method return="float" name="rmAreaTilesToFraction">
        <parameters type="int" name="tiles"/>
        <javadoc>Converts area tile count to fraction of map.</javadoc>
    </method>
    <method return="float" name="rmDegreesToRadians">
        <parameters type="float" name="degrees"/>
        <javadoc>Converts an angle in degrees to radians.</javadoc>
    </method>
    <method return="float" name="rmMetersToTiles">
        <parameters type="float" name="meters"/>
        <javadoc>Converts a distance in meters to a number of tiles.</javadoc>
    </method>
    <method return="bool" name="aiSellResourceOnMarket">
        <parameters type="int" name="resourceID"/>
        <javadoc>Sells (+100) the given resource.</javadoc>
    </method>
    <method return="bool" name="aiBuyResourceOnMarket">
        <parameters type="int" name="resourceID"/>
        <javadoc>Buys (+100) the given resource.</javadoc>
    </method>
    <method return="float" name="aiGetMarketBuyCost">
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the amount required to buy 100 units of the given resource.</javadoc>
    </method>
    <method return="float" name="aiGetMarketSellCost">
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the amount received for selling 100 units of the given resource.</javadoc>
    </method>
    <method return="int" name="aiGetResourceBreakdownNumberPlans">
        <parameters type="int" name="resourceTypeID"/>
        <parameters type="int" name="resourceSubTypeID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the number of plans for the given breakdown.</javadoc>
    </method>
    <method return="int" name="aiGetResourceBreakdownPlanPriority">
        <parameters type="int" name="resourceTypeID"/>
        <parameters type="int" name="resourceSubTypeID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the priority of the plans for the given breakdown.</javadoc>
    </method>
    <method return="float" name="aiGetResourceBreakdownPercentage">
        <parameters type="int" name="resourceTypeID"/>
        <parameters type="int" name="resourceSubTypeID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Gets the percentage for the given breakdown.</javadoc>
    </method>
    <method return="bool" name="aiSetResourceBreakdown">
        <parameters type="int" name="resourceTypeID"/>
        <parameters type="int" name="resourceSubTypeID"/>
        <parameters type="int" name="numberPlans"/>
        <parameters type="int" name="planPriority"/>
        <parameters type="float" name="percentage"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Sets a subtype breakdown for a resource.</javadoc>
    </method>
    <method return="bool" name="aiRemoveResourceBreakdown">
        <parameters type="int" name="resourceTypeID"/>
        <parameters type="int" name="resourceSubTypeID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Removes the given breakdown.</javadoc>
    </method>
    <method return="float" name="aiGetResourceGathererPercentage">
        <parameters type="int" name="resourceID"/>
        <parameters type="int" name="rgpIndex"/>
        <javadoc>Returns the resource gatherer percentage for the given resource.</javadoc>
    </method>
    <method return="void" name="aiSetResourceGathererPercentage">
        <parameters type="int" name="resourceID"/>
        <parameters type="float" name="value"/>
        <parameters type="bool" name="normalize"/>
        <parameters type="int" name="rgpIndex"/>
        <javadoc>Sets the resource gatherer percentage for the given resource (if normalized is true, the percentages will be normalized to 1.0).</javadoc>
    </method>
    <method return="void" name="aiNormalizeResourceGathererPercentages">
        <parameters type="int" name="rgpIndex"/>
        <javadoc>Normalizes all of the resource gatherer percentages to 1.0.</javadoc>
    </method>
    <method return="bool" name="aiTribute">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="resourceID"/>
        <parameters type="float" name="amount"/>
        <javadoc>Tributes the given player.</javadoc>
    </method>
    <method return="void" name="aiSetResourceGathererPercentageWeight">
        <parameters type="int" name="rgpIndex"/>
        <parameters type="float" name="weight"/>
        <javadoc>Sets the RGP weight.</javadoc>
    </method>
    <method return="bool" name="aiGetAllowAutoDropsites">
        <javadoc>Returns allow auto dropsites on/off.</javadoc>
    </method>
    <method return="bool" name="aiSetUpdateResourceEventHandler">
        <parameters type="string" name="handlerFunctionName"/>
        <javadoc>Sets the handler for the update resource event (invalid name unsets the handler).</javadoc>
    </method>
    <method return="bool" name="aiSetUpdateResourceLimit">
        <parameters type="int" name="resourceID"/>
        <parameters type="float" name="limit"/>
        <javadoc>Sets the limit for the given resource for the update resource event.</javadoc>
    </method>
    <method return="float" name="aiGetResourceGathererPercentageWeight">
        <parameters type="int" name="rgpIndex"/>
        <javadoc>Returns the RGP weight.</javadoc>
    </method>
    <method return="void" name="aiNormalizeResourceGathererPercentageWeights">
        <javadoc>Normalizes all of the resource gatherer percentages weights to 1.0.</javadoc>
    </method>
    <method return="int" name="aiGetAutoGatherEscrowID">
        <javadoc>Returns the auto gather escrow ID.</javadoc>
    </method>
    <method return="void" name="aiSetAutoGatherEscrowID">
        <parameters type="int" name="escrowID"/>
        <javadoc>Sets the auto gather escrow ID.</javadoc>
    </method>
    <method return="int" name="aiGetAutoFarmEscrowID">
        <javadoc>Returns the auto Farm escrow ID.</javadoc>
    </method>
    <method return="void" name="aiSetAutoFarmEscrowID">
        <parameters type="int" name="escrowID"/>
        <javadoc>Sets the auto Farm escrow ID.</javadoc>
    </method>
    <method return="int" name="aiGetFarmLimit">
        <javadoc>Returns the per plan farm build limit.</javadoc>
    </method>
    <method return="void" name="aiSetFarmLimit">
        <parameters type="int" name="limit"/>
        <javadoc>Sets the per plan farm build limit.</javadoc>
    </method>
    <method return="int" name="aiGetTrainedDropsiteUnitTypeID">
        <javadoc>Returns the trained dropsite PUID.</javadoc>
    </method>
    <method return="void" name="aiSetTrainedDropsiteUnitTypeID">
        <parameters type="int" name="v"/>
        <javadoc>&#xD;
Sets the trained dropsite PUID.&#xD;
In particular, this should register an ox cart as a valid dropsite.</javadoc>
    </method>
    <method return="void" name="aiSetFavorNeedModifier">
        <parameters type="float" name="v"/>
        <javadoc>Sets favor need modifier.</javadoc>
    </method>
    <method return="bool" name="aiGetAutoFavorGather">
        <javadoc>Returns auto favor gather on/off.</javadoc>
    </method>
    <method return="void" name="aiSetAutoFavorGather">
        <parameters type="bool" name="v"/>
        <javadoc>Sets auto favor gather on/off.</javadoc>
    </method>
    <method return="void" name="aiSetAllowAutoDropsites">
        <parameters type="bool" name="v"/>
        <javadoc>Sets allow auto dropsites on/off.</javadoc>
    </method>
    <method return="int" name="aiGetAvailableEconomyPop">
        <javadoc>Returns the available economy pop for this player.</javadoc>
    </method>
    <method return="void" name="aiGetCurrentResourceNeed">
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the current resource need for the given resource.</javadoc>
    </method>
    <method return="void" name="aiResourceCheat">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="resourceID"/>
        <parameters type="float" name="amount"/>
        <javadoc>Gives your wimpy CP AI free resources because it can't handle the truth, or something like that.</javadoc>
    </method>
    <method return="float" name="aiGetEconomyPercentage">
        <javadoc>Returns the economy priority percentage.</javadoc>
    </method>
    <method return="void" name="aiSetEconomyPercentage">
        <parameters type="float" name="v"/>
        <javadoc>Set the economy priority percentage.</javadoc>
    </method>
    <method return="int" name="aiGetEconomyPop">
        <javadoc>Returns the script-defined economy pop for this player.</javadoc>
    </method>
    <method return="void" name="aiSetEconomyPop">
        <parameters type="int" name="v"/>
        <javadoc>Set the script-defined economy pop for this player.</javadoc>
    </method>
    <method return="void" name="aiSetMinNumberNeedForGatheringAggressvies">
        <javadoc>Sets the min number of needed units to gather aggressive animals.</javadoc>
    </method>
    <method return="int" name="aiGetMinNumberNeedForGatheringAggressives">
        <javadoc>Gets the min number of needed units to gather aggressive animals.</javadoc>
    </method>
    <method return="void" name="aiSetMinNumberWantForGatheringAggressives">
        <javadoc>Sets the min number of wanted units to gather aggressive animals.</javadoc>
    </method>
    <method return="int" name="aiGetMinNumberWantForGatheringAggressives">
        <javadoc>Gets the min number of wanted units to gather aggressive animals.</javadoc>
    </method>
    <method return="int" name="kbEscrowCreate">
        <parameters type="string" name="name"/>
        <parameters type="int" name="resourceID"/>
        <parameters type="float" name="percentage"/>
        <parameters type="int" name="parentID"/>
        <javadoc>Creates an escrow.</javadoc>
    </method>
    <method return="bool" name="kbEscrowDestroy">
        <parameters type="int" name="escrowID"/>
        <parameters type="bool" name="promoteChildren"/>
        <javadoc>Destroys an escrow.</javadoc>
    </method>
    <method return="int" name="kbEscrowGetID">
        <parameters type="string" name="name"/>
        <javadoc>Returns the ID of the named escrow.</javadoc>
    </method>
    <method return="float" name="kbEscrowGetPercentage">
        <parameters type="int" name="escrowID"/>
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the percentage of the escrow.</javadoc>
    </method>
    <method return="bool" name="kbEscrowSetPercentage">
        <parameters type="int" name="escrowID"/>
        <parameters type="int" name="resourceID"/>
        <parameters type="float" name="percentage"/>
        <javadoc>Sets the percentage of the escrow.</javadoc>
    </method>
    <method return="bool" name="kbEscrowSetCap">
        <parameters type="int" name="escrowID"/>
        <parameters type="int" name="resourceID"/>
        <parameters type="float" name="cap"/>
        <javadoc>Sets the cap of the escrow.</javadoc>
    </method>
    <method return="float" name="kbEscrowGetAmount">
        <parameters type="int" name="escrowID"/>
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the amount of credits in the given escrow for the given resource.</javadoc>
    </method>
    <method return="bool" name="kbEscrowFlush">
        <parameters type="int" name="escrowID"/>
        <parameters type="int" name="resourceID"/>
        <parameters type="bool" name="flushChildren"/>
        <javadoc>Removes all credits (and puts them into the root escrow) of the given resource type from the given escrow.</javadoc>
    </method>
    <method return="bool" name="kbEscrowAllocateCurrentResources">
        <javadoc>Reallocates the current resource stockpile into the escrows.</javadoc>
    </method>
    <method return="bool" name="aiSetGodPowerEventHandler">
        <parameters type="string" name="handlerFunctionName"/>
        <javadoc>Sets the handler for god power casting events (invalid name unsets the handler).</javadoc>
    </method>
    <method return="bool" name="aiSetBuildEventHandler">
        <parameters type="string" name="handlerFunctionName"/>
        <javadoc>Sets the handler for building completed events (invalid name unsets the handler).</javadoc>
    </method>
    <method return="bool" name="aiSetWonderDeathEventHandler">
        <parameters type="string" name="handlerFunctionName"/>
        <javadoc>Sets the handler for wonder death events (invalid name unsets the handler).</javadoc>
    </method>
    <method return="bool" name="aiSetRetreatEventHandler">
        <parameters type="string" name="handlerFunctionName"/>
        <javadoc>Sets the handler for retreat events (invalid name unsets the handler).</javadoc>
    </method>
    <method return="bool" name="aiSetRelicEventHandler">
        <parameters type="string" name="handlerFunctionName"/>
        <javadoc>Sets the handler for relic events (invalid name unsets the handler).</javadoc>
    </method>
    <method return="bool" name="aiSetResignEventHandler">
        <parameters type="string" name="handlerFunctionName"/>
        <javadoc>Sets the handler for resign events (invalid name unsets the handler).</javadoc>
    </method>
    <method return="bool" name="aiSetAgeEventHandler">
        <parameters type="int" name="age"/>
        <parameters type="string" name="handlerFunctionName"/>
        <javadoc>Sets the handler for the given age (invalid name unsets the handler).</javadoc>
    </method>
    <method return="int" name="xsGetContextPlayer">
        <javadoc>Returns the current context player ID.</javadoc>
    </method>
    <method return="void" name="xsSetContextPlayer">
        <parameters type="int" name="playerID"/>
        <javadoc>&#xD;
Sets the current context player ID. Used to retrieve more detailed game info from the new player.&#xD;
&#xD;
@see aom.scripting.xs.kb.Unit#kbLookAtAllUnitsOnMap() kbLookAtAllUnitsOnMap()</javadoc>
    </method>
    <method return="int" name="xsGetTime">
        <javadoc>Returns the current game time in milliseconds. When used in triggers, it return the time in second.</javadoc>
    </method>
    <method return="bool" name="xsAddRuntimeEvent">
        <parameters type="string" name="foo"/>
        <parameters type="string" name="bar"/>
        <parameters type="int" name="something"/>
        <javadoc>Sets up a runtime event. Nobody really knows what it does.</javadoc>
    </method>
    <method return="int" name="xsGetFuntionID">
        <parameters type="string" name="functionName"/>
        <javadoc>Runs the secret XSFID for the function. USE WITH CAUTION.</javadoc>
    </method>
    <method return="int" name="rmAddFairLoc">
        <parameters type="string" name="unitName"/>
        <parameters type="bool" name="forward"/>
        <parameters type="bool" name="inside"/>
        <parameters type="float" name="minPlayerDist"/>
        <parameters type="float" name="maxPlayerDist"/>
        <parameters type="float" name="locDist"/>
        <parameters type="float" name="edgeDist"/>
        <parameters type="bool" name="playerArea"/>
        <parameters type="bool" name="teamArea"/>
        <javadoc>Adds some fairLoc placement info.*/</javadoc>
    </method>
    <method return="bool" name="rmAddFairLocConstraint">
        <parameters type="int" name="fairLocID"/>
        <parameters type="int" name="constraintID"/>
        <javadoc>Add specified constraint to a fairLoc placement.*/</javadoc>
    </method>
    <method return="float" name="rmFairLocXFraction">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="index"/>
        <javadoc>Gets a player's fairLoc x fraction.</javadoc>
    </method>
    <method return="float" name="rmFairLocZFraction">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="index"/>
        <javadoc>Gets a player's fairLoc z fraction.</javadoc>
    </method>
    <method return="int" name="rmGetNumberFairLocs">
        <parameters type="int" name="playerID"/>
        <javadoc>Gets a player's number of fairLocs.</javadoc>
    </method>
    <method return="bool" name="rmPlaceFairLocs">
        <javadoc>Places down a fairLoc and returns whether or not it was succesful.</javadoc>
    </method>
    <method return="void" name="rmResetFairLocs">
        <javadoc>Resets fairLoc placement info.</javadoc>
    </method>
    <method return="bool" name="aiCastGodPowerAtPosition">
        <parameters type="int" name="godPowerTechID"/>
        <parameters type="vector" name="pos"/>
        <javadoc>Casts the given God power tech, at the specified position.</javadoc>
    </method>
    <method return="bool" name="aiCastGodPowerAtUnit">
        <parameters type="int" name="godPowerTechID"/>
        <parameters type="int" name="unitID"/>
        <javadoc>Casts the given God power tech, at the specified unit.</javadoc>
    </method>
    <method return="int" name="aiGetGodPowerTechIDForSlot">
        <parameters type="int" name="slotID"/>
        <javadoc>Get the god power tech id from the given slot.</javadoc>
    </method>
    <method return="int" name="aiGetGodPowerProtoIDForTechID">
        <parameters type="int" name="techID"/>
        <javadoc>Translate a granted tech id into a protopower id</javadoc>
    </method>
    <method return="int" name="aiGetGodPowerType">
        <parameters type="int" name="protoPowerID"/>
        <javadoc>Get the type for a ProtoPower</javadoc>
    </method>
    <method return="int" name="aiFindBestAttackGodPowerPlan">
        <javadoc>Find a valid god power plan to attach to an attack plan</javadoc>
    </method>
    <method return="int" name="aiFindBestTownDefenseGodPowerPlan">
        <javadoc>Find a valid god power plan to use for town defense</javadoc>
    </method>
    <method return="void" name="kbEcho">
        <parameters type="string" name="echoString"/>
        <javadoc>&#xD;
Knowledge Base echo.&#xD;
You'll probably want to use some other echo instead.&#xD;
&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#aiEcho(string) aiEcho(string)&#xD;
@see aom.scripting.xs.tr.Triggers#trEcho(string) trEcho(string)</javadoc>
    </method>
    <method return="bool" name="kbIsGameOver">
        <javadoc>Returns whether the game is over or not.</javadoc>
    </method>
    <method return="int" name="aiGetMostHatedPlayerID">
        <javadoc>Returns the script-defined most hated player ID for this player.</javadoc>
    </method>
    <method return="int" name="aiCalculateMostHatedPlayerID">
        <parameters type="int" name="comparePlayerID"/>
        <javadoc>Returns the playerID for the player the AI thinks it should be attacking.</javadoc>
    </method>
    <method return="void" name="aiSetMostHatedPlayerID">
        <parameters type="int" name="v"/>
        <javadoc>Sets the script-defined most hated player ID for this player.</javadoc>
    </method>
    <method return="int" name="aiGetAvailableMilitaryPop">
        <javadoc>Returns the script-defined military pop for this player.</javadoc>
    </method>
    <method return="int" name="aiGetMilitaryPop">
        <javadoc>Returns the script-defined military pop for this player.</javadoc>
    </method>
    <method return="void" name="aiSetMilitaryPop">
        <parameters type="int" name="v"/>
        <javadoc>Set the script-defined military pop for this player.</javadoc>
    </method>
    <method return="float" name="aiGetMilitaryPercentage">
        <javadoc>Returns the militarypriority percentage.</javadoc>
    </method>
    <method return="void" name="aiSetMilitaryPercentage">
        <parameters type="float" name="v"/>
        <javadoc>Set the military priority percentage.</javadoc>
    </method>
    <method return="float" name="aiGetAttackResponseDistance">
        <javadoc>Returns the attack response distance.</javadoc>
    </method>
    <method return="void" name="aiSetAttackResponseDistance">
        <parameters type="float" name="v"/>
        <javadoc>Set the attack response distance.</javadoc>
    </method>
    <method return="bool" name="aiSetAutoGatherMilitaryUnits">
        <parameters type="bool" name="v"/>
        <javadoc>Turns auto gathering of military units at bases on/off.</javadoc>
    </method>
    <method return="void" name="trFadeOutAllSounds">
        <parameters type="float" name="duration"/>
        <javadoc>Fades out all sounds over a given duration.</javadoc>
    </method>
    <method return="void" name="trFadeOutMusic">
        <parameters type="float" name="duration"/>
        <javadoc>Fades out current music over a given duration.</javadoc>
    </method>
    <method return="void" name="trMusicPlay">
        <parameters type="string" name="filename"/>
        <parameters type="float" name="volume"/>
        <parameters type="float" name="duration"/>
        <javadoc>Plays the music file.</javadoc>
    </method>
    <method return="void" name="trMusicPlayCurrent">
        <javadoc>Plays the current music.</javadoc>
    </method>
    <method return="void" name="trMusicSetCurrentMusicSet">
        <javadoc>Sets the current music set.</javadoc>
    </method>
    <method return="void" name="trMusicSetMood">
        <parameters type="int" name="moodID"/>
        <javadoc>Changes the music to mood associated with mood id.</javadoc>
    </method>
    <method return="void" name="trMusicStop">
        <javadoc>Stops the current music.</javadoc>
    </method>
    <method return="void" name="trPlayMovie">
        <parameters type="string" name="fileName"/>
        <javadoc>Plays movies from a playlist in the AVI directory. The filename needs an extension.</javadoc>
    </method>
    <method return="void" name="trPlayNextMusicTrack">
        <javadoc>Plays the next song in the music play list.</javadoc>
    </method>
    <method return="void" name="trShowImageDialog">
        <parameters type="string" name="texture"/>
        <parameters type="string" name="subtitle"/>
        <javadoc>Displays a custom image in a dialog, with a subtitle.</javadoc>
    </method>
    <method return="void" name="trSoundPlayDialog">
        <parameters type="string" name="filename"/>
        <parameters type="string" name="unknown"/>
        <parameters type="int" name="eventID"/>
        <parameters type="bool" name="ignoreOnAbort"/>
        <parameters type="string" name="subtitle"/>
        <parameters type="string" name="portrait"/>
        <javadoc>Plays the sound associated with the filename.&#xD;
&lt;p&gt;&#xD;
{@code unknown} is "1" by default, but other values don't seem to affect anything.</javadoc>
    </method>
    <method return="void" name="trSoundPlayFN">
        <parameters type="string" name="filename"/>
        <parameters type="string" name="unknown"/>
        <parameters type="int" name="eventID"/>
        <parameters type="string" name="subtitle"/>
        <parameters type="string" name="portrait"/>
        <javadoc>Plays the sound associated with the filename.&#xD;
&lt;p&gt;&#xD;
{@code unknown} is "1" by default, but other values don't seem to affect anything.</javadoc>
    </method>
    <method return="void" name="trSoundPlayPaused">
        <parameters type="string" name="filename"/>
        <parameters type="string" name="unknown"/>
        <parameters type="int" name="eventID"/>
        <parameters type="string" name="subtitle"/>
        <parameters type="string" name="portrait"/>
        <javadoc>Plays the sound associated with the filename.&#xD;
&lt;p&gt;&#xD;
{@code unknown} is "1" by default, but other values don't seem to affect anything.</javadoc>
    </method>
    <method return="void" name="trSoundTimer">
        <parameters type="int" name="milliseconds"/>
        <parameters type="int" name="eventID"/>
        <javadoc>Creates a high performance sound timer and passes the eventID as data.</javadoc>
    </method>
    <method return="void" name="trUnBlockAllAmbientSounds">
        <javadoc>Unblocks all ambient sounds that were previously blocked from playing.</javadoc>
    </method>
    <method return="void" name="trUnblockAllSounds">
        <javadoc>Unblocks all sounds that were previously blocked from playing.</javadoc>
    </method>
    <method return="void" name="trBlockAllAmbientSounds">
        <javadoc>Blocks all ambient sounds from this point forward.</javadoc>
    </method>
    <method return="void" name="trBlockAllSounds">
        <parameters type="bool" name="excludeDialog"/>
        <javadoc>Blocks all sounds from playing from this point forward.</javadoc>
    </method>
    <method return="void" name="rmSetObjectDefMaxDistance">
        <parameters type="int" name="defID"/>
        <parameters type="float" name="dist"/>
        <javadoc>Set the maximum distance for the object definition (in meters).*/</javadoc>
    </method>
    <method return="void" name="rmSetObjectDefMinDistance">
        <parameters type="int" name="defID"/>
        <parameters type="float" name="dist"/>
        <javadoc>Set the minimum distance for the object definition (in meters).*/</javadoc>
    </method>
    <method return="bool" name="rmAddObjectDefConstraint">
        <parameters type="int" name="defID"/>
        <parameters type="int" name="constraintID"/>
        <javadoc>Add specified constraint to given object def.*/</javadoc>
    </method>
    <method return="void" name="rmAddObjectDefItem">
        <parameters type="int" name="defID"/>
        <parameters type="string" name="unitName"/>
        <parameters type="int" name="count"/>
        <parameters type="float" name="clusterDistance"/>
        <javadoc>Add item to object definition.*/</javadoc>
    </method>
    <method return="bool" name="rmAddObjectDefToClass">
        <parameters type="int" name="objectDefID"/>
        <parameters type="int" name="classID"/>
        <javadoc>Add given object def to specified class.*/</javadoc>
    </method>
    <method return="int" name="rmCreateObjectDef">
        <parameters type="string" name="name"/>
        <javadoc>Creates an object definition. Returns its ID.</javadoc>
    </method>
    <method return="int" name="rmGetNumberUnitsPlaced">
        <parameters type="int" name="objectDefID"/>
        <javadoc>Returns the number of units placed by this objectDefID.</javadoc>
    </method>
    <method return="int" name="rmGetUnitPlaced">
        <parameters type="int" name="objectDefID"/>
        <parameters type="int" name="index"/>
        <javadoc>Returns a unit ID that was placed by the objectDefID.</javadoc>
    </method>
    <method return="int" name="rmGetUnitPlacedOfPlayer">
        <parameters type="int" name="objectDefID"/>
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the unit ID of a given player that was placed by the objectDefID.</javadoc>
    </method>
    <method return="void" name="rmPlaceObjectDefAtAreaLoc">
        <parameters type="int" name="defID"/>
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="areaID"/>
        <javadoc>Place object definition for the player at the given area's location.</javadoc>
    </method>
    <method return="void" name="rmPlaceObjectDefAtLoc">
        <parameters type="int" name="defID"/>
        <parameters type="int" name="playerID"/>
        <parameters type="float" name="xFraction"/>
        <parameters type="float" name="zFraction"/>
        <javadoc>Place object definition at specific location for given player.</javadoc>
    </method>
    <method return="void" name="rmPlaceObjectDefAtRandomAreaOfClass">
        <parameters type="int" name="defID"/>
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="classID"/>
        <javadoc>Place object definition for the player at the location of a random area in the given class.</javadoc>
    </method>
    <method return="void" name="rmPlaceObjectDefInArea">
        <parameters type="int" name="defID"/>
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="areaID"/>
        <javadoc>Place object definition for the player in the given area.</javadoc>
    </method>
    <method return="void" name="rmPlaceObjectDefInRandomAreaOfClass">
        <parameters type="int" name="defID"/>
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="classID"/>
        <javadoc>Place object definition for the player in a random area in the given class.</javadoc>
    </method>
    <method return="void" name="rmPlaceObjectDefPerPlayer">
        <parameters type="int" name="defID"/>
        <parameters type="bool" name="playerOwned"/>
        <javadoc>Place object definition per player.</javadoc>
    </method>
    <method return="void" name="rmSetIgnoreForceToGaia">
        <parameters type="bool" name="val"/>
        <javadoc>If off, some objects placed will automatically convert to Mother Nature. (e.g. gold mines).</javadoc>
    </method>
    <method return="int" name="kbPathCreate">
        <parameters type="string" name="name"/>
        <javadoc>Creates a path with the given name.</javadoc>
    </method>
    <method return="bool" name="kbPathDestroy">
        <parameters type="int" name="pathID"/>
        <javadoc>Destroys the given path.</javadoc>
    </method>
    <method return="int" name="kbPathGetNumber">
        <javadoc>Returns the number of paths.</javadoc>
    </method>
    <method return="int" name="kbPathGetIDByIndex">
        <javadoc>Returns the index'th path ID.</javadoc>
    </method>
    <method return="string" name="kbPathGetName">
        <parameters type="int" name="pathID"/>
        <javadoc>Returns the name of the given path.</javadoc>
    </method>
    <method return="float" name="kbPathGetLength">
        <parameters type="int" name="pathID"/>
        <javadoc>Returns the length of the given path.</javadoc>
    </method>
    <method return="int" name="kbPathGetNumberWaypoints">
        <parameters type="int" name="pathID"/>
        <javadoc>Returns the number of waypoints in the given path.</javadoc>
    </method>
    <method return="bool" name="kbPathAddWaypoint">
        <parameters type="int" name="pathID"/>
        <parameters type="vector" name="waypoint"/>
        <javadoc>Adds the waypoint to the given path.</javadoc>
    </method>
    <method return="vector" name="kbPathGetWaypoint">
        <parameters type="int" name="pathID"/>
        <javadoc>Returns the appropriate waypoint from the given path.</javadoc>
    </method>
    <method return="bool" name="kbCanSimPath">
        <parameters type="vector" name="pointA"/>
        <parameters type="vector" name="pointB"/>
        <parameters type="float" name="range"/>
        <javadoc>Returns true if the given unit type can path from pointA to pointB.&#xD;
&lt;p&gt;&#xD;
Requires a proper {@link ExternalSubroutines#xsSetContextPlayer(int) context player}.&#xD;
&lt;p&gt;&#xD;
The parameter {@code range} doesn't seem to do anything any can be omitted.</javadoc>
    </method>
    <method return="bool" name="kbCanPath2">
        <parameters type="vector" name="pointA"/>
        <parameters type="vector" name="pointB"/>
        <parameters type="float" name="range"/>
        <javadoc>Returns true if the given unit type can path from pointA to pointB.&#xD;
&lt;p&gt;&#xD;
Requires a proper {@link ExternalSubroutines#xsSetContextPlayer(int) context player}.&#xD;
&lt;p&gt;&#xD;
Unlike {@link #kbCanSimPath(vector, vector, long, float) kbCanSimPath}, this function crashes the game if the {@code range} parameter is too low.</javadoc>
    </method>
    <method return="int" name="kbCreateAttackRoute">
        <parameters type="string" name="name"/>
        <parameters type="int" name="startAreaID"/>
        <parameters type="int" name="goalAreaID"/>
        <parameters type="int" name="numInitialRoutes"/>
        <javadoc>Returns the Route ID if successful.</javadoc>
    </method>
    <method return="int" name="kbCreateAttackRouteWithPath">
        <parameters type="string" name="name"/>
        <parameters type="vector" name="startPt"/>
        <parameters type="vector" name="endPt"/>
        <javadoc>Returns the Route ID if successful.</javadoc>
    </method>
    <method return="bool" name="kbDestroyAttackRoute">
        <parameters type="int" name="routeID"/>
        <javadoc>Returns true if the route was deleted.</javadoc>
    </method>
    <method return="bool" name="kbAddAttackRouteSector">
        <parameters type="int" name="sector"/>
        <javadoc>Add a new sector to path to.</javadoc>
    </method>
    <method return="bool" name="kbAddAttackRouteIgnoreID">
        <parameters type="int" name="ignoreAreaID"/>
        <javadoc>Ignore this area when finding the route.</javadoc>
    </method>
    <method return="bool" name="kbAddAttackRouteIgnoreType">
        <parameters type="int" name="ignoreAreaTypeID"/>
        <javadoc>Ignore this area type when finding the route.</javadoc>
    </method>
    <method return="bool" name="kbAttackRouteAddPath">
        <parameters type="int" name="attackRouteID"/>
        <parameters type="int" name="pathID"/>
        <javadoc>Returns true if path was added to attack route.</javadoc>
    </method>
    <method return="bool" name="kbMakeAttackRoutes">
        <javadoc>Find all the paths to the sector specified.</javadoc>
    </method>
    <method return="int" name="kbGetNumAttackRoutes">
        <javadoc>Returns the number of paths from start to goal area.</javadoc>
    </method>
    <method return="int" name="kbGetAttackRouteID">
        <javadoc>Returns the id of the routes from area1 to area2.</javadoc>
    </method>
    <method return="bool" name="aiPlanAddUnit">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="unitID"/>
        <javadoc>Adds a unit to the plan.</javadoc>
    </method>
    <method return="vector" name="aiPlanGetLocation">
        <parameters type="int" name="planID"/>
        <javadoc>Returns the location for this plan.</javadoc>
    </method>
    <method return="vector" name="aiPlanGetInitialPosition">
        <parameters type="int" name="planID"/>
        <javadoc>Returns the initial positon that was set for this plan.</javadoc>
    </method>
    <method return="void" name="aiPlanSetInitialPosition">
        <parameters type="int" name="planID"/>
        <parameters type="vector" name="initialPosition"/>
        <javadoc>Sets the initial positon for this plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetWaypoints">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="pathID"/>
        <javadoc>Sets the waypoints of the given plan to the waypoints of the given path.</javadoc>
    </method>
    <method return="bool" name="aiPlanAddWaypoint">
        <parameters type="int" name="planID"/>
        <parameters type="vector" name="waypoint"/>
        <javadoc>Adds the waypoint to the given plan.</javadoc>
    </method>
    <method return="int" name="aiPlanGetNumberVariableValues">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <javadoc>Returns the number of values for this variable index.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetNumberVariableValues">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="numberValues"/>
        <parameters type="bool" name="clearCurrentValues"/>
        <javadoc>Sets the number of values for this variable.</javadoc>
    </method>
    <method return="bool" name="aiPlanRemoveVariableValue">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="variableIndex"/>
        <javadoc>Removes the index-th value of the variable.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetVariableInt">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <parameters type="int" name="value"/>
        <javadoc>Sets the given variable of the given plan.</javadoc>
    </method>
    <method return="int" name="aiPlanGetVariableInt">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <javadoc>Gets the given variable of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetVariableFloat">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <parameters type="float" name="value"/>
        <javadoc>Sets the given variable of the given plan.</javadoc>
    </method>
    <method return="float" name="aiPlanGetVariableFloat">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <javadoc>Gets the given variable of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetVariableVector">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <parameters type="vector" name="value"/>
        <javadoc>Sets the given variable of the given plan.</javadoc>
    </method>
    <method return="vector" name="aiPlanGetVariableVector">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <javadoc>Gets the given variable of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetVariableBool">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <parameters type="bool" name="value"/>
        <javadoc>Sets the given variable of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanGetVariableBool">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <javadoc>Gets the given variable of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetVariableString">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <parameters type="string" name="value"/>
        <javadoc>Sets the given variable of the given plan.</javadoc>
    </method>
    <method return="string" name="aiPlanGetVariableString">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <javadoc>Gets the given variable of the given plan.</javadoc>
    </method>
    <method return="int" name="aiPlanGetNumberUserVariableValues">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <javadoc>Returns the number of values for this variable index.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetNumberUserVariableValues">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="numberValues"/>
        <parameters type="bool" name="clearCurrentValues"/>
        <javadoc>Sets the number of values for this variable.</javadoc>
    </method>
    <method return="bool" name="aiPlanRemoveUserVariables">
        <parameters type="int" name="planID"/>
        <javadoc>Removes all of the user variables from the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanRemoveUserVariable">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <javadoc>Removes the user variable.</javadoc>
    </method>
    <method return="bool" name="aiPlanRemoveUserVariableValue">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="variableIndex"/>
        <javadoc>Removes the index-th value of the user variable.</javadoc>
    </method>
    <method return="bool" name="aiPlanAddUserVariableInt">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="string" name="name"/>
        <parameters type="int" name="numberValues"/>
        <javadoc>Adds the variable to the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetUserVariableInt">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <parameters type="int" name="value"/>
        <javadoc>Sets the given variable of the given plan.</javadoc>
    </method>
    <method return="int" name="aiPlanGetUserVariableInt">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <javadoc>Gets the given variable of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanAddUserVariableFloat">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="string" name="name"/>
        <parameters type="int" name="numberValues"/>
        <javadoc>Adds the variable to the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetUserVariableFloat">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <parameters type="float" name="value"/>
        <javadoc>Sets the given variable of the given plan.</javadoc>
    </method>
    <method return="float" name="aiPlanGetUserVariableFloat">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <javadoc>Gets the given variable of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanAddUserVariableVector">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="string" name="name"/>
        <parameters type="int" name="numberValues"/>
        <javadoc>Adds the variable to the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetUserVariableVector">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <parameters type="vector" name="value"/>
        <javadoc>Sets the given variable of the given plan.</javadoc>
    </method>
    <method return="vector" name="aiPlanGetUserVariableVector">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <javadoc>Gets the given variable of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanAddUserVariableBool">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="string" name="name"/>
        <parameters type="int" name="numberValues"/>
        <javadoc>Adds the variable to the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetUserVariableBool">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <parameters type="bool" name="value"/>
        <javadoc>Sets the given variable of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanGetUserVariableBool">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <javadoc>Gets the given variable of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanAddUserVariableString">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="string" name="name"/>
        <parameters type="int" name="numberValues"/>
        <javadoc>Adds the variable to the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetUserVariableString">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <parameters type="string" name="value"/>
        <javadoc>Sets the given variable of the given plan.</javadoc>
    </method>
    <method return="string" name="aiPlanGetUserVariableString">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="planVariableIndex"/>
        <parameters type="int" name="valueIndex"/>
        <javadoc>Gets the given variable of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanGetActive">
        <parameters type="int" name="planID"/>
        <javadoc>Gets the active-ness of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetActive">
        <parameters type="int" name="planID"/>
        <parameters type="bool" name="active"/>
        <javadoc>Sets active on/off for the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanGetNoMoreUnits">
        <parameters type="int" name="planID"/>
        <javadoc>Gets the noMoreUnits-ness of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetNoMoreUnits">
        <parameters type="int" name="planID"/>
        <parameters type="bool" name="v"/>
        <javadoc>Sets noMoreUnits on/off for the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanGetOrphan">
        <parameters type="int" name="planID"/>
        <javadoc>Gets the orphan-ness of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetOrphan">
        <parameters type="int" name="planID"/>
        <parameters type="bool" name="orphan"/>
        <javadoc>Sets orphan on/off for the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanGetAllowUnderAttackResponse">
        <parameters type="int" name="planID"/>
        <javadoc>Gets the UA response-ness of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetAllowUnderAttackResponse">
        <parameters type="int" name="planID"/>
        <parameters type="bool" name="uAR"/>
        <javadoc>Sets under attack response on/off for the given plan.</javadoc>
    </method>
    <method return="int" name="aiPlanGetUnitStance">
        <parameters type="int" name="planID"/>
        <javadoc>Gets the unit stance of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetUnitStance">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="stance"/>
        <javadoc>Sets unit stance for the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetRequiresAllNeedUnits">
        <parameters type="int" name="planID"/>
        <parameters type="bool" name="rANU"/>
        <javadoc>Sets 'requiresAllNeedUnits' on/off for the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetEventHandler">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="eventType"/>
        <parameters type="string" name="handlerName"/>
        <javadoc>Sets event handler function for the given plan and event.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetEscrowID">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="escrowID"/>
        <javadoc>Sets the escrow for the plan.</javadoc>
    </method>
    <method return="int" name="aiPlanGetEscrowID">
        <parameters type="int" name="planID"/>
        <javadoc>Gets the escrow for the plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanGetEconomy">
        <parameters type="int" name="planID"/>
        <javadoc>Gets the economy flag of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetEconomy">
        <parameters type="int" name="planID"/>
        <parameters type="bool" name="v"/>
        <javadoc>Sets economy on/off for the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanGetMilitary">
        <parameters type="int" name="planID"/>
        <javadoc>Gets the military flag of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetMilitary">
        <parameters type="int" name="planID"/>
        <parameters type="bool" name="v"/>
        <javadoc>Sets military on/off for the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanGetAttack">
        <parameters type="int" name="planID"/>
        <javadoc>Gets the attack flag of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetAttack">
        <parameters type="int" name="planID"/>
        <parameters type="bool" name="v"/>
        <javadoc>Sets attack flag on/off for the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetBaseID">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Sets the plan's base id.</javadoc>
    </method>
    <method return="int" name="aiPlanGetBaseID">
        <parameters type="int" name="planID"/>
        <javadoc>Gets the plan's base id.</javadoc>
    </method>
    <method return="int" name="aiGetNumberIdlePlans">
        <parameters type="int" name="planType"/>
        <javadoc>Gets the of idle plans of the given type.</javadoc>
    </method>
    <method return="bool" name="aiPlanAddUnitType">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="unitTypeID"/>
        <parameters type="int" name="numberNeed"/>
        <parameters type="int" name="numberWant"/>
        <parameters type="int" name="numberMax"/>
        <javadoc>Adds a unit type to the plan.</javadoc>
    </method>
    <method return="int" name="aiPlanGetNumberUnits">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="unitTypeID"/>
        <javadoc>Returns the number of units currently assigned in the given plan.</javadoc>
    </method>
    <method return="int" name="aiPlanCreate">
        <parameters type="string" name="planName"/>
        <parameters type="int" name="typeName"/>
        <javadoc>Creates a plan of the given name and type.</javadoc>
    </method>
    <method return="bool" name="aiPlanDestroy">
        <parameters type="int" name="planID"/>
        <javadoc>Destroys the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanDestroyByName">
        <parameters type="string" name="name"/>
        <javadoc>Destroys the plan of the given name.</javadoc>
    </method>
    <method return="int" name="aiPlanGetID">
        <parameters type="string" name="name"/>
        <javadoc>Returns the ID of the plan with the given name.</javadoc>
    </method>
    <method return="int" name="aiPlanGetIDByTypeAndVariableType">
        <parameters type="int" name="planType"/>
        <parameters type="int" name="varType"/>
        <parameters type="int" name="varID"/>
        <parameters type="bool" name="active"/>
        <javadoc>Returns the ID of the plan with the given parms.</javadoc>
    </method>
    <method return="int" name="aiPlanGetIDByActiveIndex">
        <parameters type="int" name="activeIndex"/>
        <javadoc>Returns the ID of the plan with the given active index.</javadoc>
    </method>
    <method return="string" name="aiPlanGetName">
        <parameters type="int" name="planID"/>
        <javadoc>Returns the name of the given plan.</javadoc>
    </method>
    <method return="int" name="aiPlanGetType">
        <parameters type="int" name="planID"/>
        <javadoc>Returns the type of the given plan.</javadoc>
    </method>
    <method return="int" name="aiPlanGetState">
        <parameters type="int" name="planID"/>
        <javadoc>Returns the state of the given plan.</javadoc>
    </method>
    <method return="int" name="aiPlanGetActualPriority">
        <parameters type="int" name="planID"/>
        <javadoc>Returns the priority of the given plan.</javadoc>
    </method>
    <method return="int" name="aiPlanGetDesiredPriority">
        <parameters type="int" name="planID"/>
        <javadoc>Returns the priority of the given plan.</javadoc>
    </method>
    <method return="bool" name="aiPlanSetDesiredPriority">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="priority"/>
        <javadoc>Sets the priority of the given plan.</javadoc>
    </method>
    <method return="int" name="aiPlanGetNumber">
        <parameters type="int" name="planType"/>
        <parameters type="int" name="planState"/>
        <parameters type="bool" name="active"/>
        <javadoc>Returns the number of matching plans.</javadoc>
    </method>
    <method return="int" name="aiPlanGetIDByIndex">
        <parameters type="int" name="planType"/>
        <parameters type="int" name="planState"/>
        <parameters type="bool" name="active"/>
        <parameters type="int" name="index"/>
        <javadoc>Returns the ID of matching plan.</javadoc>
    </method>
    <method return="int" name="kbGetPop">
        <javadoc>Returns the current population for the player.</javadoc>
    </method>
    <method return="int" name="kbGetPopCap">
        <javadoc>Returns the current population cap for the player.</javadoc>
    </method>
    <method return="void" name="kbForceContextPlayerID">
        <javadoc>&#xD;
Important: use for debugging or manual scenario repair only!&#xD;
@see aom.scripting.xs.xs.ExternalSubroutines#xsSetContextPlayer(int) xsSetContextPlayer(int playedID)</javadoc>
    </method>
    <method return="int" name="kbGetCiv">
        <javadoc>Returns the civilization ID for the current player.</javadoc>
    </method>
    <method return="int" name="kbGetCivForPlayer">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the civilization ID for the given player.</javadoc>
    </method>
    <method return="int" name="kbGetAge">
        <javadoc>Returns the current age for the current player.</javadoc>
    </method>
    <method return="int" name="kbGetAgeForPlayer">
        <parameters type="int" name="id"/>
        <javadoc>Returns the current age for the player specified.</javadoc>
    </method>
    <method return="int" name="kbGetCulture">
        <javadoc>Returns the culture for the player.</javadoc>
    </method>
    <method return="int" name="kbGetCultureForPlayer">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the culture for the given player.</javadoc>
    </method>
    <method return="bool" name="kbIsPlayerResigned">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the player's resigned status.</javadoc>
    </method>
    <method return="bool" name="kbHasPlayerLost">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the player's lost status.</javadoc>
    </method>
    <method return="int" name="kbGetPlayerTeam">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the player's team number.</javadoc>
    </method>
    <method return="bool" name="kbIsPlayerEnemy">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns true if the given player is an enemy.</javadoc>
    </method>
    <method return="bool" name="kbIsPlayerNeutral">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns true if the given player is a neutral player.</javadoc>
    </method>
    <method return="bool" name="kbIsPlayerAlly">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns true if the given player is an ally.</javadoc>
    </method>
    <method return="bool" name="kbIsPlayerMutualAlly">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns true if the given player is a mutual ally.</javadoc>
    </method>
    <method return="int" name="kbGetNumberMutualAllies">
        <javadoc>Returns the number of mutual allies.</javadoc>
    </method>
    <method return="bool" name="kbIsPlayerValid">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns true if the given player is a valid player (i.e. it exists in the game).</javadoc>
    </method>
    <method return="bool" name="kbIsPlayerHuman">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns true if the given player is a a human player.</javadoc>
    </method>
    <method return="float" name="kbGetPlayerHandicap">
        <parameters type="int" name="playerID"/>
        <javadoc>&#xD;
Returns the player's handicap multiplier (i.e. 1.0 = no handicap).&#xD;
@since AoT</javadoc>
    </method>
    <method return="void" name="kbSetPlayerHandicap">
        <parameters type="int" name="playerID"/>
        <parameters type="float" name="handicap"/>
        <javadoc>&#xD;
Sets the indicated player's handicap multiplier (i.e. 1.0 = no handicap).&#xD;
@since AoT</javadoc>
    </method>
    <method return="void" name="rmAddPlayerResource">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="resourceName"/>
        <parameters type="float" name="amount"/>
        <javadoc>&#xD;
Adds to a player's resource amount.&#xD;
@param resourceName&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;"food"&lt;/li&gt;&#xD;
&lt;li&gt;"wood"&lt;/li&gt;&#xD;
&lt;li&gt;"gold"&lt;/li&gt;&#xD;
&lt;li&gt;"favor"&lt;/li&gt;&#xD;
&lt;/ul&gt;</javadoc>
    </method>
    <method return="int" name="rmGetNumberPlayersOnTeam">
        <parameters type="int" name="teamID"/>
        <javadoc>Gets the number of players on the given team</javadoc>
    </method>
    <method return="int" name="rmGetPlayerCiv">
        <parameters type="int" name="playerID"/>
        <javadoc>&#xD;
Gets the civilization of the specified player.&#xD;
&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivZeus&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivHades&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivPoseidon&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivIsis&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivRa&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivSet&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivLoki&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivThor&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivOdin&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivGaia&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivKronos&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivOuranos&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivGreek&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivNorse&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivEgyptian&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivAtlantean&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivRandom&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCivNature</javadoc>
    </method>
    <method return="int" name="rmGetPlayerCulture">
        <parameters type="int" name="playerID"/>
        <javadoc>&#xD;
Gets the culture of the specified player.&#xD;
&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCultureGreek&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCultureEgyptian&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCultureNorse&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCultureAtlantean&#xD;
@see aom.scripting.xs.ai.ArtificialIntelligence#cCultureNature</javadoc>
    </method>
    <method return="string" name="rmGetPlayerName">
        <parameters type="int" name="playerID"/>
        <javadoc>Gets a player's nickname.</javadoc>
    </method>
    <method return="int" name="rmGetPlayerTeam">
        <parameters type="int" name="playerID"/>
        <javadoc>Gets the team the specified player is on.</javadoc>
    </method>
    <method return="void" name="rmPlacePlayer">
        <parameters type="int" name="playerID"/>
        <parameters type="float" name="xFraction"/>
        <parameters type="float" name="zFraction"/>
        <javadoc>&#xD;
Sets one player location. You can use this to place players anywhere.&#xD;
Once a player is placed, it won't be repositioned by any future calls to the various rmPlacePlayers functions.</javadoc>
    </method>
    <method return="void" name="rmPlacePlayersCircular">
        <parameters type="float" name="minFraction"/>
        <parameters type="float" name="maxFraction"/>
        <parameters type="float" name="angleVariation"/>
        <javadoc>&#xD;
Makes a circle of player locations. Places players in a circle.&#xD;
Variation is determined by the difference between the min and max.&#xD;
Angle variation determines whether players are equidistant or can be slightly closer or farther apart.</javadoc>
    </method>
    <method return="void" name="rmPlacePlayersLine">
        <parameters type="float" name="x1"/>
        <parameters type="float" name="z1"/>
        <parameters type="float" name="x2"/>
        <parameters type="float" name="z2"/>
        <parameters type="float" name="distVariation"/>
        <parameters type="float" name="spacingVariation"/>
        <javadoc>&#xD;
Makes a line of player locations. Sometimes you will want players to be placed in a line.&#xD;
Anatolia places each team on a line, while Vinlandsaga places all players in a line.&#xD;
Using a line placement is not easy because there may not be enough room for player areas or resources.&#xD;
X and Z determine the starting and ending locations of the line.&#xD;
DistVariation determines how far from the line player areas can vary, and spacingVariation determines how much space there is among points along the line where players are placed.</javadoc>
    </method>
    <method return="void" name="rmPlacePlayersSquare">
        <parameters type="float" name="dist"/>
        <parameters type="float" name="distVariation"/>
        <parameters type="float" name="spacingVariationfloat"/>
        <javadoc>&#xD;
Makes a square of player locations. Places players in a square, which automatically adjusts to a rectangle for rectangular maps.&#xD;
Unlike the circle, variance here is determined by a plus or minus (the distVariation) off of the mean distance.&#xD;
SpacingVariation determines whether players are equidistant or can be slightly closer or farther apart.</javadoc>
    </method>
    <method return="void" name="rmPlayerLocXFraction">
        <parameters type="int" name="playerID"/>
        <javadoc>Gets a player's start location x fraction.</javadoc>
    </method>
    <method return="void" name="rmPlayerLocZFraction">
        <parameters type="int" name="playerID"/>
        <javadoc>Gets a player's start location z fraction.</javadoc>
    </method>
    <method return="void" name="rmSetPlacementSection">
        <parameters type="float" name="fromPercent"/>
        <parameters type="float" name="toPercent"/>
        <javadoc>&#xD;
When placing players in a circle or square, this command allows you to skip part of the circle or square,&#xD;
in essence removing a slice from the pie (maybe you want to fit an ocean in there like in Sea of Worms).&#xD;
The default for fromPercent is 0, and the default for toPercent is 1. That means use the whole circle or square.&#xD;
You can pass in something like 0.25 and 0.50 to have the players placed from 25% in to 50% in along the circle or square.&#xD;
For circular placement, 0 is at 9h00, 0.25 is at 12h00, 0.5 is at 3h00, and 0.75 is at 6h00.&#xD;
For square placement (think of the square as a line that follows a square), 0 is at 6h00, 0.25 is at 9h00, 0.5 is at 12h00, and 0.75 is at 3h00.</javadoc>
    </method>
    <method return="void" name="rmSetPlacementTeam">
        <parameters type="int" name="teamID"/>
        <javadoc>&#xD;
Sets the team to place. Use this before calling the various rmPlacePlayers functions,&#xD;
and only players on the specified team will get placed. Remember: the first teamID is 0, the second is 1, etc.&#xD;
Pass in -1 for the teamID to place all teams (or actually all players that haven't been placed yet).</javadoc>
    </method>
    <method return="void" name="rmSetPlayerArea">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="areaID"/>
        <javadoc>Sets a player's 'official' area.*/</javadoc>
    </method>
    <method return="void" name="rmSetPlayerLocation ">
        <parameters type="int" name="playerID"/>
        <parameters type="float" name="xFraction"/>
        <parameters type="float" name="zFraction"/>
        <javadoc>Manually sets a player's starting location.*/</javadoc>
    </method>
    <method return="void" name="rmSetPlayerPlacementArea">
        <parameters type="float" name="minX"/>
        <parameters type="float" name="minZ"/>
        <parameters type="float" name="maxX"/>
        <parameters type="float" name="maxZ"/>
        <javadoc>&#xD;
Sets the area of the map to use for player placement.&#xD;
Use this command if, for example, you want to place players in one quadrant of a map.</javadoc>
    </method>
    <method return="void" name="rmSetPlayerResource">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="resourceName"/>
        <parameters type="float" name="amount"/>
        <javadoc>&#xD;
Sets a player's resource amount.&#xD;
@param resourceName&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;"food"&lt;/li&gt;&#xD;
&lt;li&gt;"wood"&lt;/li&gt;&#xD;
&lt;li&gt;"gold"&lt;/li&gt;&#xD;
&lt;li&gt;"favor"&lt;/li&gt;&#xD;
&lt;/ul&gt;</javadoc>
    </method>
    <method return="void" name="rmSetTeamArea">
        <parameters type="int" name="teamID"/>
        <parameters type="int" name="areaID"/>
        <javadoc>Sets a team's 'official' area.*/</javadoc>
    </method>
    <method return="void" name="rmSetTeamSpacingModifier">
        <parameters type="float" name="modifier"/>
        <javadoc>&#xD;
Sets the team spacing modifier. Normally, all players are placed equidistant.&#xD;
This command allows you to force team members closer together.&#xD;
Values of 0.3-0.5 return the best results.&#xD;
Values less than 0.25 may not provide enough space for starting resources.</javadoc>
    </method>
    <method return="void" name="rmMultiplyPlayerResource">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="resourceName"/>
        <parameters type="float" name="factor"/>
        <javadoc>&#xD;
Multiplies a player's resource amount by the given factor.&#xD;
@param resourceName&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;"food"&lt;/li&gt;&#xD;
&lt;li&gt;"wood"&lt;/li&gt;&#xD;
&lt;li&gt;"gold"&lt;/li&gt;&#xD;
&lt;li&gt;"favor"&lt;/li&gt;&#xD;
&lt;/ul&gt;</javadoc>
    </method>
    <method return="bool" name="trPlayerActive">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns true if the player is active.</javadoc>
    </method>
    <method return="bool" name="trPlayerAtPopCap">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns true if player is at pop cap.</javadoc>
    </method>
    <method return="int" name="trPlayerBuildingCount">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the number of buildings for the player.</javadoc>
    </method>
    <method return="bool" name="trPlayerCountBuildingInProgress">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="protoName"/>
        <javadoc>Returns true if building is being built.</javadoc>
    </method>
    <method return="bool" name="trPlayerDefeated">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns true if the player has been defeated.</javadoc>
    </method>
    <method return="string" name="trPlayerGetDiplomacy">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="player2ID"/>
        <javadoc>Gets the diplomacy status between players.</javadoc>
    </method>
    <method return="int" name="trPlayerGetPopulation">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the player population.</javadoc>
    </method>
    <method return="void" name="trPlayerGrantResources">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="resource"/>
        <parameters type="int" name="amount"/>
        <javadoc>Grants the given amount a resource to the given player.</javadoc>
    </method>
    <method return="void" name="trPlayerKillAllBuildings">
        <parameters type="int" name="playerID"/>
        <javadoc>Kills all of the buildings of a given player.</javadoc>
    </method>
    <method return="void" name="trPlayerKillAllGodPowers">
        <parameters type="int" name="playerID"/>
        <javadoc>Kills all of the current God Powers of a player.</javadoc>
    </method>
    <method return="void" name="trPlayerKillAllUnits">
        <parameters type="int" name="playerID"/>
        <javadoc>Kills all of the units of a given player.</javadoc>
    </method>
    <method return="void" name="trPlayerModifyLOS">
        <parameters type="int" name="playerID"/>
        <parameters type="bool" name="canSee"/>
        <parameters type="int" name="player2ID"/>
        <javadoc>Adds/removes LOS between players.</javadoc>
    </method>
    <method return="void" name="trPlayerResetBlackMap">
        <parameters type="int" name="playerID"/>
        <javadoc>Resets the black map for a given &lt;u&gt;human&lt;/u&gt; player.</javadoc>
    </method>
    <method return="void" name="trPlayerResetBlackMapForAllPlayers">
        <javadoc>Resets the black map for all &lt;u&gt;human&lt;/u&gt; players</javadoc>
    </method>
    <method return="int" name="trPlayerResourceCount">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="resource"/>
        <javadoc>Returns the number of resources for the player.</javadoc>
    </method>
    <method return="void" name="trPlayerSetActive">
        <parameters type="int" name="playerID"/>
        <javadoc>&#xD;
Sets the active player.&#xD;
&#xD;
@see aom.scripting.xs.xs.ExternalSubroutines#xsGetContextPlayer() xsGetContextPlayer()&#xD;
@see aom.scripting.xs.xs.ExternalSubroutines#xsSetContextPlayer(int) xsSetContextPlayer(int)&#xD;
@see #trCurrentPlayer()</javadoc>
    </method>
    <method return="int" name="trCurrentPlayer">
        <javadoc>Returns the current player</javadoc>
    </method>
    <method return="void" name="trPlayerSetDiplomacy">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="player2ID"/>
        <parameters type="string" name="status"/>
        <javadoc>Sets the diplomacy status between players</javadoc>
    </method>
    <method return="void" name="trPlayerTechTreeEnabledGodPowers">
        <parameters type="int" name="playerID"/>
        <parameters type="bool" name="on"/>
        <javadoc>Enables/disables the technology tree from granting God Powers to a player.</javadoc>
    </method>
    <method return="void" name="trPlayerTribute">
        <parameters type="int" name="fromID"/>
        <parameters type="string" name="resource"/>
        <parameters type="int" name="amount"/>
        <parameters type="int" name="toID"/>
        <javadoc>Tributes resources to a player.</javadoc>
    </method>
    <method return="int" name="trPlayerUnitAndBuildingCount">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the number of units and buildings for the player.</javadoc>
    </method>
    <method return="int" name="trPlayerUnitCount">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the number of units for the player.</javadoc>
    </method>
    <method return="int" name="trPlayerUnitCountSpecific">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="protoName"/>
        <javadoc>Returns the number of proto units for the player.</javadoc>
    </method>
    <method return="void" name="trSetPlayerDefeated">
        <parameters type="int" name="playerID"/>
        <javadoc>&#xD;
When called, the player is set to defeated on the local machine.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="trSetPlayerWon">
        <parameters type="int" name="playerID"/>
        <javadoc>&#xD;
When called, the player is set to be victorious on the local machine.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="trSetCurrentPlayerStatus">
        <parameters type="bool" name="active"/>
        <javadoc>Sets the current player as active or inactive</javadoc>
    </method>
    <method return="void" name="trYouLose">
        <parameters type="string" name="text"/>
        <javadoc>Player loses, specifies message.</javadoc>
    </method>
    <method return="void" name="trYouWin">
        <parameters type="string" name="nextscenario"/>
        <parameters type="string" name="text"/>
        <javadoc>Player wins, specifies next scenario to go to and message.</javadoc>
    </method>
    <method return="int" name="kbProgressionGetTotalNodes">
        <parameters type="int" name="progressionID"/>
        <javadoc>Returns the total number of steps to complete the progression.</javadoc>
    </method>
    <method return="float" name="kbProgessionGetTotalResourceCost">
        <parameters type="int" name="progressionID"/>
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the total cost of the given resource for this progressionID.</javadoc>
    </method>
    <method return="float" name="kbProgessionGetTotalWorkCost">
        <parameters type="int" name="progressionID"/>
        <javadoc>Returns the total work cost this progressionID.</javadoc>
    </method>
    <method return="int" name="kbProgressionGetNodeType">
        <parameters type="int" name="progressionID"/>
        <parameters type="int" name="nodeIndex"/>
        <javadoc>Returns the type of node at the given index, either Unit type or technology type.</javadoc>
    </method>
    <method return="int" name="kbProgressionGetNodeData">
        <parameters type="int" name="progressionID"/>
        <parameters type="int" name="nodeIndex"/>
        <javadoc>Returns the data at nodeIndex, either UnitID or TechID, depending on the type.</javadoc>
    </method>
    <method return="bool" name="kbProgressionIsNodeMinorGod">
        <parameters type="int" name="progressionID"/>
        <parameters type="int" name="nodeIndex"/>
        <javadoc>Returns true if the given node's data is a minor god.</javadoc>
    </method>
    <method return="int" name="kbGetPopulationSlotsByQueryID">
        <parameters type="int" name="queryID"/>
        <javadoc>Returns the number of pop slots currently occupied by the results in the given query.</javadoc>
    </method>
    <method return="int" name="kbUnitQueryCreate">
        <parameters type="string" name="name"/>
        <javadoc>Creates a unit query, returns the query ID.</javadoc>
    </method>
    <method return="bool" name="kbUnitQueryResetData">
        <javadoc>Resets the given unit query data AND results.</javadoc>
    </method>
    <method return="bool" name="kbUnitQueryResetResults">
        <javadoc>Resets the given unit query results.</javadoc>
    </method>
    <method return="bool" name="kbUnitQueryDestroy">
        <javadoc>Destroys the given unit query.</javadoc>
    </method>
    <method return="int" name="kbUnitQueryNumberResults">
        <javadoc>Returns the number of results in the current query.</javadoc>
    </method>
    <method return="int" name="kbUnitQueryGetResult">
        <parameters type="int" name="index"/>
        <javadoc>Returns the UnitID of the index'th result in the current query.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetPlayerID">
        <parameters type="int" name="playerID"/>
        <parameters type="bool" name="resetQueryData"/>
        <javadoc>Sets query data.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetPlayerRelation">
        <parameters type="int" name="playerRelation"/>
        <javadoc>Sets query data.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetUnitType">
        <parameters type="int" name="unitTypeID"/>
        <javadoc>Sets query data.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetActionType">
        <parameters type="int" name="actionTypeID"/>
        <javadoc>Sets query data.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetState">
        <parameters type="int" name="state"/>
        <javadoc>Sets query data.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetPosition">
        <parameters type="vector" name="v"/>
        <javadoc>Sets query data.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetMaximumDistance">
        <parameters type="float" name="distance"/>
        <javadoc>Sets query data.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetAscendingSort">
        <parameters type="bool" name="ascending"/>
        <javadoc>If ascending is true, results are sorted in ascending distance order from the query position.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetBaseID">
        <parameters type="int" name="baseID"/>
        <javadoc>Sets query data.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetAreaID">
        <parameters type="int" name="areaID"/>
        <javadoc>Sets query data.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetAreaGroupID">
        <parameters type="int" name="areaGroupID"/>
        <javadoc>Sets query data.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetArmyID">
        <parameters type="int" name="armyID"/>
        <javadoc>Sets query data.</javadoc>
    </method>
    <method return="bool" name="kbUnitQuerySetSeeableOnly">
        <parameters type="bool" name="seeableOnly"/>
        <javadoc>Sets query data.</javadoc>
    </method>
    <method return="int" name="kbUnitQueryExecute">
        <javadoc>Executes the current query; returns number of results.</javadoc>
    </method>
    <method return="int" name="kbUnitQueryExecuteOnQuery">
        <parameters type="int" name="previousQueryID"/>
        <javadoc>Executes the current query on the previous query's results; returns the new number of results.</javadoc>
    </method>
    <method return="int" name="kbUnitQueryExecuteOnQueryByName">
        <parameters type="string" name="previousQueryName"/>
        <javadoc>Executes the current query on the previous query's results; returns the new number of results.</javadoc>
    </method>
    <method return="void" name="trQuestVarCopy">
        <parameters type="string" name="QV1"/>
        <parameters type="string" name="QV2"/>
        <javadoc>&#xD;
Copies value of one of the trigger scratch variables.&#xD;
@since AoT</javadoc>
    </method>
    <method return="void" name="trQuestVarEcho">
        <parameters type="string" name="QVname"/>
        <javadoc>&#xD;
Chats out the value of one of the trigger scratch variables.&#xD;
@since AoT</javadoc>
    </method>
    <method return="void" name="sqrt">
        <parameters type="float" name="x"/>
        <javadoc>Returns the square root of x.</javadoc>
    </method>
    <method return="int" name="rmClassID">
        <parameters type="string" name="name"/>
        <javadoc>Gets class ID for given class name.</javadoc>
    </method>
    <method return="int" name="rmDefineClass">
        <parameters type="string" name="className"/>
        <javadoc>Define a class with the given name. Classes can group areas or objects together.</javadoc>
    </method>
    <method return="void" name="rmDefineConstant">
        <parameters type="string" name="name"/>
        <parameters type="int" name="value"/>
        <javadoc>Define a constant with given name and value.</javadoc>
    </method>
    <method return="void" name="rmEchoError">
        <parameters type="string" name="echoString"/>
        <parameters type="int" name="level"/>
        <javadoc>Echoes an error string to the debugger output, can not be seen in AoT.</javadoc>
    </method>
    <method return="void" name="rmEchoInfo">
        <parameters type="string" name="echoString"/>
        <parameters type="int" name="level"/>
        <javadoc>Echoes an info string to the debugger output, can not be seen in AoT.</javadoc>
    </method>
    <method return="void" name="rmEchoWarning">
        <parameters type="string" name="echoString"/>
        <parameters type="int" name="level"/>
        <javadoc>Echoes a warning string to the debugger output, can not be seen in AoT.</javadoc>
    </method>
    <method return="float" name="rmGetSeaLevel">
        <javadoc>Gets the sea level for the map.</javadoc>
    </method>
    <method return="void" name="rmRandFloat">
        <parameters type="float" name="min"/>
        <parameters type="float" name="max"/>
        <javadoc>Returns a random float between min and max.</javadoc>
    </method>
    <method return="void" name="rmRandInt">
        <parameters type="int" name="min"/>
        <parameters type="int" name="max"/>
        <javadoc>Returns a random integer between min and max.</javadoc>
    </method>
    <method return="void" name="rmSetMapSize">
        <parameters type="int" name="x"/>
        <parameters type="int" name="z"/>
        <javadoc>Sets the size of the map.*/</javadoc>
    </method>
    <method return="void" name="rmSetSeaLevel">
        <javadoc>Sets the sea level for the map.*/</javadoc>
    </method>
    <method return="void" name="rmSetSeaType">
        <parameters type="string" name="name"/>
        <javadoc>Sets the sea type for the map.  This is used if terrain is initialized to water.*/</javadoc>
    </method>
    <method return="void" name="rmTerrainInitialize">
        <parameters type="string" name="baseTerrain"/>
        <parameters type="float" name="height"/>
        <javadoc>Initializes the terrain to the base type and height.</javadoc>
    </method>
    <method return="bool" name="kbSetupForResource">
        <parameters type="int" name="baseID"/>
        <parameters type="int" name="resourceID"/>
        <parameters type="float" name="distance"/>
        <parameters type="float" name="amount"/>
        <javadoc>Returns true if amount of resource is within distance of a drop site.</javadoc>
    </method>
    <method return="float" name="kbResourceGet">
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the current amount of the given resource.</javadoc>
    </method>
    <method return="float" name="kbMaximumResourceGet">
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the maximum amount of the given resource you can have.</javadoc>
    </method>
    <method return="float" name="kbTotalResourceGet">
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the total amount of the given resource gathered to this point in the game.</javadoc>
    </method>
    <method return="int" name="kbGetNumberValidResourcesByPlan">
        <parameters type="int" name="planID"/>
        <parameters type="int" name="baseID"/>
        <javadoc>Returns the number of valid KB resources for the given plan/base.</javadoc>
    </method>
    <method return="int" name="kbGetNumberValidResources">
        <parameters type="int" name="baseID"/>
        <parameters type="int" name="resourceTypeID"/>
        <parameters type="int" name="resourceSubTypeID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Returns the number of valid KB resources for the resource types.</javadoc>
    </method>
    <method return="float" name="kbGetAmountValidResources">
        <parameters type="int" name="baseID"/>
        <parameters type="int" name="resourceTypeID"/>
        <parameters type="int" name="resourceSubTypeID"/>
        <parameters type="float" name="distance"/>
        <javadoc>Returns the resource amount of valid KB resources for the resource types.</javadoc>
    </method>
    <method return="float" name="kbGetResourceIncome">
        <parameters type="int" name="resourceID"/>
        <parameters type="float" name="seconds"/>
        <parameters type="bool" name="relative"/>
        <javadoc>Returns the resource income over the last X seconds.</javadoc>
    </method>
    <method return="float" name="kbGetAICostWeight">
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the AI cost weight for the given resource.</javadoc>
    </method>
    <method return="bool" name="kbSetAICostWeight">
        <parameters type="int" name="resourceID"/>
        <parameters type="float" name="weight"/>
        <javadoc>Sets the weight this resource type is given during AI cost calculations.</javadoc>
    </method>
    <method return="void" name="xsDisableRule">
        <parameters type="string" name="ruleName"/>
        <javadoc>Disables the given rule.</javadoc>
    </method>
    <method return="void" name="xsDisableSelf">
        <javadoc>Disables the current rule.</javadoc>
    </method>
    <method return="void" name="xsEnableRule">
        <parameters type="string" name="ruleName"/>
        <javadoc>Enables the given rule.</javadoc>
    </method>
    <method return="void" name="xsSetRulePriority">
        <parameters type="string" name="ruleName"/>
        <parameters type="int" name="priority"/>
        <javadoc>Sets the priority of the given rule.</javadoc>
    </method>
    <method return="void" name="xsSetRulePrioritySelf">
        <parameters type="int" name="priority"/>
        <javadoc>Sets the priority of the current rule.</javadoc>
    </method>
    <method return="void" name="xsSetRuleMinInterval">
        <parameters type="string" name="ruleName"/>
        <parameters type="int" name="interval"/>
        <javadoc>Sets the min interval of the given rule.</javadoc>
    </method>
    <method return="void" name="xsSetRuleMinIntervalSelf">
        <parameters type="int" name="interval"/>
        <javadoc>Sets the min interval of the current rule.</javadoc>
    </method>
    <method return="void" name="xsSetRuleMaxInterval">
        <parameters type="string" name="ruleName"/>
        <parameters type="int" name="interval"/>
        <javadoc>Sets the max interval of the given rule.</javadoc>
    </method>
    <method return="void" name="xsSetRuleMaxIntervalSelf">
        <parameters type="int" name="interval"/>
        <javadoc>Sets the max interval of the current rule.</javadoc>
    </method>
    <method return="void" name="xsEnableRuleGroup">
        <parameters type="string" name="ruleGroupName"/>
        <javadoc>Enables all rule in the given rule group.</javadoc>
    </method>
    <method return="void" name="xsDisableRuleGroup">
        <parameters type="string" name="ruleGroupName"/>
        <javadoc>Disables all rules in the given rule group.</javadoc>
    </method>
    <method return="int" name="trGetNumberSelectedUnitIDs">
        <javadoc>Returns the number of currently selected units.</javadoc>
    </method>
    <method return="int" name="trGetSelectedUnitID">
        <parameters type="int" name="index"/>
        <javadoc>Returns the unit ID of the currently selected unit.</javadoc>
    </method>
    <method return="void" name="trUnitSelect">
        <parameters type="string" name="unitScenarioName"/>
        <parameters type="bool" name="backwardsSearch"/>
        <javadoc>Adds the given unit to the trigger selection system. Previous selected units stay selected. Can't hold more than 30 units.</javadoc>
    </method>
    <method return="void" name="trUnitSelectByID">
        <parameters type="int" name="unitID"/>
        <javadoc>Adds the given unit to the trigger selection system. Previous selected units stay selected. Can't hold more than 30 units.</javadoc>
    </method>
    <method return="void" name="trUnitSelectClear">
        <javadoc>Clears the units in the trigger selection system.</javadoc>
    </method>
    <method return="int" name="kbTargetSelectorCreate">
        <parameters type="string" name="name"/>
        <javadoc>Creates a target selector and returns the ID.</javadoc>
    </method>
    <method return="bool" name="kbTargetSelectorDestroy">
        <parameters type="int" name="id"/>
        <javadoc>Destroys the given target selector.</javadoc>
    </method>
    <method return="bool" name="kbTargetSelectorResetResults">
        <javadoc>Resets the current target selector.</javadoc>
    </method>
    <method return="bool" name="kbTargetSelectorSelect">
        <parameters type="int" name="id"/>
        <javadoc>Selects the given target selector.</javadoc>
    </method>
    <method return="bool" name="kbTargetSelectorAddUnitType">
        <parameters type="int" name="baseUnitTypeID"/>
        <javadoc>Add the UAIT for the given base unit type as a filter.</javadoc>
    </method>
    <method return="bool" name="kbTargetSelectorAddQueryResults">
        <parameters type="int" name="queryID"/>
        <javadoc>Sets the list of potential targets to the results in the given query.</javadoc>
    </method>
    <method return="int" name="kbTargetSelectorGetNumberResults">
        <javadoc>Returns the number of results in the given target selector.</javadoc>
    </method>
    <method return="int" name="kbTargetSelectorGetResultValue">
        <parameters type="int" name="index"/>
        <javadoc>Returns the result value for given index of the current target selector.</javadoc>
    </method>
    <method return="bool" name="kbTargetSelectorStart">
        <javadoc>Starts the current target selector.</javadoc>
    </method>
    <method return="bool" name="aiTaskUnitMove">
        <parameters type="int" name="unitID"/>
        <parameters type="vector" name="position"/>
        <javadoc>Does a lightweight (no plan) move tasking of the given unit to the given location.</javadoc>
    </method>
    <method return="bool" name="aiTaskUnitWork">
        <parameters type="int" name="unitID"/>
        <parameters type="int" name="targetUnitID"/>
        <javadoc>Does a lightweight (no plan) work tasking of the given unit on the given target unit.</javadoc>
    </method>
    <method return="bool" name="aiTaskUnitBuild">
        <parameters type="int" name="unitID"/>
        <parameters type="int" name="buildingTypeID"/>
        <parameters type="vector" name="position"/>
        <javadoc>Does a lightweight (no plan) build tasking of the given unit to build the given building.</javadoc>
    </method>
    <method return="bool" name="aiTaskUnitTrain">
        <parameters type="int" name="unitID"/>
        <parameters type="int" name="unitTypeID"/>
        <javadoc>Does a lightweight (no plan) train tasking of the given unit for the given target unit type.</javadoc>
    </method>
    <method return="bool" name="aiTaskUnitResearch">
        <parameters type="int" name="unitID"/>
        <parameters type="int" name="techID"/>
        <javadoc>Does a lightweight (no plan) research tasking of the given unit for the given tech ID.</javadoc>
    </method>
    <method return="bool" name="aiTaskUnitSpecialPower">
        <parameters type="int" name="unitID"/>
        <parameters type="int" name="powerID"/>
        <parameters type="vector" name="position"/>
        <javadoc>Does a lightweight (no plan) research tasking of the given unit for the given special power.</javadoc>
    </method>
    <method return="bool" name="aiTaskUnitDelete">
        <parameters type="int" name="unitID"/>
        <javadoc>Deletes the given unit.</javadoc>
    </method>
    <method return="bool" name="aiTaskUnitTransform">
        <parameters type="int" name="unitID"/>
        <javadoc>&#xD;
Takes the given unit, and transforms it according to the unit transform table in world.&#xD;
@since AoT</javadoc>
    </method>
    <method return="string" name="kbGetCulture">
        <parameters type="int" name="cultureID"/>
        <javadoc>&#xD;
Returns the culture name for the given culture.&#xD;
@note Is this supposed to be called kbGetCultureName(int cultureID)? AFAIK XS does not support overloading.&#xD;
&#xD;
@see aom.scripting.xs.kb.Player#kbGetCulture() kbGetCulture()</javadoc>
    </method>
    <method return="string" name="kbGetCivName">
        <parameters type="int" name="civID"/>
        <javadoc>Returns the civilization name for the given civilization.</javadoc>
    </method>
    <method return="float" name="kbGetTechAICost">
        <parameters type="int" name="techID"/>
        <javadoc>Returns the AI cost for the given technology ID.</javadoc>
    </method>
    <method return="int" name="kbGetTechStatus">
        <parameters type="int" name="techID"/>
        <javadoc>Returns the current technology status for the current player of the requested tech.</javadoc>
    </method>
    <method return="float" name="kbGetTechPercentComplete">
        <parameters type="int" name="techID"/>
        <javadoc>Returns the percent complete for the the requested tech of the current player.</javadoc>
    </method>
    <method return="float" name="kbTechCostPerResource">
        <parameters type="int" name="techID"/>
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the cost of the technology for the given resource.</javadoc>
    </method>
    <method return="bool" name="kbCanAffordTech">
        <parameters type="int" name="techID"/>
        <parameters type="int" name="escrowID"/>
        <javadoc>Returns true if the player can afford the technology.</javadoc>
    </method>
    <method return="string" name="kbGetTechName">
        <parameters type="int" name="techID"/>
        <javadoc>Returns the name of the technology ID.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetUnitUpgradeTechTotal">
        <parameters type="int" name="unitTypeID"/>
        <javadoc>Returns the total number of upgrade technologies of the unit type.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetUnitUpgradeTech">
        <parameters type="int" name="unitTypeID"/>
        <parameters type="int" name="index"/>
        <javadoc>Returns the index'th upgrade technologies of the unit type.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetCheapestUnitUpgrade">
        <parameters type="int" name="protoUnitID"/>
        <parameters type="int" name="upgradeQueryType"/>
        <parameters type="int" name="resourceFilterID"/>
        <parameters type="int" name="buildingFilterID"/>
        <parameters type="bool" name="echoResults"/>
        <parameters type="int" name="affectedUnitType"/>
        <javadoc>Returns the ID of the cheapest unit upgrade technology.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetRandomUnitUpgrade">
        <javadoc>Returns the ID of a randomly chosen unit upgrade technology.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetNumberMatrixUnitTypeIDs">
        <javadoc>Returns the number of matrix unit type IDs.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetMatrixUnitTypeIDByIndex">
        <parameters type="int" name="index"/>
        <javadoc>Returns the matrix unit typeID at the given index.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetTotalUnitIDsByMatrix">
        <parameters type="int" name="counterUnitTypeID"/>
        <javadoc>Returns the total number of unitIDs matching the main type that has the given counter type.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetUnitIDByMatrixIndex">
        <parameters type="int" name="counterUnitTypeID"/>
        <parameters type="int" name="index"/>
        <javadoc>Returns the index'th unitID matching the main type that has the given counter type.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetTotalUnitIDsByFunction">
        <parameters type="int" name="functionID"/>
        <javadoc>Returns the total number of unitIDs that performs the given function.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetUnitIDTypeByFunctionIndex">
        <parameters type="int" name="functionID"/>
        <parameters type="int" name="index"/>
        <javadoc>Returns the index'th unitID of the unit that performs the given function.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetNumberDropsiteUnitIDsByResource">
        <parameters type="int" name="resourceID"/>
        <javadoc>Returns the number of unit typeIDs for dropsites that take the given resource.</javadoc>
    </method>
    <method return="bool" name="kbTechTreeClearDropsiteUnitIDsByResource">
        <parameters type="int" name="resourceID"/>
        <javadoc>Clears the list of dropsites for the given resource type.</javadoc>
    </method>
    <method return="bool" name="kbTechTreeAddDropsiteUnitIDByResource">
        <parameters type="int" name="resourceID"/>
        <javadoc>Adds the base unit type ID as a dropsite for the given resource.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetDropsiteUnitIDByResource">
        <parameters type="int" name="resourceID"/>
        <parameters type="int" name="index"/>
        <javadoc>Returns the index'th unitID of the dropsite that takes the given resource.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetUnitIDByTrain">
        <parameters type="int" name="unitTypeID"/>
        <parameters type="int" name="civID"/>
        <javadoc>Returns the unitTypeID of the unit that can train the given unitTypeID.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetNumberTrainProtos">
        <parameters type="int" name="unitTypeID"/>
        <javadoc>Returns the number of protos that can train the given unitTypeID.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetUnitIDByTrainIndex">
        <parameters type="int" name="unitTypeID"/>
        <parameters type="int" name="trainProtoIndex"/>
        <javadoc>Returns index'th unitTypeID of the unit that can train the given unitTypeID.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetNumberObtainProtos">
        <parameters type="int" name="techID"/>
        <javadoc>Returns the number of protos that the given techID can be obtained from.</javadoc>
    </method>
    <method return="int" name="kbTechTreeGetUnitIDByObtainIndex">
        <parameters type="int" name="techID"/>
        <parameters type="int" name="obtainProtoIndex"/>
        <javadoc>Returns index'th unitTypeID of the unit that the given techID, can be obtained from.</javadoc>
    </method>
    <method return="void" name="rmAddUnitsToArmy">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="armyID"/>
        <parameters type="int" name="objectDefID"/>
        <javadoc>Add the given units to the armyID.</javadoc>
    </method>
    <method return="void" name="rmCreateArmy">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="armyName"/>
        <javadoc>Create an army for the given player ID.</javadoc>
    </method>
    <method return="void" name="rmSetTriggerActive">
        <parameters type="bool" name="active"/>
        <javadoc>Sets the current trigger active.</javadoc>
    </method>
    <method return="void" name="rmSetTriggerConditionParam">
        <parameters type="string" name="paramName"/>
        <parameters type="string" name="value"/>
        <parameters type="bool" name="add"/>
        <javadoc>Adds a parameter to the current condition.</javadoc>
    </method>
    <method return="void" name="rmSetTriggerConditionParamArmy">
        <parameters type="string" name="paramName"/>
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="armyID"/>
        <parameters type="bool" name="add"/>
        <javadoc>Adds an army parameter to the current condition.</javadoc>
    </method>
    <method return="void" name="rmSetTriggerConditionParamFloat">
        <parameters type="string" name="paramName"/>
        <parameters type="float" name="value"/>
        <parameters type="bool" name="add"/>
        <javadoc>Adds a float parameter to the current condition.</javadoc>
    </method>
    <method return="void" name="rmSetTriggerConditionParamInt">
        <parameters type="string" name="paramName"/>
        <parameters type="int" name="value"/>
        <parameters type="bool" name="add"/>
        <javadoc>Adds an integer parameter to the current condition.</javadoc>
    </method>
    <method return="void" name="rmSetTriggerEffectParam">
        <parameters type="string" name="paramName"/>
        <parameters type="string" name="value"/>
        <parameters type="bool" name="add"/>
        <javadoc>Adds a parameter to the current effect.</javadoc>
    </method>
    <method return="void" name="rmSetTriggerEffectParamArmy">
        <parameters type="string" name="paramName"/>
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="armyID"/>
        <parameters type="bool" name="add"/>
        <javadoc>Adds an army parameter to the current effect.</javadoc>
    </method>
    <method return="void" name="rmSetTriggerEffectParamFloat">
        <parameters type="string" name="paramName"/>
        <parameters type="float" name="value"/>
        <parameters type="bool" name="add"/>
        <javadoc>Adds a float parameter to the current effect.</javadoc>
    </method>
    <method return="void" name="rmSetTriggerEffectParamInt">
        <parameters type="string" name="paramName"/>
        <parameters type="int" name="value"/>
        <parameters type="bool" name="add"/>
        <javadoc>Adds an int parameter to the current effect.</javadoc>
    </method>
    <method return="void" name="rmSetTriggerLoop">
        <parameters type="bool" name="loop"/>
        <javadoc>Sets the current trigger looping.</javadoc>
    </method>
    <method return="void" name="rmSetTriggerPriority">
        <parameters type="int" name="priority"/>
        <javadoc>Sets the current trigger's priority.</javadoc>
    </method>
    <method return="void" name="rmSetTriggerRunImmediately">
        <parameters type="bool" name="runImmediately"/>
        <javadoc>Sets the current trigger to "run immediately"</javadoc>
    </method>
    <method return="void" name="rmSetVCFile">
        <parameters type="string" name="filename"/>
        <javadoc>Assigns a specific victory condition file to this RMS.</javadoc>
    </method>
    <method return="void" name="rmSwitchToTrigger">
        <parameters type="int" name="triggerID"/>
        <javadoc>Sets the given trigger as current.</javadoc>
    </method>
    <method return="void" name="rmAddTriggerCondition">
        <parameters type="string" name="conditionType"/>
        <javadoc>Add a condition from the trigger(2)\typetest.xml file to the random map.</javadoc>
    </method>
    <method return="void" name="rmAddTriggerEffect">
        <parameters type="string" name="effectType"/>
        <javadoc>Add an effect from the trigger(2)\typetest.xml file to the random map.</javadoc>
    </method>
    <method return="void" name="rmCreateTrigger">
        <parameters type="string" name="triggerName"/>
        <javadoc>&#xD;
Create a trigger to add to this random map.&#xD;
In addition, the default condition (Always) and effect (SetIdleProcessing) are automatically added.</javadoc>
    </method>
    <method return="int" name="rmTriggerID">
        <parameters type="string" name="triggerName"/>
        <javadoc>Returns the ID for the trigger with as name triggerName</javadoc>
    </method>
    <method return="void" name="trAIFunc">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="functionName"/>
        <parameters type="float" name="param"/>
        <javadoc>Fires a function in the current AI file.</javadoc>
    </method>
    <method return="bool" name="trArmyDispatch">
        <parameters type="string" name="SrcArmy"/>
        <parameters type="string" name="ProtoName"/>
        <parameters type="int" name="Count"/>
        <parameters type="float" name="x"/>
        <parameters type="float" name="y"/>
        <parameters type="float" name="z"/>
        <parameters type="int" name="Heading"/>
        <parameters type="bool" name="Clear"/>
        <javadoc>&#xD;
Creates the units in the army specified.&#xD;
Only works for human players online.&#xD;
Returns true if successful.</javadoc>
    </method>
    <method return="bool" name="trCheckGPActive">
        <parameters type="string" name="godPower"/>
        <parameters type="int" name="playerID"/>
        <javadoc>Returns whether that GP type, for that player, is currently in effect.</javadoc>
    </method>
    <method return="void" name="trClearCounterDisplay">
        <javadoc>Clears the current fake-counter display.&#xD;
&#xD;
@see #trSetCounterDisplay(string)</javadoc>
    </method>
    <method return="void" name="trCounterAbort">
        <parameters type="string" name="name"/>
        <javadoc>Abort a counter</javadoc>
    </method>
    <method return="void" name="trCounterAddTime">
        <parameters type="string" name="name"/>
        <parameters type="int" name="start"/>
        <parameters type="int" name="stop"/>
        <parameters type="string" name="message"/>
        <parameters type="int" name="eventID"/>
        <javadoc>Start a counter that may or may not fire an event.</javadoc>
    </method>
    <method return="void" name="trCounterAddUnit">
        <parameters type="string" name="name"/>
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="count"/>
        <parameters type="string" name="protoUnit"/>
        <parameters type="string" name="message"/>
        <parameters type="int" name="eventID"/>
        <javadoc>Start a counter that may or may not fire an event.</javadoc>
    </method>
    <method return="void" name="trDelayedRuleActivation">
        <parameters type="string" name="rulename"/>
        <javadoc>&#xD;
Adds a rule to the runtime to be activated on the next update.&#xD;
&#xD;
This causes the rule to be delayed by a small fraction of time,&#xD;
but often enough to properly complete commands that might take a little while.&#xD;
&#xD;
@see aom.scripting.xs.xs.Rule#xsEnableRule(string) xsEnableRule(string)</javadoc>
    </method>
    <method return="void" name="trEcho">
        <parameters type="string" name="echoString"/>
        <javadoc>Prints the given string to the RTS3banglog.txt file in the AoM folder.</javadoc>
    </method>
    <method return="void" name="trEchoStatValue">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="statID"/>
        <javadoc>Fetch a stat value from the KB and echo to chat.</javadoc>
    </method>
    <method return="void" name="trEndGame">
        <javadoc>Signal that the game has ended</javadoc>
    </method>
    <method return="void" name="trEventFire">
        <parameters type="int" name="eventID"/>
        <javadoc></javadoc>
    </method>
    <method return="void" name="trEventSetHandler">
        <parameters type="int" name="eventID"/>
        <parameters type="string" name="handlerFunction"/>
        <javadoc>&#xD;
Sets a handler function f(int status) for an eventID. Every time this event is fired,&#xD;
the given hander function will automatically be called with the eventID as its status.</javadoc>
    </method>
    <method return="void" name="trForbidProtounit">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="protoname"/>
        <javadoc>Adds protounit to the forbidden list.</javadoc>
    </method>
    <method return="void" name="trGameLoadScenario">
        <parameters type="string" name="scenarioName"/>
        <javadoc>Start a game using scenario.</javadoc>
    </method>
    <method return="void" name="trGamePause">
        <parameters type="bool" name="pause"/>
        <javadoc>Pause or unpause the game.</javadoc>
    </method>
    <method return="void" name="trGenerateLush">
        <javadoc>&#xD;
Force generation of lush from a pre-placed building.&#xD;
&#xD;
@since AoT</javadoc>
    </method>
    <method return="int" name="trGetGPUsedTime">
        <parameters type="string" name="godPower"/>
        <parameters type="int" name="playerID"/>
        <javadoc>Returns the time when that GP was first used, or -1 for unused.</javadoc>
    </method>
    <method return="int" name="trGetStatValue">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="statID"/>
        <javadoc>Fetch a stat value from the KB</javadoc>
    </method>
    <method return="int" name="trGetWorldDifficulty">
        <javadoc>Returns the world difficulty.</javadoc>
    </method>
    <method return="void" name="trMessageSetText">
        <parameters type="string" name="message"/>
        <parameters type="int" name="timeout"/>
        <javadoc>Displays a message box at the top of the screen with the given message.</javadoc>
    </method>
    <method return="void" name="trMinimapFlare">
        <parameters type="int" name="playerID"/>
        <parameters type="float" name="duration"/>
        <parameters type="vector" name="position"/>
        <parameters type="bool" name="flash"/>
        <javadoc>Sends a Minimap flare to a certain player.</javadoc>
    </method>
    <method return="void" name="trModeEnter">
        <parameters type="string" name="modeName"/>
        <javadoc>&#xD;
Enters the mode specified.&#xD;
&#xD;
@local&#xD;
&#xD;
@see aom.scripting.ui.console.Mode#modeEnter(string) modeEnter(string)</javadoc>
    </method>
    <method return="void" name="trModifyProtounit">
        <parameters type="string" name="protoUnit"/>
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="field"/>
        <parameters type="float" name="delta"/>
        <javadoc>&#xD;
Modifies protounit data for this scenario only.&#xD;
&#xD;
@param 	protoUnit&#xD;
The name of the protounit to modify.&#xD;
@param	playerID&#xD;
The player for which the modifications should occur.&#xD;
@param	field&#xD;
{@link TriggerParamType#PUFIELD}&#xD;
@param	delta&#xD;
The (relative) amount to change.&#xD;
&#xD;
@since AoT</javadoc>
    </method>
    <method return="void" name="trObjectiveSetID">
        <parameters type="int" name="missionNum"/>
        <parameters type="int" name="objectiveID"/>
        <javadoc>Sets the objective text.</javadoc>
    </method>
    <method return="void" name="trRateConstruction">
        <parameters type="float" name="rate"/>
        <javadoc>Modify construction rate for all players.</javadoc>
    </method>
    <method return="void" name="trRateResearch">
        <parameters type="float" name="rate"/>
        <javadoc>Modify research rate for all players.</javadoc>
    </method>
    <method return="void" name="trRatesNormal">
        <javadoc>Restore all rates to normal for all players.</javadoc>
    </method>
    <method return="void" name="trRateTrain">
        <parameters type="float" name="rate"/>
        <javadoc>Modify training rate for all players</javadoc>
    </method>
    <method return="void" name="trRevealEntireMap">
        <javadoc>&#xD;
Shows whole map, similar to how revealed mode works.&#xD;
&#xD;
@see #trSetFogAndBlackmap(bool, bool)</javadoc>
    </method>
    <method return="void" name="trSetCivilizationNameOverride">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="civName"/>
        <javadoc>&#xD;
Override display name of a civilization dynamically.&#xD;
&#xD;
@since AoT</javadoc>
    </method>
    <method return="void" name="trSetCounterDisplay">
        <parameters type="string" name="text"/>
        <javadoc>Sets the current fake-counter text.&#xD;
&#xD;
@see #trClearCounterDisplay()</javadoc>
    </method>
    <method return="void" name="trSetDisableGPBlocking">
        <parameters type="bool" name="b"/>
        <javadoc>&#xD;
Enable or Disable GP blocking (e.g. by Isis monuments).&#xD;
&#xD;
@since AoT</javadoc>
    </method>
    <method return="void" name="trSetFogAndBlackmap">
        <parameters type="bool" name="fog"/>
        <parameters type="bool" name="blackmap"/>
        <javadoc>&#xD;
Turn fog and black map on/off.&#xD;
&#xD;
Similar to the console commands, this just disables the rendering of fog and blackmap.&#xD;
Any area that was previously unscouted will still act as if it was unscouted.&#xD;
To have this scouted effect, use {@link #trRevealEntireMap()} instead.&#xD;
&#xD;
@see aom.scripting.ui.console.Console#fog(int) fog()&#xD;
@see aom.scripting.ui.console.Console#blackmap(int) blackmap()</javadoc>
    </method>
    <method return="void" name="trSetLighting">
        <parameters type="string" name="setName"/>
        <parameters type="float" name="fadeTime"/>
        <javadoc>Fades to the specified lighting set over a given fadeTime.</javadoc>
    </method>
    <method return="void" name="trSetPauseInObjectiveWindow">
        <javadoc>&#xD;
Automatically pauses the game if the Objectives windows opens.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="trSetPauseOnAgeUpgrade">
        <javadoc>&#xD;
Automatically pauses the game if the Age Advancement windows opens.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="trSetRelicType">
        <parameters type="int" name="techID"/>
        <javadoc>Changes the effect of the selected relic to this custom techID.</javadoc>
    </method>
    <method return="void" name="trShowChoiceDialog">
        <parameters type="string" name="maintext"/>
        <parameters type="string" name="choice1"/>
        <parameters type="int" name="event1ID"/>
        <parameters type="string" name="choice2"/>
        <parameters type="int" name="event2ID"/>
        <javadoc>&#xD;
Displays dialog with 2 choices, and activates a trigger in response.&#xD;
&#xD;
@local 	Be careful when used online. The trigger events are only fired locally,&#xD;
so an OoS is likely to occur if 2 players choose different options.</javadoc>
    </method>
    <method return="void" name="trShowWinLose">
        <parameters type="string" name="text"/>
        <parameters type="string" name="soundfile"/>
        <parameters type="float" name="volume"/>
        <javadoc>Shows a win/lose message and plays a sound.</javadoc>
    </method>
    <method return="void" name="trStartGameRecord">
        <javadoc>&#xD;
Starts recording the game.&#xD;
&#xD;
This functionality seems kind of broken for scenarios. Only the first couple of minutes are recorded.</javadoc>
    </method>
    <method return="void" name="trStopGameRecord">
        <javadoc>Stops recording the game.</javadoc>
    </method>
    <method return="void" name="trTechGodPower">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="techName"/>
        <parameters type="int" name="numUses"/>
        <javadoc>Adds X uses to the specified god power.</javadoc>
    </method>
    <method return="void" name="trTechGodPowerAtPosition">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="techName"/>
        <parameters type="int" name="numUses"/>
        <parameters type="int" name="slot"/>
        <javadoc>Adds X uses to the specified god power in a specific GP slot (1-4).</javadoc>
    </method>
    <method return="void" name="trTechInvokeGodPower">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="techName"/>
        <parameters type="vector" name="pos1"/>
        <parameters type="vector" name="pos2"/>
        <javadoc>&#xD;
Invokes the specified god power.&#xD;
&#xD;
Ensure that the player actually possesses the given power first.&#xD;
Since AoT this precondition is not required anymore for Mother Nature.</javadoc>
    </method>
    <method return="void" name="trTechSetStatus">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="techID"/>
        <parameters type="int" name="statusID"/>
        <javadoc>Sets the technology status for the player.</javadoc>
    </method>
    <method return="bool" name="trTechStatusActive">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="techID"/>
        <javadoc>Returns true if technology is active for player.</javadoc>
    </method>
    <method return="bool" name="trTechStatusResearching">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="techID"/>
        <javadoc>Returns true if technology is being researched for player.</javadoc>
    </method>
    <method return="int" name="trTime">
        <javadoc>Returns the current game time in Seconds.</javadoc>
    </method>
    <method return="int" name="trTimeMS">
        <javadoc>Returns the current game time in Milliseconds.</javadoc>
    </method>
    <method return="void" name="trUnforbidProtounit">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="protoName"/>
        <javadoc>Removes proto unit from the forbidden list.</javadoc>
    </method>
    <method return="void" name="trWriteToLog">
        <parameters type="string" name="message"/>
        <javadoc>Writes text to the rts3banglog</javadoc>
    </method>
    <method return="void" name="trShowScoreMessage">
        <parameters type="int" name="player"/>
        <parameters type="string" name="soundfile"/>
        <javadoc>&#xD;
Shows the player's kill/loss ratio as the score in the middle of the screen.&#xD;
&lt;p&gt;&#xD;
The message can be removed with {@code gadgetUnreal("winLoseDisplay")}.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="trShowPersistentScoreMessage">
        <parameters type="int" name="player"/>
        <javadoc>&#xD;
Shows the player's kill/loss ratio as the score at the top of the screen.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="trHidePersistentScoreMessage">
        <javadoc>&#xD;
Hide the score message at the top of the screen.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="trSetTimeOfDay">
        <parameters type="float" name="alpha"/>
        <javadoc>&#xD;
Sets the time of day: 0.0 - 1.0.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="trSetTimeOfDayPeriod">
        <parameters type="float" name="period"/>
        <javadoc>&#xD;
Sets the day-night cycle period in seconds. A value of period that is less than 1.0 switches off day-night cycle.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="trSetPlayerCustomScore">
        <parameters type="int" name="player"/>
        <parameters type="int" name="newScoreValue"/>
        <javadoc>&#xD;
Sets the player's custom score bonus.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="trAddToPlayerCustomScore">
        <parameters type="int" name="player"/>
        <parameters type="int" name="deltaScore"/>
        <javadoc>&#xD;
Adds to the player's custom score bonus.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="trScoreMsgBox">
        <parameters type="int" name="player"/>
        <parameters type="string" name="text"/>
        <parameters type="string" name="subtitle"/>
        <parameters type="int" name="eventID"/>
        <javadoc>&#xD;
Displays the given text along with the player's current score in a centered message box with an OK button.&#xD;
&lt;p&gt;&#xD;
The subtitle parameter doesn't seem to do anything.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="int" name="kbGetPopCapAddition">
        <parameters type="int" name="player"/>
        <parameters type="int" name="baseUnitTypeID"/>
        <javadoc>Returns amount of pop cap addition provided by the given unit type. This only works on base types.</javadoc>
    </method>
    <method return="int" name="kbGetPopSlots">
        <parameters type="int" name="player"/>
        <parameters type="int" name="baseUnitTypeID"/>
        <javadoc>Returns the number of pop slots this unit takes. This only works on base types.</javadoc>
    </method>
    <method return="int" name="kbGetPopulationSlotsByUnitTypeID">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="unitTypeID"/>
        <javadoc>Returns the number of pop slots currently occupied by this unit type.</javadoc>
    </method>
    <method return="int" name="kbFindBestBuildingToRepair">
        <parameters type="vector" name="position"/>
        <parameters type="float" name="distance"/>
        <parameters type="float" name="healthRatio"/>
        <parameters type="int" name="repairUnderAttackUnitTypeID"/>
        <javadoc>Returns the id of the best building to repair.</javadoc>
    </method>
    <method return="float" name="kbGetCombatEfficiency">
        <parameters type="int" name="playerID1"/>
        <parameters type="int" name="unitTypeID1"/>
        <parameters type="int" name="playerID2"/>
        <parameters type="int" name="unitTypeID2"/>
        <javadoc>Returns the combat efficiency of the comparison (in terms of playerID1's units).</javadoc>
    </method>
    <method return="void" name="kbLookAtAllUnitsOnMap">
        <javadoc>&#xD;
Updates the knowledge base for all players with the latest info.&#xD;
If something's not working, put this in front of it and the problem usually magically disappears.&#xD;
&#xD;
@see aom.scripting.xs.xs.ExternalSubroutines#xsSetContextPlayer(int) xsSetContextPlayer(int player)</javadoc>
    </method>
    <method return="void" name="kbDump">
        <parameters type="int" name="player1"/>
        <parameters type="int" name="player2"/>
        <javadoc>KB dump for player2's units from player1's perspective.</javadoc>
    </method>
    <method return="void" name="kbDumpType">
        <parameters type="int" name="player1"/>
        <parameters type="int" name="player2"/>
        <parameters type="string" name="typeName"/>
        <javadoc>KB dump for player2's units of the given type from player1's perspective.</javadoc>
    </method>
    <method return="float" name="kbGetProtoUnitAICost">
        <parameters type="int" name="protoUnitTypeID"/>
        <javadoc>Returns the AI cost for the given protoUnit type ID.</javadoc>
    </method>
    <method return="int" name="kbGetBuildLimit">
        <parameters type="int" name="player"/>
        <parameters type="int" name="baseUnitTypeID"/>
        <javadoc>Returns the number of the unit type you are allowed to have. This only works on base types. Returns -1 if there is no limit.</javadoc>
    </method>
    <method return="int" name="kbGetRandomEnabledPUID">
        <parameters type="int" name="unitTypeID"/>
        <parameters type="int" name="escrowID"/>
        <javadoc>&#xD;
Returns a random, valid protounit ID that's of the given type.</javadoc>
    </method>
    <method return="float" name="kbUnitCostPerResource">
        <parameters type="int" name="protoUnitID"/>
        <parameters type="int" name="resourceID"/>
        <javadoc>&#xD;
Returns the cost of the protounit for the given resource.&#xD;
@since AoT</javadoc>
    </method>
    <method return="string" name="kbGetProtoUnitName">
        <parameters type="int" name="protoUnitTypeID"/>
        <javadoc>Returns the name of the protounit ID.</javadoc>
    </method>
    <method return="int" name="kbGetUnitBaseTypeID">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the base type ID of the unit.</javadoc>
    </method>
    <method return="string" name="kbGetUnitTypeName">
        <parameters type="int" name="unitTypeID"/>
        <javadoc>Returns the name of the unit type.</javadoc>
    </method>
    <method return="vector" name="kbGetBlockPosition">
        <parameters type="string" name="blockName"/>
		<parameters type="bool" name="backwardsSearch"/>
        <javadoc>&#xD;
Returns the position of the given unit.&#xD;
This was intended to only work for cinematic blocks,&#xD;
but it turns out to work fine for every unit.</javadoc>
    </method>
    <method return="int" name="kbGetBlockID">
        <parameters type="string" name="unitName"/>
		<parameters type="bool" name="backwardsSearch"/>
        <javadoc>&#xD;
Returns the UnitID of the given unit.&#xD;
This was intended to only work for cinematic blocks,&#xD;
but it turns out to work fine for every unit.</javadoc>
    </method>
    <method return="bool" name="kbProtoUnitAvailable">
        <parameters type="int" name="protoUnitID"/>
        <javadoc>Returns true if the protoUnit is currently available.</javadoc>
    </method>
    <method return="int" name="kbGetProtoUnitID">
        <parameters type="string" name="name"/>
        <javadoc>Returns the ID of the protounit.</javadoc>
    </method>
    <method return="bool" name="kbCanAffordUnit">
        <parameters type="int" name="protoUnitTypeID"/>
        <parameters type="int" name="escrowID"/>
        <javadoc>Returns true if the player can afford the proto unit.</javadoc>
    </method>
    <method return="int" name="kbUnitCount">
        <parameters type="int" name="player"/>
        <parameters type="int" name="unitTypeID"/>
        <parameters type="int" name="stateID"/>
        <javadoc>Returns a quick unit count of units for a player.</javadoc>
    </method>
    <method return="void" name="kbUnitCountConsole">
        <parameters type="int" name="playerID1"/>
        <parameters type="int" name="playerID2"/>
        <parameters type="string" name="unitType"/>
        <parameters type="string" name="state"/>
        <javadoc>Returns a quick unit count of player2's units from player1's perspective.</javadoc>
    </method>
    <method return="int" name="kbUnitGetPlanID">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the plan ID for this unit ID.</javadoc>
    </method>
    <method return="int" name="kbUnitGetBaseID">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the base ID for this unit ID.</javadoc>
    </method>
    <method return="int" name="kbUnitGetAreaID">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the area ID for this unit ID.</javadoc>
    </method>
    <method return="int" name="kbUnitGetArmyID">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the army ID for this unit ID.</javadoc>
    </method>
    <method return="int" name="kbUnitGetMovementType">
        <parameters type="int" name="unitTypeID"/>
        <javadoc>Returns the movementType for this unitTypeID.</javadoc>
    </method>
    <method return="float" name="kbUnitGetCurrentHitpoints">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the current hitpoints for this unit ID.</javadoc>
    </method>
    <method return="float" name="kbUnitGetMaximumHitpoints">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the maximum hitpoints for this unit ID.</javadoc>
    </method>
    <method return="float" name="kbUnitGetHealth">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the health for this unit ID.</javadoc>
    </method>
    <method return="float" name="kbUnitGetCurrentAICost">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the current AI cost (worth) for this unit ID.</javadoc>
    </method>
    <method return="float" name="kbUnitGetMaximumAICost">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the maximum AI cost (worth) for this unit ID.</javadoc>
    </method>
    <method return="vector" name="kbUnitGetPosition">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the position for this unit ID.</javadoc>
    </method>
    <method return="bool" name="kbUnitIsType">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns true if the unit is of the unitTypeID.</javadoc>
    </method>
    <method return="int" name="kbUnitGetActionType">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the actionTypeID of the unit.</javadoc>
    </method>
    <method return="int" name="kbUnitGetTargetUnitID">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the target unit ID of the given unit.</javadoc>
    </method>
    <method return="int" name="kbUnitGetNumberWorkers">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the number of units currently working on the given unit.</javadoc>
    </method>
    <method return="int" name="kbUnitGetWorkerID">
        <parameters type="int" name="unitID"/>
        <parameters type="int" name="index"/>
        <javadoc>Returns the index'th worker unit ID.</javadoc>
    </method>
    <method return="bool" name="kbUnitVisible">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns true if the unit is currently visible to the player.&#xD;
&#xD;
@see aom.scripting.xs.tr.Unit#trUnitHasLOS(int)</javadoc>
    </method>
    <method return="void" name="trDamageUnit">
        <parameters type="float" name="amt"/>
        <javadoc>Does a specific amount of damage to HP in instant typeless damage.</javadoc>
    </method>
    <method return="void" name="trDamageUnitPercent">
        <parameters type="float" name="percent"/>
        <javadoc>Does % percent of a unit's total HP in instant typeless damage.</javadoc>
    </method>
    <method return="void" name="trDamageUnitsInArea">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="unitType"/>
        <parameters type="float" name="dist"/>
        <parameters type="float" name="damage"/>
        <javadoc>All units within distance of the selected reference object that match the type take damage.&#xD;
&lt;p&gt;&#xD;
The unit type can be a unit type like {@code "LogicalTypeCanBeHealed"} or {@code "All"}.</javadoc>
    </method>
    <method return="bool" name="trUnitAlive">
        <javadoc>Returns true if all selected units are alive</javadoc>
    </method>
    <method return="void" name="trUnitBuildUnit">
        <parameters type="string" name="protoUnit"/>
        <parameters type="vector" name="position"/>
        <javadoc>Selects units and makes the build a unit at specified location.</javadoc>
    </method>
    <method return="void" name="trUnitChangeInArea">
        <parameters type="int" name="fromID"/>
        <parameters type="int" name="toID"/>
        <parameters type="string" name="fromProto"/>
        <parameters type="string" name="toProto"/>
        <parameters type="float" name="Dist"/>
        <javadoc>&#xD;
Changes all units in a given radius around the selected units.&#xD;
@since AoT</javadoc>
    </method>
    <method return="void" name="trUnitChangeName">
        <parameters type="string" name="name"/>
        <javadoc>&#xD;
Set an override name for a specific unit.&#xD;
Only works in scenarios, not in RMS.</javadoc>
    </method>
    <method return="void" name="trUnitChangeProtoUnit">
        <parameters type="string" name="protoUnit"/>
        <javadoc>Changes the proto unit for a given set of units.</javadoc>
    </method>
    <method return="void" name="trUnitConvert">
        <parameters type="int" name="playerID"/>
        <javadoc>Converts the selected units to player.</javadoc>
    </method>
    <method return="void" name="trUnitCreate">
        <parameters type="string" name="protoName"/>
        <parameters type="string" name="scenarioName"/>
        <parameters type="float" name="x"/>
        <parameters type="float" name="y"/>
        <parameters type="float" name="z"/>
        <parameters type="int" name="heading"/>
        <parameters type="int" name="playerID"/>
        <javadoc>Creates a new unit. Does not work online.</javadoc>
    </method>
    <method return="bool" name="trUnitDead">
        <javadoc>Returns true if all selected units are dead.</javadoc>
    </method>
    <method return="void" name="trUnitDelete">
        <parameters type="bool" name="remove"/>
        <javadoc>Removes or kills the selected unit(s)</javadoc>
    </method>
    <method return="void" name="trUnitDestroy">
        <javadoc>Destroys the selected unit(s).</javadoc>
    </method>
    <method return="float" name="trUnitDistanceToPoint">
        <parameters type="float" name="x"/>
        <parameters type="float" name="y"/>
        <parameters type="float" name="z"/>
        <javadoc>Returns the shortest distance between the trRT units and the point.</javadoc>
    </method>
    <method return="float" name="trUnitDistanceToUnit">
        <parameters type="string" name="unitScenarioName"/>
        <javadoc>Returns the shortest distance between the trRT units and the given unit.</javadoc>
    </method>
    <method return="float" name="trUnitDistanceToUnitID">
        <parameters type="int" name="unitID"/>
        <javadoc>Returns the shortest distance between the selected units and the given unit.</javadoc>
    </method>
    <method return="void" name="trUnitDoWorkOnUnit">
        <parameters type="string" name="unitScenarioName"/>
        <parameters type="int" name="eventID"/>
        <javadoc>Tasks the selected unit(s) to perform work on the given unit.</javadoc>
    </method>
    <method return="void" name="trUnitEjectContained">
        <javadoc>Ejects all contained units</javadoc>
    </method>
    <method return="void" name="trUnitGarrison">
        <parameters type="string" name="unitScenarioName"/>
        <parameters type="int" name="eventID"/>
        <javadoc>Tasks the selected unit(s) to garrison into another unit.</javadoc>
    </method>
    <method return="int" name="trUnitGetContained">
        <javadoc>Returns the number of units contained.</javadoc>
    </method>
    <method return="int" name="trUnitGetHeading">
        <parameters type="string" name="scenarioName"/>
        <javadoc>Returns the units heading. The angle returned is the angle the unit's face makes with the z-axis of the map.&#xD;
Unfortunately it does not say which side, so the result is always in the [0-180] interval.</javadoc>
    </method>
    <method return="bool" name="trUnitHasLOS">
        <parameters type="int" name="playerID"/>
        <javadoc>Returns true if the player can see the selected unit, otherwise returns false. OoS Danger.</javadoc>
    </method>
    <method return="bool" name="trUnitIsOwnedBy">
        <parameters type="int" name="playerID"/>
        <javadoc>Determines if the selected units are owned by the player specified</javadoc>
    </method>
    <method return="bool" name="trUnitIsSelected">
        <javadoc>Returns if the specified unit is selected.</javadoc>
    </method>
    <method return="void" name="trUnitMoveFromArea">
        <parameters type="float" name="x"/>
        <parameters type="float" name="y"/>
        <parameters type="float" name="z"/>
        <parameters type="int" name="eventID"/>
        <parameters type="bool" name="attackMove"/>
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="unitType"/>
        <parameters type="float" name="radius"/>
        <javadoc>Moves all matching units near the selected unit(s) to the given position.</javadoc>
    </method>
    <method return="void" name="trUnitMoveToPoint">
        <parameters type="float" name="x"/>
        <parameters type="float" name="y"/>
        <parameters type="float" name="z"/>
        <parameters type="int" name="eventID"/>
        <parameters type="bool" name="attackMove"/>
        <javadoc>Moves the selected unit(s) to the given position. Does not work online. Does not work for mother nature.</javadoc>
    </method>
    <method return="void" name="trUnitMoveToUnit">
        <parameters type="string" name="unitScenarioName"/>
        <parameters type="int" name="eventID"/>
        <parameters type="bool" name="attackMove"/>
        <javadoc>Moves the selected unit(s) to the spot occupied by the given unit. Does not work online. Does not work for mother nature.</javadoc>
    </method>
    <method return="bool" name="trUnitOnLush">
        <parameters type="bool" name="lush"/>
        <parameters type="int" name="playerID"/>
        <javadoc>Checks whether the selected units location matches lush for the given player.</javadoc>
    </method>
    <method return="int" name="trUnitPercentComplete">
        <javadoc>Returns the percent complete as 0 to 100.</javadoc>
    </method>
    <method return="int" name="trUnitPercentDamaged">
        <javadoc>Returns the percent damaged as 0 to 100.</javadoc>
    </method>
    <method return="void" name="trUnitSetAnimation">
        <parameters type="string" name="animationName"/>
        <parameters type="bool" name="loop"/>
        <parameters type="int" name="eventID"/>
        <javadoc>Sets the animations for the selected unit(s) to the given animation. Does not work online.</javadoc>
    </method>
    <method return="void" name="trUnitSetHeading">
        <parameters type="int" name="degrees"/>
        <javadoc>Sets the units heading. Does not work online. The input can range from 0 to 360 degrees.</javadoc>
    </method>
    <method return="void" name="trUnitSetHP">
        <parameters type="float" name="hitpoints"/>
        <javadoc>Set the hit points for all selected units. Does not work online.</javadoc>
    </method>
    <method return="void" name="trUnitSetStance">
        <parameters type="string" name="stance"/>
        <javadoc>Set the stance for the given set of units.</javadoc>
    </method>
    <method return="void" name="trUnitTeleport">
        <parameters type="float" name="x"/>
        <parameters type="float" name="y"/>
        <parameters type="float" name="z"/>
        <javadoc>Moves units from current position to position specified. Does not work online.</javadoc>
    </method>
    <method return="bool" name="trUnitTypeIsSelected">
        <parameters type="string" name="protoUnit"/>
        <javadoc>Returns true if the specified unit is selected.</javadoc>
    </method>
    <method return="bool" name="trUnitVisToPlayer">
        <javadoc>Returns true if the {@link ExternalSubroutines#xsGetContextPlayer() context player} can see the selected unit, and it is on screen.</javadoc>
    </method>
    <method return="void" name="trSetUnitIdleProcessing">
        <parameters type="bool" name="b"/>
        <javadoc>Sets whether or not units can do their idle processing.</javadoc>
    </method>
    <method return="void" name="trImmediateUnitGarrison">
        <parameters type="string" name="unitScenarioName"/>
        <javadoc>Instantly garrisons units inside another unit without considering distance.</javadoc>
    </method>
    <method return="int" name="kbUnitPickCreate">
        <parameters type="string" name="name"/>
        <javadoc>Creates a unit pick.</javadoc>
    </method>
    <method return="bool" name="kbUnitPickDestroy">
        <parameters type="int" name="upID"/>
        <javadoc>Destroys the given unit pick.</javadoc>
    </method>
    <method return="int" name="kbUnitPickRun">
        <parameters type="int" name="upID"/>
        <javadoc>Runs the unit pick.</javadoc>
    </method>
    <method return="int" name="kbUnitPickGetResult">
        <parameters type="int" name="upID"/>
        <parameters type="int" name="index"/>
        <javadoc>Returns the index'th ProtoUnitID.</javadoc>
    </method>
    <method return="void" name="trSetObscuredUnits">
        <parameters type="bool" name="b"/>
        <javadoc>Sets whether or not units can be drawn obscured or not.</javadoc>
    </method>
    <method return="void" name="trRenderSky">
        <parameters type="bool" name="on"/>
        <parameters type="string" name="skyName"/>
        <javadoc>Turn sky rendering on/off and set which sky to use... defaultSkyBox.</javadoc>
    </method>
    <method return="void" name="trRenderSnow">
        <parameters type="float" name="percent"/>
        <javadoc>Controls snow rendering.</javadoc>
    </method>
    <method return="bool" name="trIsGadgetVisible">
        <parameters type="string" name="gadget"/>
        <javadoc>Returns true if gadget is "real", i.e. visible.&#xD;
@see Gadget#gadgetReal(string)&#xD;
@see Gadget#gadgetUnreal(string)</javadoc>
    </method>
    <method return="void" name="trUIFadeToColor">
        <parameters type="int" name="r"/>
        <parameters type="int" name="g"/>
        <parameters type="int" name="b"/>
        <parameters type="int" name="durationMS"/>
        <parameters type="int" name="delayMS"/>
        <parameters type="bool" name="inout"/>
        <javadoc>Fade in/out using color specified.</javadoc>
    </method>
    <method return="void" name="trUIFlash">
        <parameters type="string" name="gadgetName"/>
        <parameters type="bool" name="flash"/>
        <javadoc>Flashes a UI element (maybe).</javadoc>
    </method>
    <method return="void" name="trUIFlashTrain">
        <parameters type="string" name="protoName"/>
        <parameters type="bool" name="flash"/>
        <javadoc>Flashes a UI element (maybe).</javadoc>
    </method>
    <method return="void" name="trUIFlashTech">
        <parameters type="int" name="techID"/>
        <parameters type="bool" name="flash"/>
        <javadoc>Flashes a UI element (maybe).</javadoc>
    </method>
    <method return="void" name="trUIFlashCategory">
        <parameters type="int" name="category"/>
        <parameters type="bool" name="flash"/>
        <javadoc>Flashes a UI element (maybe).</javadoc>
    </method>
    <method return="vector" name="vector">
        <parameters type="float" name="x"/>
        <parameters type="float" name="y"/>
        <parameters type="float" name="z"/>
        <javadoc>&#xD;
Creates a simple vector where all three coordinates are &lt;b&gt;literal numbers&lt;/b&gt; [like {@code vector(1,2,3)}, but not {@code vector(x,0,z)}].&#xD;
Use {@link Vector#xsVectorSet(float, float, float) xsVectorSet} to create a vector from any kind of values,&#xD;
including literals, variables, function calls, etc.&#xD;
&#xD;
@see #xsVectorSet(float, float, float)</javadoc>
    </method>
    <method return="float" name="xsVectorGetX">
        <parameters type="vector" name="v"/>
        <javadoc>Returns the x component of the given vector.</javadoc>
    </method>
    <method return="float" name="xsVectorGetY">
        <parameters type="vector" name="v"/>
        <javadoc>Returns the y component of the given vector.</javadoc>
    </method>
    <method return="float" name="xsVectorGetZ">
        <parameters type="vector" name="v"/>
        <javadoc>Returns the z component of the given vector.</javadoc>
    </method>
    <method return="vector" name="xsVectorSetX">
        <parameters type="vector" name="v"/>
        <parameters type="float" name="x"/>
        <javadoc>Set the x component of the given vector, returns the new vector.</javadoc>
    </method>
    <method return="vector" name="xsVectorSetY">
        <parameters type="vector" name="v"/>
        <parameters type="float" name="y"/>
        <javadoc>Set the y component of the given vector, returns the new vector.</javadoc>
    </method>
    <method return="vector" name="xsVectorSetZ">
        <parameters type="vector" name="v"/>
        <parameters type="float" name="z"/>
        <javadoc>Set the z component of the given vector, returns the new vector.</javadoc>
    </method>
    <method return="vector" name="xsVectorSet">
        <parameters type="float" name="x"/>
        <parameters type="float" name="y"/>
        <parameters type="float" name="z"/>
        <javadoc>&#xD;
Creates a new vector from three coordinates.&#xD;
&lt;p&gt;&#xD;
Contrary to the {@link #vector(float, float, float) vector()} pseudo-function, here non-literals (e.g. function calls or variables) are allowed too.</javadoc>
    </method>
    <method return="float" name="xsVectorLength">
        <parameters type="vector" name="v"/>
        <javadoc>Returns the length of the given vector.</javadoc>
    </method>
    <method return="vector" name="xsVectorNormalize">
        <parameters type="vector" name="v"/>
        <javadoc>Returns the normalized version of the given vector,&#xD;
i.e. a vector of length one that points in the same direction as the given vector.</javadoc>
    </method>
    <method return="void" name="vcCheckConquestVictory">
        <javadoc>&#xD;
Checks if a player has no more units marked with "LogicalTypeNeededForVictory".&#xD;
If the result is true, that player will be set defeated.</javadoc>
    </method>
    <method return="void" name="vcCheckSettlementVictory">
        <parameters type="int" name="countdown"/>
        <javadoc>&#xD;
Checks if 1 team has claimed all town centers, and fires a counter with given duration.&#xD;
If the counter finishes, the opposite teams will be set defeated.&#xD;
&#xD;
@param countdown the duration of the countdown</javadoc>
    </method>
    <method return="void" name="vcStartOrUpdateWonderTimer">
        <parameters type="int" name="player"/>
        <parameters type="string" name="building"/>
        <parameters type="int" name="countdown"/>
        <javadoc>&#xD;
Looks for wonder timers to start.&#xD;
&#xD;
@param player the player to be checked for wonders.&#xD;
@param building the protoname for a wonder ("wonder")&#xD;
@param countdown the duration of the countdown&#xD;
&#xD;
@note The actual wonder countdown, etc. is handled in C code,&#xD;
this function's responsibility is just starting things up.</javadoc>
    </method>
    <method return="int" name="vcGetGameplayMode">
        <javadoc>&#xD;
Returns the current gameplay modeID.</javadoc>
    </method>
    <method return="int" name="aiWallInArea">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="numberNeed"/>
        <parameters type="int" name="nubmerWant"/>
        <parameters type="int" name="numberMax"/>
        <parameters type="int" name="escrowID"/>
        <parameters type="int" name="numGates"/>
        <parameters type="int" name="planPriority"/>
        <javadoc>Walls in the given area.</javadoc>
    </method>
    <method return="int" name="aiWallInAreas">
        <parameters type="string" name="name"/>
        <parameters type="int" name="areaID1"/>
        <parameters type="int" name="areaID2"/>
        <parameters type="int" name="areaID3"/>
        <parameters type="int" name="numberNeed"/>
        <parameters type="int" name="nubmerWant"/>
        <parameters type="int" name="numberMax"/>
        <parameters type="int" name="escrowID"/>
        <parameters type="int" name="numGates"/>
        <parameters type="int" name="planPriority"/>
        <javadoc>Walls around all 3 areas at once.</javadoc>
    </method>
    <method return="int" name="aiWallFromAToB">
        <parameters type="string" name="name"/>
        <parameters type="vector" name="a"/>
        <parameters type="vector" name="b"/>
        <parameters type="int" name="numberNeed"/>
        <parameters type="int" name="nubmerWant"/>
        <parameters type="int" name="numberMax"/>
        <parameters type="int" name="escrowID"/>
        <parameters type="int" name="numGates"/>
        <parameters type="int" name="planPriority"/>
        <javadoc>Walls from point a to point b.</javadoc>
    </method>
    <method return="int" name="aiWallRingAroundPoint">
        <parameters type="string" name="name"/>
        <parameters type="vector" name="center"/>
        <parameters type="float" name="radius"/>
        <parameters type="int" name="numberNeed"/>
        <parameters type="int" name="nubmerWant"/>
        <parameters type="int" name="numberMax"/>
        <parameters type="int" name="escrowID"/>
        <parameters type="int" name="numGates"/>
        <parameters type="int" name="planPriority"/>
        <javadoc>Walls a ring around the center, with a given radius.</javadoc>
    </method>
    <method return="void" name="kbCheckConsistency">
        <javadoc>Scans all KB entries for unit duplication.</javadoc>
    </method>
    <method return="void" name="renderBaseID">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="state"/>
        <javadoc>Sets the render state of the given base (no int state toggles).</javadoc>
    </method>
    <method return="void" name="renderAreas">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="state"/>
        <javadoc>&#xD;
Sets the render state for all areas (no arguments toggles).&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="renderAreaID">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="areaID"/>
        <parameters type="int" name="state"/>
        <javadoc>&#xD;
Sets the render state of the given area (no integer state toggles).&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="renderAreaGroupID">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="areaGroupID"/>
        <parameters type="int" name="state"/>
        <javadoc>&#xD;
Sets the render state of the given area (no integer state toggles).&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="AIDebugGathererToggle">
        <javadoc>Toggles whether the AI gatherer distribution window is up, refreshing if first showing.</javadoc>
    </method>
    <method return="void" name="AIDebugPopToggle">
        <javadoc>Toggles whether the AI pop distribution window is up, refreshing if first showing.</javadoc>
    </method>
    <method return="void" name="AIDebugPastResourceNeedToggle">
        <javadoc>Toggles whether the AI past resource needs window is up, refreshing if first showing.</javadoc>
    </method>
    <method return="void" name="AIDebugTimedStatsToggle">
        <javadoc>Toggles whether the KB timed statistics window is up, refreshing if first showing.</javadoc>
    </method>
    <method return="void" name="AIDebugToggleBPText">
        <javadoc>Toggles the showing of building placement value text. Used for AI building calculation.</javadoc>
    </method>
    <method return="void" name="uiShowAIDebugInfoPlan">
        <parameters type="int" name="planID"/>
        <javadoc>Brings up the plan debug text for the given plan ID.</javadoc>
    </method>
    <method return="void" name="uiShowAIDebugInfoPlacement">
        <parameters type="int" name="placementID"/>
        <javadoc>Brings up the building placement info for the given ID.</javadoc>
    </method>
    <method return="void" name="uiShowAIDebugInfoProgression">
        <parameters type="int" name="progressionID"/>
        <javadoc>Brings up the progression info for the given ID.</javadoc>
    </method>
    <method return="void" name="uiShowAIDebugInfoKBUnit">
        <parameters type="int" name="unitID"/>
        <javadoc>Brings up the unit info for the given ID.</javadoc>
    </method>
    <method return="void" name="uiShowAIDebugInfoBase">
        <parameters type="int" name="baseID"/>
        <javadoc>Brings up the base info for the given ID.</javadoc>
    </method>
    <method return="void" name="uiShowAIDebugInfoArea">
        <parameters type="int" name="areaID"/>
        <javadoc>Brings up the area info for the given ID.</javadoc>
    </method>
    <method return="void" name="uiShowAIDebugInfoAreaGroup">
        <javadoc>Brings up the area info for the given ID.</javadoc>
    </method>
    <method return="void" name="uiSetKBAttackRouteRender">
        <javadoc>Render the attackRoute info for the given ID.</javadoc>
    </method>
    <method return="void" name="uiShowAIDebugInfoAttackRoute">
        <javadoc>Brings up the attackRoute info for the given ID.</javadoc>
    </method>
    <method return="void" name="uiSetKBResourceRender">
        <parameters type="int" name="resID"/>
        <parameters type="bool" name="set"/>
        <javadoc>Render the kbResource info for the given ID. If not set given, will not render the resource.</javadoc>
    </method>
    <method return="void" name="uiShowAIDebugInfoKBResource">
        <javadoc>Brings up the kbResource info for the given ID.</javadoc>
    </method>
    <method return="void" name="uiSetKBArmyRender">
        <parameters type="int" name="id"/>
        <parameters type="bool" name="set"/>
        <javadoc>Render the kbArmy info for the given ID. If not set given, will not render the army.</javadoc>
    </method>
    <method return="void" name="uiShowAIDebugInfoKBArmy">
        <javadoc>Brings up the kbArmy info for the given ID.</javadoc>
    </method>
    <method return="void" name="uiShowAIDebugInfoKBUnitPick">
        <javadoc>Brings up the kbUnitPick info for the given ID.</javadoc>
    </method>
    <method return="void" name="uiShowAIDebugInfoEscrow">
        <javadoc>Brings up the escrow info for the given ID.</javadoc>
    </method>
    <method return="void" name="uiSetBuildingPlacementRender">
        <parameters type="int" name="id"/>
        <parameters type="bool" name="on"/>
        <javadoc>Controls rendering of the building placement info for the given ID.</javadoc>
    </method>
    <method return="void" name="AIDebugInfoRefresh">
        <javadoc>Shows the AI debug menu with new data.</javadoc>
    </method>
    <method return="void" name="AIDebugInfoToggle">
        <javadoc>Toggles whether the AI debug menu is up, refreshing if first showing.</javadoc>
    </method>
    <method return="void" name="AIDebugOutputToggle">
        <javadoc>Toggles whether the AI output window is up, refreshing if first showing.</javadoc>
    </method>
    <method return="void" name="lookAt">
        <parameters type="float" name="x"/>
        <parameters type="float" name="z"/>
        <javadoc>Looks at given (x,z) location on terrain.</javadoc>
    </method>
    <method return="void" name="lookAtArmy">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="armyName"/>
        <javadoc>Looks at given KB army.</javadoc>
    </method>
    <method return="void" name="uiZoomToProto">
        <parameters type="string" name="proto"/>
        <javadoc>Zooms to the first instance of proto unit X owned by the current player.</javadoc>
    </method>
    <method return="void" name="uiLookAtSelection">
        <javadoc>Moves the camera to see the first selected unit.</javadoc>
    </method>
    <method return="void" name="uiLookAtUnit">
        <parameters type="int" name="unitID"/>
        <javadoc>Moves the camera to see the specified Unit.</javadoc>
    </method>
    <method return="void" name="uiLookAtUnitByName">
        <parameters type="string" name="scenarioName"/>
        <javadoc>Moves the camera to see the specified Unit.</javadoc>
    </method>
    <method return="void" name="uiLookAtProto">
        <parameters type="string" name="proto"/>
        <javadoc>Moves the camera to see the first instance of proto unit X owned by the current player.</javadoc>
    </method>
    <method return="void" name="cameraLimit">
        <parameters type="int" name="state"/>
        <javadoc>&#xD;
Sets whether camera limiting is on.&#xD;
&#xD;
@since AoT</javadoc>
    </method>
    <method return="void" name="cameraRotate">
        <parameters type="int" name="state"/>
        <javadoc>Sets whether camera limiting is on.</javadoc>
    </method>
    <method return="void" name="cameraNice">
        <javadoc>Puts the camera in a reasonable orientation.</javadoc>
    </method>
    <method return="void" name="cameraForward">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera forward key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraWorldForward">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera world forward key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraWorldForwardLeft">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera world forward 8, left key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraWorldForwardRight">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera world forward 8, right key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraBackward">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera backward key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraWorldBackward">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera world backward key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraWorldBackwardLeft">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera world backward 8, left key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraWorldBackwardRight">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera world backward 8, right key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraRight">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera right key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraLeft">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera left key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraUp">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera up key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraDown">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera down key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraPitchForward">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera pitch forward key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraPitchBackward">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera pitch backward key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraYawRight">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera yaw right key has gone up or down. */</javadoc>
    </method>
    <method return="void" name="cameraYawLeft">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera yaw left key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraLocalYawRight">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera 'Local Yaw right1 key has gone up or down.</javadoc>
    </method>
    <method return="void" name="cameraLocalYawLeft">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that camera 'Local Yaw left' key has gone up or down.</javadoc>
    </method>
    <method return="void" name="saveCamera">
        <parameters type="string" name="filename"/>
        <javadoc>Save camera to file.</javadoc>
    </method>
    <method return="void" name="loadCamera">
        <parameters type="string" name="filename"/>
        <javadoc>Load camera from file.</javadoc>
    </method>
    <method return="void" name="uiWheelRotate">
        <parameters type="int" name="x"/>
        <javadoc>&#xD;
Rotate with wheel, i.e. intended to be mapped to mouse wheel.</javadoc>
    </method>
    <method return="void" name="uiZoomToMinimapEvent">
        <javadoc>&#xD;
Zooms to the most recent minimap event.</javadoc>
    </method>
    <method return="void" name="uiWheelZoom">
        <parameters type="int" name="x"/>
        <javadoc>&#xD;
Zoom with wheel -- i.e. intended to be mapped to mouse wheel.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="uiWheelZoomFine">
        <parameters type="int" name="x"/>
        <javadoc>&#xD;
Zoom fine with wheel -- i.e. intended to be mapped to mouse wheel.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="uiResetWheelRotate">
        <javadoc>&#xD;
Reset rotation.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="uiSaveCampaignGameBrowser">
        <javadoc>Loads the campaign game browser.</javadoc>
    </method>
    <method return="void" name="showCampaignDialog">
        <parameters type="string" name="name"/>
        <parameters type="string" name="msg"/>
        <javadoc>Shows a campaign dialog.</javadoc>
    </method>
    <method return="void" name="campaignCreate">
        <javadoc>Create a new cpn/cpx file.</javadoc>
    </method>
    <method return="void" name="campaignAddScenario">
        <javadoc>Add a scenario to the campaign.</javadoc>
    </method>
    <method return="void" name="campaignDelScenario">
        <javadoc>Delete a scenario from the campaign.</javadoc>
    </method>
    <method return="void" name="campaignSave">
        <javadoc>Save a campaign.</javadoc>
    </method>
    <method return="void" name="campaignStart">
        <javadoc>Start a campaign.</javadoc>
    </method>
    <method return="void" name="campaignSaveCurrent">
        <javadoc>Save the current campaign.</javadoc>
    </method>
    <method return="void" name="campaignAdvance">
        <javadoc>Advance to the next campaign.</javadoc>
    </method>
    <method return="void" name="campaignPlayCurrent">
        <javadoc>Play the current campaign.</javadoc>
    </method>
    <method return="void" name="campaignOuit">
        <javadoc>Quit the current campaign.</javadoc>
    </method>
    <method return="void" name="campaignResume">
        <javadoc>Resume the current campaign.</javadoc>
    </method>
    <method return="void" name="campaignResetCurScenario">
        <javadoc>Reset the current campaign scenario.</javadoc>
    </method>
    <method return="void" name="campaignSetHackyLoadScenarioMode">
        <parameters type="int" name="mode"/>
        <javadoc>Used by the UI.</javadoc>
    </method>
    <method return="void" name="uiChatScroll">
        <parameters type="int" name="nbPagesBack"/>
        <javadoc>&#xD;
Navigates through chat history, resetting mode as needed.&#xD;
@local</javadoc>
    </method>
    <method return="void" name="chat">
        <parameters type="string" name="text"/>
        <parameters type="int" name="player"/>
        <javadoc>&#xD;
Adds a line of chat text from the given player (current if not provided).&#xD;
&#xD;
@local This text won't be transferred over the network to other players.</javadoc>
    </method>
    <method return="void" name="uiSendIngameChat">
        <javadoc>&#xD;
Used by the chat input. Sends a message to the currently selected players.&#xD;
This only sends chats the players with the same (alive/defeated/game-over) state.&#xD;
&#xD;
@sync Transfers the chat message to all intended recipients.</javadoc>
    </method>
    <method return="void" name="sendChatToEveryone">
        <parameters type="string" name="message"/>
        <javadoc>&#xD;
Sends chat to everyone.&#xD;
&#xD;
@sync Transfers the chat message to every player.</javadoc>
    </method>
    <method return="void" name="sendChatToAllies">
        <parameters type="string" name="message"/>
        <javadoc>&#xD;
Sends chat to allies.&#xD;
&#xD;
@sync Transfers the chat message to all allies.</javadoc>
    </method>
    <method return="void" name="sendChatToEnemies">
        <parameters type="string" name="message"/>
        <javadoc>&#xD;
Sends chat to enemies.&#xD;
&#xD;
@sync Transfers the chat message to all enemies.</javadoc>
    </method>
    <method return="void" name="sendChatToPlayer">
        <parameters type="int" name="player"/>
        <parameters type="string" name="message"/>
        <javadoc>&#xD;
Sends chat to given player.&#xD;
&#xD;
@sync Transfers the chat message to the given player.</javadoc>
    </method>
    <method return="void" name="sendChatToTeam">
        <parameters type="int" name="team"/>
        <parameters type="string" name="message"/>
        <javadoc>&#xD;
Sends chat to a team.&#xD;
&#xD;
@sync Transfers the chat message to the given team.</javadoc>
    </method>
    <method return="void" name="uiToggleChat">
        <javadoc>&#xD;
Toggles chat visibility.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="abortCinematic">
        <javadoc>&#xD;
Abort the current cinematic.&#xD;
&#xD;
@single Multiplayer cinematics aren't skippable.</javadoc>
    </method>
    <method return="void" name="uiStartBuildCinematic">
        <javadoc>&#xD;
Start building a cinematic.&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="uiStopBuildCinematic">
        <javadoc>&#xD;
Stop building a cinematic.&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="uiClearCinematicInfo">
        <javadoc>&#xD;
Clears cinematic trigger info.</javadoc>
    </method>
    <method return="void" name="uiClearAllCinematicInfo">
        <javadoc>&#xD;
Clears all cinematic info including model/texture precache info.</javadoc>
    </method>
    <method return="void" name="map">
        <parameters type="string" name="key"/>
        <parameters type="string" name="context"/>
        <parameters type="string" name="command"/>
        <javadoc>&#xD;
Maps an input event to the given command, in the given context.&#xD;
&#xD;
@param 	key	The input key to be bound to an action.&#xD;
When prefixed with a plus, the given action is executed on both keydown and keyup, with param keyState 0 and 1 respectively.&#xD;
&lt;img src="{@docRoot}/resources/keys.png" alt="keymap"&gt;&#xD;
&#xD;
@param context&#xD;
&#xD;
&lt;p&gt;General contexts:&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;root&lt;/li&gt;&#xD;
&lt;li&gt;developer (needs +developer flag in user.cfg)&lt;/li&gt;&#xD;
&lt;li&gt;aiDebug (needs +aiDebug flag in user.cfg)&lt;/li&gt;&#xD;
&lt;li&gt;pregame&lt;/li&gt;&#xD;
&lt;li&gt;world (everything with a map in it, i.e. game + editor)&lt;/li&gt;&#xD;
&lt;li&gt;game&lt;/li&gt;&#xD;
&lt;li&gt;postgame&lt;/li&gt;&#xD;
&lt;li&gt;editor&lt;/li&gt;&#xD;
&lt;li&gt;strategicmap (the big map when you press tab in AoT)&lt;/li&gt;&#xD;
&lt;li&gt;console&lt;/li&gt;&#xD;
&lt;li&gt;XSDebugger&lt;/li&gt;&#xD;
&lt;li&gt;arena //weird campaign menu&lt;/li&gt;&#xD;
&lt;li&gt;AILocSelect&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;p&gt;Building contexts:&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;buildAccel&lt;/li&gt;&#xD;
&lt;li&gt;settlementAccel&lt;/li&gt;&#xD;
&lt;li&gt;dockAccel&lt;/li&gt;&#xD;
&lt;li&gt;marketAccel&lt;/li&gt;&#xD;
&lt;li&gt;greekAcademyAccel&lt;/li&gt;&#xD;
&lt;li&gt;greekArcheryRangeAccel&lt;/li&gt;&#xD;
&lt;li&gt;greekStableAccel&lt;/li&gt;&#xD;
&lt;li&gt;greekFortressAccel&lt;/li&gt;&#xD;
&lt;li&gt;egyptBarracksAccel&lt;/li&gt;&#xD;
&lt;li&gt;egyptMigdolAccel&lt;/li&gt;&#xD;
&lt;li&gt;egyptSiegeCampAccel&lt;/li&gt;&#xD;
&lt;li&gt;norseLongHouseAccel&lt;/li&gt;&#xD;
&lt;li&gt;norseFortAccel&lt;/li&gt;&#xD;
&lt;li&gt;atlanteanBarracksAccel&lt;/li&gt;&#xD;
&lt;li&gt;atlanteanCounterAccel&lt;/li&gt;&#xD;
&lt;li&gt;atlanteanPalaceAccel&lt;/li&gt;&#xD;
&lt;li&gt;templeGreekAccel&lt;/li&gt;&#xD;
&lt;li&gt;templeEgyptianAccel&lt;/li&gt;&#xD;
&lt;li&gt;templeNorseAccel&lt;/li&gt;&#xD;
&lt;li&gt;templeAtlanteanAccel&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;p&gt;Gadgets: all gadget names can be used as context, but may only execute if the mapping is defined in the same file as the gadget (e.g. in uimain.xml).&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;detailHelp&lt;/li&gt;&#xD;
&lt;li&gt;fakeTechTree&lt;/li&gt;&#xD;
&lt;li&gt;objectives&lt;/li&gt;&#xD;
&lt;li&gt;chatDialog&lt;/li&gt;&#xD;
&lt;li&gt;tributeDialog&lt;/li&gt;&#xD;
&lt;li&gt;playerStatusDialog&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;p&gt;All Edit Modes&lt;/p&gt;&#xD;
&#xD;
@param command Any sequence of functions found in this package. There is a rather short length limit on this parameter. This limitation does not apply to keys bound in the data/DefaultKeyMap.xml file or commands in e.g. UI buttons.&#xD;
&#xD;
@see InputConfig#allowMultipleBinds&#xD;
@see #editMode(string)&#xD;
@see #uiEnterContext(string)&#xD;
@see #uiLeaveContext(string)&#xD;
@see ScriptConfig#developer&#xD;
@see ScriptConfig#aiDebug&#xD;
&#xD;
@example &lt;code&gt;map("control-shift-alt-F12", "root", "configToggle(\"flashHitpointBarsOnDamage\")")&lt;/code&gt;&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiEnterContext">
        <parameters type="string" name="context"/>
        <javadoc>&#xD;
Enters the specified UI context.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiLeaveContext">
        <parameters type="string" name="context"/>
        <javadoc>&#xD;
Leaves the specified UI context.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="echo">
        <parameters type="string" name="message"/>
        <javadoc>&#xD;
Sends a message to the console output.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="echoLocalized">
        <parameters type="int" name="stringID"/>
        <javadoc>&#xD;
Fetched a message from the language dll file&#xD;
and calls {@link #echo(string) echo} on that.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="echoNum">
        <parameters type="string" name="message"/>
        <javadoc>&#xD;
Sends a number to the console output.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="IMEEnable">
        <parameters type="bool" name="enable"/>
        <javadoc>&#xD;
Enables or disables IME.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="console">
        <javadoc>&#xD;
Toggles the state of the console dialog.&#xD;
Only works with a preceding {@link UIConfig#showConsole configSet(\"showConsole\")} call.&#xD;
&#xD;
@see ScriptConfig#enableConsole&#xD;
@see UIConfig#showConsole&#xD;
@see UIConfig#consoleAlpha&#xD;
@see UIConfig#consoleBackground&#xD;
@see UIConfig#consoleHistory_i&#xD;
@see UIConfig#consoleInputBackground&#xD;
@see UIConfig#consoleX1&#xD;
@see UIConfig#consoleX2&#xD;
@see UIConfig#consoleY1&#xD;
@see UIConfig#consoleY2&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="pause">
        <parameters type="int" name="state"/>
        <javadoc>&#xD;
With no arguments, toggles pause state on/off, otherwise, sets pause state.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="exit">
        <javadoc>&#xD;
Exits the game.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="screenshot">
        <javadoc>&#xD;
Take a screen shot.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="supaScreenshot">
        <parameters type="int" name="xRes"/>
        <parameters type="string" name="singleImage"/>
        <javadoc>&#xD;
Take a screen shot of the whole map, might take a while.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="undo">
        <javadoc>&#xD;
Undoes the last editing operation.&#xD;
&#xD;
@local&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="redo">
        <javadoc>&#xD;
Re-does the last undone operation.&#xD;
&#xD;
@local&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="alignResources">
        <javadoc>&#xD;
Realigns all resources in the world to tile boundaries.&#xD;
&#xD;
@local&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="alignSelectedUnits">
        <javadoc>&#xD;
Realigns all selected units to tile boundaries.&#xD;
&#xD;
@local&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="outputBlankLine">
        <javadoc>&#xD;
Dumps a blank line to the output.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="resourceMarket">
        <parameters type="int" name="playerID"/>
        <parameters type="string" name="resourceTo"/>
        <parameters type="float" name="amount"/>
        <parameters type="string" name="resourceFrom"/>
        <javadoc>&#xD;
Trades resources at the market for the given player.&#xD;
Negative amount means selling.&#xD;
&#xD;
@note If player == -1, the current one is used.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="restart">
        <javadoc>&#xD;
Re-launch current scenario.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="strategicMap">
        <javadoc>&#xD;
For showing/hiding the (big) strategic map.&#xD;
&#xD;
@since AoT&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="databaseFindByType">
        <parameters type="string" name="typeName"/>
        <javadoc>&#xD;
Shows all proto units of the named type.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="string" name="techNameByID">
        <parameters type="int" name="techID"/>
        <javadoc>&#xD;
Returns name for techID.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="musicPlaySong">
        <parameters type="string" name="songname"/>
        <parameters type="int" name="fadetime"/>
        <javadoc>&#xD;
Play a sound as if it were a music track.</javadoc>
    </method>
    <method return="void" name="musicToggleBattleMode">
        <javadoc>&#xD;
Toggles between battle mode and normal mode.</javadoc>
    </method>
    <method return="void" name="player">
        <parameters type="int" name="setPlayer"/>
        <javadoc>&#xD;
With no arguments, outputs current player. otherwise, sets current player to given argument.&#xD;
&#xD;
@local&#xD;
&#xD;
@editor&#xD;
&#xD;
@see aom.scripting.xs.tr.Player#trPlayerSetActive(int) trPlayerSetActive(int)</javadoc>
    </method>
    <method return="void" name="fog">
        <parameters type="int" name="state"/>
        <javadoc>&#xD;
Toggles or sets LOS fog.&#xD;
&#xD;
@single&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="blackmap">
        <parameters type="int" name="state"/>
        <javadoc>&#xD;
Toggles or sets unexplored black map rendering.&#xD;
&#xD;
@single&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="resetDefaultPlayerColors">
        <javadoc>&#xD;
Reloads the default player colors from the XML file.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="setMinimapUnitFilter">
        <javadoc>&#xD;
Sets the minimap filter.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="startAutoPatcher">
        <parameters type="bool" name="manualMode"/>
        <javadoc>&#xD;
Start the auto patcher.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="cancelAutoPatcher">
        <javadoc>Cancel the auto patcher.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="confirmAutoPatcher">
        <javadoc>&#xD;
Used to tell auto patcher user pressed OK on exit or error dialog.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="playMovie">
        <javadoc>&#xD;
Plays movies from a playlist in the AVI directory.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="unitTransform">
        <parameters type="string" name="proto1"/>
        <parameters type="string" name="proto2"/>
        <javadoc>&#xD;
Replaces all of one with the other, via mutation.&#xD;
&#xD;
@since AoT&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="erosionClear">
        <javadoc>&#xD;
Clears the erosion from the land caused by buildings.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="researchByID">
        <parameters type="int" name="techID"/>
        <parameters type="int" name="researchingUnitID"/>
        <parameters type="int" name="playerID"/>
        <javadoc>&#xD;
Start the research of techID from ResearchingUnitID.&#xD;
&#xD;
If no player is specified, the current one is used.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="researchByName">
        <parameters type="string" name="techName"/>
        <javadoc>&#xD;
Start the research of the named technology from the first valid selected unit.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="researchCancelByID">
        <parameters type="int" name="techID"/>
        <parameters type="int" name="unitID"/>
        <parameters type="int" name="playerID"/>
        <javadoc>&#xD;
Cancel the research techID from UnitID.&#xD;
&#xD;
If no player is specified, the current one is used.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="click">
        <javadoc>&#xD;
Plays the default UI click sound.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="editMode">
        <parameters type="string" name="modeName"/>
        <javadoc>&#xD;
Changes the edit mode.&#xD;
&#xD;
@param modeName&#xD;
&lt;ul&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiBuildWallAtPointer">
        <javadoc>&#xD;
Instructs the currently selected unit(s) to build the current&#xD;
proto unit cursor building type at the pointer location,&#xD;
with wall-like endpoint behavior.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiSetGatherPointAtPointer">
        <javadoc>&#xD;
Sets the gather points for the selected unit(s) to the pointer position.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiClearGatherPoint">
        <javadoc>&#xD;
Clears the gather point for the selected unit(s), returning it to a default state.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiFlareAtPointer">
        <javadoc>&#xD;
Sends out a flare at the pointer position.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiGarrisonToPointer">
        <javadoc>&#xD;
Commands the selected unit(s) to garrison in a building at the pointer position.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiRepairAtPointer">
        <javadoc>&#xD;
Commands the selected unit(s) to repair the target building at the pointer position.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiEmpowerAtPointer">
        <javadoc>&#xD;
Commands the selected unit(s) to Empower the target building at the pointer position.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiStartScenarioTest">
        <javadoc>&#xD;
Start testing a scenario.&#xD;
&#xD;
@local&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="uiStopScenarioTest">
        <javadoc>&#xD;
Stop testing a scenario.&#xD;
&#xD;
@local&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="uiBuildMode">
        <parameters type="int" name="type"/>
        <javadoc>&#xD;
Enters building editMode and sets the proper cursor protounit, after verifying sufficient resources for the current player.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiHandleIdleBanner">
        <parameters type="string" name="typeName"/>
        <javadoc>&#xD;
Does the right thing.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiMessageBox">
        <parameters type="string" name="text"/>
        <parameters type="string" name="command"/>
        <javadoc>&#xD;
Pops up a message box with some text and an OK button.&#xD;
&#xD;
@param	text&#xD;
The text to show.&#xD;
&#xD;
@param 	command&#xD;
The command to execute when the OK button is pressed.&#xD;
&#xD;
@local&#xD;
&#xD;
@note This method can act as an eval(string command).</javadoc>
    </method>
    <method return="void" name="uiCopyToClipboard">
        <javadoc>&#xD;
Copies the brush selection to the clipboard.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiPasteFromClipboard">
        <javadoc>&#xD;
Pastes the contents of the clipboard to the brush selection.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiSetClipboardRotation">
        <parameters type="int" name="degrees"/>
        <javadoc>&#xD;
Sets the clipboard rotation amount.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiRotateClipboard">
        <parameters type="int" name="degrees"/>
        <javadoc>&#xD;
Rotate the clipboard by amount.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiEjectGarrisonedUnits">
        <javadoc>&#xD;
Sends an ejection command for the selected unit.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiEjectAtPointer">
        <javadoc>&#xD;
Sends an ejection command with waypoint for the selected unit.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiPatrolAtPointer">
        <javadoc>&#xD;
Sends an patrol order.</javadoc>
    </method>
    <method return="void" name="uiGuardAtPointer">
        <javadoc>&#xD;
Sends an guard order.</javadoc>
    </method>
    <method return="void" name="uiSetCurrentMix">
        <parameters type="int" name="index"/>
        <javadoc>&#xD;
Chooses which mix to use.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiSetCurrentWorldEditor">
        <parameters type="int" name="index"/>
        <javadoc>&#xD;
Chooses which WorldEditor to use.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiCreateNewWorldEditor">
        <javadoc>&#xD;
Creates a new world editor with the given name and type.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiApplyWorldEditor">
        <javadoc>&#xD;
Do an application of the current world editor at the cursor's location.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiEditCurrentWorldEditor">
        <javadoc>&#xD;
Bring up an editing dialog for current world editor.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uilgnoreNextKey">
        <javadoc>&#xD;
Used when activating a text box with a key to prevent that key from going into the text box too.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiClearMenu">
        <javadoc>&#xD;
Removes any dangling child menus off of the given gadget.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiDumpKeyMappings ">
        <parameters type="string" name="context"/>
        <javadoc>&#xD;
Prints all key mappings out to the console.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiDumpAIIUnitHotKeyMappings">
        <javadoc>&#xD;
Prints all hotkey mappings that create units to the console.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiDumpUnmappedKeys ">
        <parameters type="string" name="context"/>
        <javadoc>&#xD;
Prints all empty keys out to the console.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiFindKeyMapping ">
        <parameters type="string" name="keyname"/>
        <javadoc>&#xD;
Finds all key mappings for a given key.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiHandleUserTab ">
        <parameters type="string" name="listSel"/>
        <parameters type="string" name="parent"/>
        <javadoc>&#xD;
Handles toggle of user textures.</javadoc>
    </method>
    <method return="void" name="techFlash">
        <parameters type="int" name="techID"/>
        <parameters type="bool" name="flash"/>
        <javadoc>&#xD;
Turns technology buttons flashing on/off.&#xD;
&#xD;
@local&#xD;
&#xD;
@see aom.scripting.xs.tr.UserInterface#trUIFlashTech(int, bool) trUIFlashTech(int, bool)</javadoc>
    </method>
    <method return="void" name="trainFlash">
        <parameters type="int" name="protoID"/>
        <parameters type="bool" name="flash"/>
        <javadoc>&#xD;
Turns train buttons flashing on/off.&#xD;
&#xD;
@local&#xD;
&#xD;
@see aom.scripting.xs.tr.UserInterface#trUIFlashTrain(string, bool) trUIFlashTrain(string, bool)</javadoc>
    </method>
    <method return="void" name="categoryFlash">
        <parameters type="int" name="catID"/>
        <parameters type="bool" name="flash"/>
        <javadoc>&#xD;
Turns UI category flashing on/off.&#xD;
&#xD;
@local&#xD;
&#xD;
@see aom.scripting.xs.tr.UserInterface#trUIFlashCategory(int, bool) trUIFlashCategory(int, bool)</javadoc>
    </method>
    <method return="void" name="uiRepairBuilding">
        <javadoc>&#xD;
Repairs the selected building if it's in a failed state.</javadoc>
    </method>
    <method return="void" name="uiHideCursor">
        <javadoc>&#xD;
Hides the cursor. To reverse this, use a trigger command that leaves cinematic mode.&#xD;
&#xD;
@see aom.scripting.xs.tr.Cinematic#trLetterBox(bool) trLetterBox(false)&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiLeaveModeOnUnshift">
        <javadoc>&#xD;
Causes game to return to editMode("none") only when the shift hotkey is released.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiToggleTerrainPasteMode">
        <javadoc>&#xD;
This is not what you are looking for.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiAgeUpDialog">
        <parameters type="string" name="techName"/>
        <javadoc>&#xD;
Brings up the age advancement dialog with a suitable set of minor god choices.&#xD;
&#xD;
A techName="Age 2 Fake" seems to work fine for all ages.&#xD;
I have not yet been able to automatically choose 1 of the 2 minor gods through the console.&#xD;
&#xD;
@local 	Once a minor god is chosen reseachByID will probably be called,&#xD;
which will sync your choice with other computers.&#xD;
&#xD;
@see #researchByID(int, int, int)</javadoc>
    </method>
    <method return="void" name="uiReleaseDownKeys">
        <javadoc>&#xD;
Pops up all downed keys.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiSpewDownKeys">
        <javadoc>&#xD;
Echoes all down keys.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiShowFakeTechTree">
        <javadoc>&#xD;
Shows the fake-o technology tree with the current civilization.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiAIChatSelectLocation">
        <javadoc>&#xD;
Passes the location selected in the world to the AI Chat dialog.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="startRandomGame">
        <javadoc>&#xD;
Begins a new random game with default settings.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="startRandomGame2">
        <parameters type="string" name="filename"/>
        <parameters type="int" name="nbPlayers"/>
        <parameters type="int" name="randomSeed"/>
        <parameters type="string" name="scenarioFilename"/>
        <parameters type="bool" name="debug"/>
        <parameters type="int" name="teamCount"/>
        <parameters type="int" name="mapsize"/>
        <parameters type="int" name="resources"/>
        <javadoc>&#xD;
Begins a new random game with the given parameters.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="startRandomGame3">
        <parameters type="string" name="mapFilename"/>
        <parameters type="int" name="civ1ID"/>
        <parameters type="int" name="civ2ID"/>
        <javadoc>&#xD;
Begins a 2 player random map AI versus AI game with the given parameters.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="restartCurrentGame">
        <javadoc>&#xD;
Restarts current game.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="leaveGame">
        <javadoc>&#xD;
Destroys the world and returns to main menu.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="handlePostGame">
        <javadoc>&#xD;
Opens the postgame dialog if allowed.&#xD;
Won't work before the game ends.&#xD;
Use modes to bypass the restriction.&#xD;
&#xD;
@see Mode#subModeEnter(string, string) subModeEnter("simulation", "postgame")&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="showGameFromPostGame">
        <javadoc>&#xD;
Goes back to the default in-game screen.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="postGamePlayAgain">
        <javadoc>&#xD;
Restarts the current game from postgame.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="minimapZoomDelta">
        <parameters type="float" name="zoomDelta"/>
        <javadoc>&#xD;
Changes the zoom factor of the minimap up or down by that amount (remaining centered on the current view)&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="minimapZoom">
        <parameters type="float" name="zoom"/>
        <javadoc>&#xD;
Sets the zoom factor of the minimap.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="minimapRotateMode">
        <parameters type="int" name="mode"/>
        <javadoc>&#xD;
Changes the minimap rotation mode. No arguments means toggle.&#xD;
In mode A, the minimap is fixed and won't rotate. Instead, the camera box inside it will rotate.&#xD;
In mode B, the minimap is as you all know it.&#xD;
&#xD;
@note 	This command only seems to toggle the mode.&#xD;
Directly setting is does not seem to work anymore.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiSpecialPowerAtPointer">
        <javadoc>&#xD;
Use a special power at targeted location.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiSetSpecialPower">
        <parameters type="int" name="techNodeID"/>
        <javadoc>&#xD;
Specifies what god power will be used in the god power editmode.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiToggleGame">
        <javadoc>&#xD;
Turns off the game UI. To toggle back on, turn cinematic mode off with triggers.&#xD;
&#xD;
@see aom.scripting.xs.tr.Cinematic#trLetterBox(bool) trLetterBox(false)&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiToggleEditor">
        <javadoc>&#xD;
Turns off and on the scenario editor UI.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@local&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="uiRefreshEditorMenu">
        <javadoc>&#xD;
Reconstitutes the entire editor menu.&#xD;
&#xD;
@local&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="uiMinimizeMainBackground">
        <javadoc>&#xD;
Minimizes main UI and brings up the minimized UI.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiMaximizeMainBackground">
        <javadoc>&#xD;
Maximizes main UI.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiShowTributeDialog">
        <javadoc>&#xD;
Shows the tribute dialog.&#xD;
&#xD;
@note There does not seem to be an editor command to tribute resources directly.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiHideTributeDialog">
        <javadoc>&#xD;
Hides the tribute dialog.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiChangeCommandPage">
        <javadoc>&#xD;
Changes page of buttons, options.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiSetCombatCommands">
        <javadoc>&#xD;
Switches the command panel to show "normal commands".&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiToggleCombatCommands">
        <javadoc>&#xD;
Toggles the command panel to show either "normal commands" or "combat commands".&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiNewScenario">
        <javadoc>&#xD;
Creates a new blank scenario.&#xD;
&#xD;
World size and other options are defined by their corresponding configs.&#xD;
&#xD;
@local&#xD;
&#xD;
@see EngineConfig#worldSizeX&#xD;
@see EngineConfig#worldSizeZ</javadoc>
    </method>
    <method return="void" name="setMultiPlayerSetupFile">
        <parameters type="string" name="file"/>
        <javadoc>&#xD;
Sets a custom UI definition file for the multiplayer setup screen.&#xD;
Default is uimpsetupfinal.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="scoreUpdate">
        <javadoc>&#xD;
Causes score to update even if it isn't supposed to yet, time wise.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="toggleScore">
        <javadoc>&#xD;
Handles the score toggling.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="toggleTime">
        <javadoc>&#xD;
Handles the time display toggling.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="exitMPSetupSubScreen">
        <javadoc>&#xD;
Leave the current MP screen and return to the MP setup menu.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="playerResign">
        <javadoc>&#xD;
Resigns the currently controlled player.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="showGameMenu">
        <javadoc>&#xD;
Show the in-game menu.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="hideGameMenu">
        <javadoc>&#xD;
Hide the in-game menu.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiInitOptionsScreenProfileEditDialog">
        <javadoc>&#xD;
Initializes the Profile Edit Dialog inside the OptionsScreen.&#xD;
&#xD;
@local&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiMultiplayerSave">
        <javadoc>&#xD;
Shows the save dialog, but only when in a multiplayer game&#xD;
(and stops playing stupid music at 11pm).&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="dropToMainMenu">
        <javadoc>&#xD;
Drop back to the main menu.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiShowObjectivesDialog">
        <javadoc>&#xD;
Shows the objectives dialog, if available.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiShowVoteDialog">
        <javadoc>&#xD;
Shows the vote dialog.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="showBrowser">
        <parameters type="bool" name="show"/>
        <javadoc>&#xD;
Shows or hides the embedded browser.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="uiToggleObserverMode">
        <parameters type="int" name="ofPlayer"/>
        <javadoc>&#xD;
Toggle the observer Mode Tab. If a valid index is given, it toggles it to that specific index. Requires observer mode.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="uiChangeObserverPerspective">
        <parameters type="int" name="ofPlayer"/>
        <javadoc>&#xD;
If a valid index is given, changes the perspective/FOW of the observer player to the indexed player.&#xD;
&#xD;
@since AoM:EE&#xD;
@param player</javadoc>
    </method>
    <method return="void" name="uiToggleObserverFOW">
        <parameters type="bool" name="reveal"/>
        <javadoc>&#xD;
Reveals or covers up the entire map's FOW.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="uploadDesyncLog">
        <javadoc>&#xD;
Forces a pre-prepared desync log file to upload. Does nothing if a desync has not occurred.&#xD;
&#xD;
@since AoM:EE</javadoc>
    </method>
    <method return="void" name="uiOpenScenarioBrowser">
        <javadoc>&#xD;
Open a scenario from the scenario directory.</javadoc>
    </method>
    <method return="void" name="uiSaveScenarioBrowser">
        <javadoc>&#xD;
Save a scenario to the scenario directory.</javadoc>
    </method>
    <method return="void" name="uiSaveAsScenarioBrowser">
        <javadoc>&#xD;
Save a scenario to the scenario directory.</javadoc>
    </method>
    <method return="void" name="uiScenarioLoad">
        <javadoc>&#xD;
Load a scenario, checking dirty bit on world.</javadoc>
    </method>
    <method return="void" name="uiOpenSavedGameBrowser">
        <javadoc>&#xD;
Open a game from the saved game directory.</javadoc>
    </method>
    <method return="void" name="uiSaveSavedGameBrowser">
        <javadoc>&#xD;
Save a game to the saved game directory.</javadoc>
    </method>
    <method return="void" name="uiOpenRecordGameBrowser">
        <javadoc>&#xD;
Open a record game from the saved game directory.</javadoc>
    </method>
    <method return="void" name="saveGame">
        <parameters type="string" name="filename"/>
        <javadoc>&#xD;
Saves out a game in progress.</javadoc>
    </method>
    <method return="void" name="saveScenario">
        <parameters type="string" name="filename"/>
        <javadoc>&#xD;
Saves out a scenario file.</javadoc>
    </method>
    <method return="void" name="loadGame">
        <parameters type="string" name="filename"/>
        <javadoc>&#xD;
Loads in a saved game.</javadoc>
    </method>
    <method return="void" name="loadScenario">
        <parameters type="string" name="filename"/>
        <javadoc>&#xD;
Loads in a scenario file.</javadoc>
    </method>
    <method return="void" name="loadMix">
        <parameters type="string" name="filename"/>
        <javadoc>&#xD;
Re-scans all open mix files for new parameters.&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="reloadMixes">
        <javadoc>&#xD;
Loads in an editor terrain/unit mix file.&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="loadRecentFile">
        <parameters type="string" name="filename"/>
        <javadoc>&#xD;
Loads the file named, interpreting whether it is a scenario, saved game, etc. dynamically.</javadoc>
    </method>
    <method return="void" name="uiLoadTriggers">
        <parameters type="string" name="filename"/>
        <javadoc>&#xD;
Replace all triggers with those loaded from the given file.</javadoc>
    </method>
    <method return="void" name="uiSaveTriggers">
        <parameters type="string" name="filename"/>
        <javadoc>&#xD;
Save all triggers to the given file.</javadoc>
    </method>
    <method return="void" name="uiImportTriggers">
        <javadoc>&#xD;
Opens a dialog to load triggers from a file, replacing all existing ones.</javadoc>
    </method>
    <method return="void" name="doTriggerImport">
        <javadoc>&#xD;
Load some triggers.</javadoc>
    </method>
    <method return="void" name="uiExportTriggers">
        <javadoc>&#xD;
Opens a dialog to save all triggers to a file</javadoc>
    </method>
    <method return="void" name="uiCycleGadget">
        <parameters type="int" name="delta"/>
        <javadoc>Cycles through the active child gadget of a deluxe gadget.</javadoc>
    </method>
    <method return="void" name="uiCloseFieldSet">
        <javadoc>Closes (as if clicked on the close button) any active field set.</javadoc>
    </method>
    <method return="void" name="uiCloseDialog">
        <javadoc>Closes (as if clicked on the close button) any active dialog.</javadoc>
    </method>
    <method return="void" name="uiCycleCurrentActivate">
        <javadoc>Acts like the current cycle gadget has been pressed.&#xD;
&lt;p&gt;&#xD;
Does not seem to work any more in the extended edition.</javadoc>
    </method>
    <method return="void" name="gadgetScrollUp">
        <javadoc>Scrolls the gadget up one unit.&#xD;
@deprecated</javadoc>
    </method>
    <method return="void" name="gadgetScrolIDown">
        <javadoc>Scrolls the gadget up one unit.&#xD;
@deprecated</javadoc>
    </method>
    <method return="void" name="gadgetscrollLeft">
        <javadoc>Scrolls the gadget to the left one unit.&#xD;
@deprecated</javadoc>
    </method>
    <method return="void" name="gadgetScrollRight">
        <javadoc>Scrolls the gadget to the Right one unit.&#xD;
@deprecated</javadoc>
    </method>
    <method return="void" name="gadgetWheelScroll">
        <javadoc>Scrolling function for hooking wheel to gadget scrolling.</javadoc>
    </method>
    <method return="void" name="gadgetReal">
        <parameters type="string" name="name"/>
        <javadoc>Shows the requested gadget.</javadoc>
    </method>
    <method return="void" name="gadgetUnreal">
        <parameters type="string" name="name"/>
        <javadoc>Hides the named gadget.</javadoc>
    </method>
    <method return="void" name="gadgetRealIfNotMP">
        <parameters type="string" name="name"/>
        <javadoc>Shows the requested gadget if the game made is not multiplayer.</javadoc>
    </method>
    <method return="void" name="gadgetToggle">
        <parameters type="string" name="name"/>
        <javadoc>Toggles the visibility of the named gadget.</javadoc>
    </method>
    <method return="void" name="gadgetRefresh">
        <parameters type="string" name="name"/>
        <javadoc>Refresh the contents of the named gadget.</javadoc>
    </method>
    <method return="void" name="gadgetFlash">
        <parameters type="string" name="name"/>
        <parameters type="bool" name="flash"/>
        <javadoc>Turns gadget flashing on/off.</javadoc>
    </method>
    <method return="void" name="uiCreateNumberGroup">
        <parameters type="int" name="group"/>
        <javadoc>Creates a number group with the currently selected units.</javadoc>
    </method>
    <method return="void" name="uiClearNumberGroup">
        <parameters type="int" name="group"/>
        <javadoc>Erases the given number group.</javadoc>
    </method>
    <method return="void" name="uiSelectNumberGroup">
        <parameters type="int" name="group"/>
        <javadoc>Selects the units in the given number group.</javadoc>
    </method>
    <method return="void" name="uiAddSelectNumberGroup">
        <parameters type="int" name="group"/>
        <javadoc>Adds the units in the given number group to current selection.</javadoc>
    </method>
    <method return="void" name="uiRemoveFromAnyNumberGroup">
        <javadoc>Removes current selection from any army.</javadoc>
    </method>
    <method return="void" name="uiLookAtNumberGroup">
        <parameters type="int" name="group"/>
        <javadoc>Moves the camera to see the given number group.</javadoc>
    </method>
    <method return="void" name="uiHelpAtPointer">
        <javadoc>&#xD;
Opens a help topic related to the object at the pointer position.</javadoc>
    </method>
    <method return="void" name="uiUnitDetailHelp">
        <parameters type="int" name="protoID"/>
        <parameters type="int" name="civID"/>
        <javadoc>&#xD;
Brings up the detail help UI for the given protoID.&#xD;
If no protoID is provided (-1), help for the selected unit is shown.</javadoc>
    </method>
    <method return="void" name="uiTechDetailHelp">
        <parameters type="int" name="techID"/>
        <parameters type="int" name="civID"/>
        <javadoc>&#xD;
Brings up the detail help UI for the given technology node ID.</javadoc>
    </method>
    <method return="void" name="uiTopicDetailHelp">
        <parameters type="string" name="topicName"/>
        <javadoc>&#xD;
Brings up the detail help UI for the given help topic.</javadoc>
    </method>
    <method return="void" name="uiLastDetailHelp">
        <javadoc>&#xD;
Goes back to the most recent help entry.</javadoc>
    </method>
    <method return="void" name="help">
        <parameters type="string" name="commandSubstring"/>
        <javadoc>&#xD;
Prints a list of all console commands that contain the given substring.&#xD;
&#xD;
@deprecated</javadoc>
    </method>
    <method return="void" name="helpPrefix">
        <parameters type="string" name="commandPrefix"/>
        <javadoc>&#xD;
Prints a list of all console commands that start with the given prefix.&#xD;
&#xD;
@deprecated</javadoc>
    </method>
    <method return="void" name="helpText">
        <parameters type="string" name="helptextSubstring"/>
        <javadoc>&#xD;
Prints a list of all console commands whose helptext contains the given substring.</javadoc>
    </method>
    <method return="void" name="databaseHelp">
        <parameters type="string" name="type"/>
        <parameters type="string" name="name"/>
        <javadoc>&#xD;
Does simple queries on possible things in the DB.</javadoc>
    </method>
    <method return="void" name="sunIncreaseInclination">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the increase sun inclination key has gone up/down.</javadoc>
    </method>
    <method return="void" name="sunDecreaseInclination">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the decrease sun inclination key has gone up/down.</javadoc>
    </method>
    <method return="void" name="sunIncreaseRotation">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the increase sun rotation key has gone up/down.</javadoc>
    </method>
    <method return="void" name="sunDecreaseRotation">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the decrease sun rotation key has gone up/down.</javadoc>
    </method>
    <method return="void" name="fadeToColor">
        <parameters type="int" name="r"/>
        <parameters type="int" name="g"/>
        <parameters type="int" name="b"/>
        <parameters type="int" name="duration"/>
        <parameters type="int" name="delay"/>
        <parameters type="int" name="inout"/>
        <javadoc>Fade in/out using color specified.</javadoc>
    </method>
    <method return="void" name="setGameFadeIn">
        <parameters type="int" name="r"/>
        <parameters type="int" name="g"/>
        <parameters type="int" name="b"/>
        <parameters type="int" name="duration"/>
        <parameters type="int" name="delay"/>
        <parameters type="int" name="inout"/>
        <javadoc>Turn fade in on/off, set color duration.</javadoc>
    </method>
    <method return="void" name="uiApplyLightingSet">
        <parameters type="int" name="index"/>
        <javadoc>Applies a Lighting Set.</javadoc>
    </method>
    <method return="void" name="ambientColor">
        <parameters type="int" name="r"/>
        <parameters type="int" name="g"/>
        <parameters type="int" name="b"/>
        <javadoc>Set ambient color to given RGB (0-255)</javadoc>
    </method>
    <method return="void" name="ambientGetColor">
        <javadoc>Get ambient color.</javadoc>
    </method>
    <method return="void" name="sunColor">
        <parameters type="int" name="r"/>
        <parameters type="int" name="g"/>
        <parameters type="int" name="b"/>
        <javadoc>Set sun color to given RGB (0-255)</javadoc>
    </method>
    <method return="void" name="sunGetColor">
        <javadoc>Get sun color.</javadoc>
    </method>
    <method return="void" name="fakeSpecularSunColor">
        <parameters type="int" name="r"/>
        <parameters type="int" name="g"/>
        <parameters type="int" name="b"/>
        <javadoc>Set fake specular sun color (for water bumps) to given RGB (0-255)</javadoc>
    </method>
    <method return="void" name="fakeSpecularSunGetColor">
        <javadoc>Get the fake specular sun color.</javadoc>
    </method>
    <method return="void" name="applyLightingSet">
        <parameters type="string" name="name"/>
        <javadoc>Applies a Lighting set.</javadoc>
    </method>
    <method return="void" name="saveLightingSet">
        <parameters type="string" name="name"/>
        <javadoc>Saves the current status of lighting values as a set.</javadoc>
    </method>
    <method return="void" name="enterRecordGameMode">
        <parameters type="string" name="name"/>
        <javadoc>&#xD;
Enter the mode used to play recorded games.&#xD;
Don't expect this to work properly.</javadoc>
    </method>
    <method return="void" name="modeEnter">
        <parameters type="string" name="mode"/>
        <javadoc>Enters the named mode.</javadoc>
    </method>
    <method return="void" name="subModeEnter">
        <parameters type="string" name="mode"/>
        <parameters type="string" name="subMode"/>
        <javadoc>Enters the named submode (of the main mode).</javadoc>
    </method>
    <method return="void" name="subModeLeave">
        <parameters type="string" name="mode"/>
        <parameters type="string" name="subMode"/>
        <javadoc>Leaves the named submode (of the main mode).</javadoc>
    </method>
    <method return="void" name="subModeClear">
        <parameters type="string" name="mode"/>
        <javadoc>Leaves all active submodes of the named mode.</javadoc>
    </method>
    <method return="void" name="subModeToggle">
        <parameters type="string" name="mode"/>
        <parameters type="string" name="subMode"/>
        <javadoc>Changes the state of the named submode (of the main mode).</javadoc>
    </method>
    <method return="void" name="subModeToggleIfNotMP">
        <parameters type="string" name="mode"/>
        <parameters type="string" name="subMode"/>
        <javadoc>Changes the state of the named submode (of the main mode), but only if we're not in a multiplayer game.</javadoc>
    </method>
    <method return="void" name="subModeToggleBetween">
        <parameters type="string" name="mode"/>
        <parameters type="string" name="subMode1"/>
        <parameters type="string" name="subMode2"/>
        <javadoc>Toggles between the two submodes (of the main mode).</javadoc>
    </method>
    <method return="void" name="subModeToggleBetweenIfNotMP">
        <parameters type="string" name="mode"/>
        <parameters type="string" name="subMode1"/>
        <parameters type="string" name="subMode2"/>
        <javadoc>Toggles between the two submodes (of the main mode), but only if we're not in a multiplayer game.</javadoc>
    </method>
    <method return="void" name="doMPSetup">
        <parameters type="bool" name="useESO"/>
        <javadoc>&#xD;
Enters LAN/DirectIP if useESO is false, else shows ESO login screen.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="mpCustomScreenSetSavegame">
        <parameters type="string" name="name"/>
        <javadoc>&#xD;
Sets the saved game template to use.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="friendsAdd">
        <javadoc>&#xD;
Add a user to your friends list. Does not work.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="friendsRemove">
        <javadoc>&#xD;
Remove a user from your friends list.&#xD;
&#xD;
@local&#xD;
&#xD;
@note Used internally, I can't get this to work manually.</javadoc>
    </method>
    <method return="void" name="friendsConnect">
        <javadoc>&#xD;
[re]connect to friends server.&#xD;
&#xD;
@local&#xD;
&#xD;
@note Used internally, I can't get this to work manually.</javadoc>
    </method>
    <method return="void" name="friendsDisconnect">
        <javadoc>&#xD;
Disconnect from friends server.&#xD;
&#xD;
@local&#xD;
&#xD;
@note Used internally, I can't get this to work manually.</javadoc>
    </method>
    <method return="void" name="friendsMessage">
        <javadoc>&#xD;
Send a message to a friend.&#xD;
&#xD;
@sync The message is sent to the recipient.&#xD;
&#xD;
@note Used internally, I can't get this to work manually.</javadoc>
    </method>
    <method return="void" name="friendsInvite">
        <javadoc>&#xD;
Send an invite request to a friend.&#xD;
&#xD;
@sync The invite is sent to the recipient.&#xD;
&#xD;
@note Used internally, I can't get this to work manually.</javadoc>
    </method>
    <method return="void" name="findMatch">
        <parameters type="string" name="hashCode"/>
        <parameters type="int" name="currentPlayerCount"/>
        <parameters type="int" name="totalPlayerCount"/>
        <parameters type="int" name="averagePlayerRating"/>
        <javadoc>&#xD;
Use matchmaking service to find a matching peer.&#xD;
&#xD;
@sync The request is sent to the Matchmaking Service.&#xD;
&#xD;
@note Used internally, I can't get this to work manually.</javadoc>
    </method>
    <method return="void" name="matchUpdateStartFrequency">
        <parameters type="string" name="hashCode"/>
        <javadoc>&#xD;
Test updating the start frequency for a specific hash code.&#xD;
&#xD;
@sync The request is sent to the Matchmaking Service.&#xD;
&#xD;
@note Used internally, I can't get this to work manually.</javadoc>
    </method>
    <method return="void" name="migrateSession">
        <javadoc>&#xD;
Migrate the current session to a new one.&#xD;
&#xD;
@sync The request is sent to the Matchmaking Service.&#xD;
&#xD;
@note Used internally, I can't get this to work manually.</javadoc>
    </method>
    <method return="void" name="broadcastGame">
        <javadoc>&#xD;
Start broadcasting (a.k.a. hosting) this game.&#xD;
&#xD;
@sync The request is sent to the Gamelist Service.&#xD;
&#xD;
@note Used internally, I can't get this to work manually.</javadoc>
    </method>
    <method return="void" name="receiveGame">
        <parameters type="string" name="ipAddress_MachineName"/>
        <parameters type="string" name="optionalFileNameForRecording"/>
        <javadoc>&#xD;
Start receiving a broadcasted game.</javadoc>
    </method>
    <method return="void" name="uiSelectionButtonDown">
        <javadoc>&#xD;
Indicates that selection button has been pressed.&#xD;
When activated, a white selection rectangle is drawn on the screen,&#xD;
allowing the player to select multiple units.</javadoc>
    </method>
    <method return="void" name="uiSelectionButtonUp">
        <javadoc>&#xD;
Indicates that selection button has been released.&#xD;
When released, the selection rectangle disappears.</javadoc>
    </method>
    <method return="void" name="uiDoubleClickSelect">
        <parameters type="int" name="add"/>
        <parameters type="bool" name="checkAction"/>
        <javadoc>&#xD;
Double click select at pointer location.&#xD;
A doubleclick action selects all units of the same type as the unit under the pointer.&#xD;
&#xD;
@param	add&#xD;
If add == 1, the previous selected is extended with this selection.&#xD;
Else, the previous selection is dropped.&#xD;
&#xD;
@param 	checkAction&#xD;
When checkAction is true, only units that are performing the same action (idle, moving, ...) are selected.</javadoc>
    </method>
    <method return="void" name="uiAddSelectionButtonDown">
        <javadoc>&#xD;
Indicates that the add selection button has been pressed.</javadoc>
    </method>
    <method return="void" name="uiAddSelectionButtonUp">
        <javadoc>&#xD;
Indicates that the add selection button has been released.</javadoc>
    </method>
    <method return="void" name="uiToggleSelectionButton">
        <javadoc>&#xD;
Toggles the selection button state (pressed or not).</javadoc>
    </method>
    <method return="void" name="uiMoveSelectionButtonDown">
        <javadoc>&#xD;
Indicates that selection button has been pressed.</javadoc>
    </method>
    <method return="void" name="uiMoveSelectionButtonUp">
        <javadoc>&#xD;
Indicates that selection button has been released.</javadoc>
    </method>
    <method return="void" name="uiMoveSelectionAddButtonDown">
        <javadoc>&#xD;
Indicates that selection button has been pressed.</javadoc>
    </method>
    <method return="void" name="uiMoveSelectionAddButtonUp">
        <javadoc>&#xD;
Indicates that selection button has been released.</javadoc>
    </method>
    <method return="void" name="uiSelectWaterAtPointer">
        <javadoc>&#xD;
Selects water at pointer location.&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="uiUnSelectWater">
        <javadoc>&#xD;
Deselects currently selected water.&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="uiClearSelection">
        <javadoc>&#xD;
Deselects all selected units.</javadoc>
    </method>
    <method return="void" name="uiFindIdleType">
        <parameters type="string" name="typeName"/>
        <javadoc>&#xD;
Finds the next idle unit of the given type in the arbitrary order of unit ID, so that it can be called repeatedly to cycle.</javadoc>
    </method>
    <method return="void" name="uiFindTownBellTC">
        <javadoc>&#xD;
Finds the next town center that has the town bell active, so that it can be called repeatedly to cycle.</javadoc>
    </method>
    <method return="void" name="uiFindType">
        <parameters type="string" name="typeName"/>
        <javadoc>&#xD;
Finds the next unit (idle or not) of the given type in the arbitrary order of unit ID, so that it can be called repeatedly to cycle.</javadoc>
    </method>
    <method return="void" name="areaIncrementAreaToRender">
        <parameters type="int" name="playerID"/>
        <javadoc>Increments the area to render.</javadoc>
    </method>
    <method return="void" name="terrainFilter">
        <javadoc>Filters the entire terrain.</javadoc>
    </method>
    <method return="void" name="terrainFilterArea">
        <parameters type="int" name="X1"/>
        <parameters type="int" name="Y1"/>
        <parameters type="int" name="X2"/>
        <parameters type="int" name="Y2"/>
        <javadoc>Filters a sub-area of the terrain.</javadoc>
    </method>
    <method return="void" name="terrainFlatten">
        <javadoc>Flattens the entire terrain.</javadoc>
    </method>
    <method return="void" name="terrainFlattenArea">
        <parameters type="int" name="X1"/>
        <parameters type="int" name="Y1"/>
        <parameters type="int" name="X2"/>
        <parameters type="int" name="Y2"/>
        <javadoc>Flattens a sub-area of the terrain.</javadoc>
    </method>
    <method return="void" name="terrainSetType">
        <parameters type="int" name="type"/>
        <javadoc>Sets the terrain type to paint.</javadoc>
    </method>
    <method return="void" name="terrainSetSubtype">
        <parameters type="int" name="type"/>
        <javadoc>Sets the terrain subtype to paint.</javadoc>
    </method>
    <method return="void" name="terrainPaint">
        <javadoc>Paint whole terrain with given texture.</javadoc>
    </method>
    <method return="void" name="terrainPaintMix">
        <javadoc>Paint whole terrain with given mix name.</javadoc>
    </method>
    <method return="void" name="terrainAmbient">
        <parameters type="int" name="r"/>
        <parameters type="int" name="g"/>
        <parameters type="int" name="b"/>
        <javadoc>Set terrain ambient reflectivity to the given RGB (0-255)</javadoc>
    </method>
    <method return="void" name="terrainGetAmbient">
        <javadoc>Get terrain ambient reflectivity.</javadoc>
    </method>
    <method return="void" name="terrainResizeSubtype">
        <parameters type="int" name="delta"/>
        <javadoc>Resize current terrain subtype.</javadoc>
    </method>
    <method return="void" name="terrainAdjustGlobalHeight">
        <parameters type="float" name="meters"/>
        <javadoc>Adjusts (raise/lower) the terrain height by the specified meters.</javadoc>
    </method>
    <method return="void" name="terrainPasteBufferSave">
        <parameters type="string" name="filename"/>
        <javadoc>Saves the current terrain paste buffer.</javadoc>
    </method>
    <method return="void" name="terrainPasteBufferLoad">
        <parameters type="string" name="filename"/>
        <javadoc>Loads a terrain paste buffer.</javadoc>
    </method>
    <method return="void" name="uiIncreaseTextureDensity">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the increase texture density button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiDecreaseTextureDensity">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the decrease texture density button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiChangeElevationToSample">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the change elevation to sample button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiSampleElevationAtPointer">
        <javadoc>Samples elevation height at pointer.</javadoc>
    </method>
    <method return="void" name="uiSampleCliffElevationAtPointer">
        <javadoc>Samples C lift elevation height at pointer.</javadoc>
    </method>
    <method return="void" name="uiPaintTerrainToSample">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the sample terrain button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiSampleTerrainAtPointer">
        <javadoc>Samples terrain type at pointer.</javadoc>
    </method>
    <method return="void" name="uiRaiseElevation">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the raise elevation button has gone up. down.</javadoc>
    </method>
    <method return="void" name="uiLowerElevation">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the l o we r elevation button has gone up. down.</javadoc>
    </method>
    <method return="void" name="uiSmooth">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the smooth button has gone up. down.</javadoc>
    </method>
    <method return="void" name="uiPaintWater">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the paint water button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiPaintWaterArea">
        <parameters type="int" name="keyState"/>
        <javadoc>Painting water area.</javadoc>
    </method>
    <method return="void" name="uiPaintCliff">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the paint cliff button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiTerrainSelection">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the terrain selection button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiRaiseTerrainSelection">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the raise terrain selection button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiLowerTerrainSelection">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the lower terrain selection button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiFlattenTerrainSelection">
        <javadoc>F latte n the current terrain selection.</javadoc>
    </method>
    <method return="void" name="uiFilterTerrainSelection">
        <javadoc>Filter the current terrain selection.</javadoc>
    </method>
    <method return="void" name="uiRoughen">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the roughen button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiPaint">
        <parameters type="bool" name="paint"/>
        <parameters type="bool" name="absolute"/>
        <javadoc>Indicates that the paint button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiPaintTerrainOverlay">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the paint terrain overlay button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiRemoveTerrainOverlay">
        <javadoc>Removes the painted terrain overlay at the given mouse position.</javadoc>
    </method>
    <method return="void" name="uiSetTerrainOverlayColor">
        <parameters type="float" name="r"/>
        <parameters type="float" name="g"/>
        <parameters type="float" name="b"/>
        <javadoc>Sets the terrain overlay color to the given (R,G,B) color.</javadoc>
    </method>
    <method return="void" name="uiCoverTerrainWithWater">
        <parameters type="float" name="waterHeight"/>
        <parameters type="float" name="depth"/>
        <parameters type="string" name="waterName"/>
        <javadoc>Flattens terrain and paints water over the entire map.</javadoc>
    </method>
    <method return="void" name="uiSetCliffType">
        <parameters type="string" name="cliffName"/>
        <javadoc>Sets the cliff type by name.</javadoc>
    </method>
    <method return="void" name="uiSetCliffTypeNum">
        <javadoc>Sets the cliff type by index.</javadoc>
    </method>
    <method return="void" name="uiSetWaterType">
        <parameters type="string" name="waterName"/>
        <javadoc>Sets the water type by name.</javadoc>
    </method>
    <method return="void" name="uiSetWaterTypeNum">
        <javadoc>Sets the water type by index.</javadoc>
    </method>
    <method return="void" name="uiSetForestType">
        <parameters type="string" name="forestName"/>
        <javadoc>Sets the forest type by name.</javadoc>
    </method>
    <method return="void" name="uiSetForestJype">
        <javadoc>Sets the forest type by index.</javadoc>
    </method>
    <method return="void" name="uiPaintWaterObjects">
        <javadoc>Paint objects on the currently selected water.</javadoc>
    </method>
    <method return="void" name="uiRaiseWater">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the raise water button has gone up/down.</javadoc>
    </method>
    <method return="void" name="uiLowerWater">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the lower water button has gone up/down.</javadoc>
    </method>
    <method return="void" name="rotateWaterLeft">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the rotate water left button has gone up/down.</javadoc>
    </method>
    <method return="void" name="rotateWaterRight">
        <parameters type="int" name="keyState"/>
        <javadoc>Indicates that the rotate water right button has gone up/down.</javadoc>
    </method>
    <method return="void" name="brushSize">
        <parameters type="int" name="size"/>
        <javadoc>&#xD;
Sets brush size.</javadoc>
    </method>
    <method return="void" name="brushCircularSize">
        <parameters type="float" name="value"/>
        <javadoc>&#xD;
Sets the circular brush size.</javadoc>
    </method>
    <method return="void" name="uiSetBrushType">
        <parameters type="string" name="name"/>
        <parameters type="float" name="param1"/>
        <parameters type="float" name="param2"/>
        <parameters type="float" name="param3"/>
        <parameters type="float" name="param4"/>
        <javadoc>&#xD;
Makes the current brush based on the name and parameters.</javadoc>
    </method>
    <method return="void" name="uiChangeBrushType">
        <parameters type="string" name="name"/>
        <javadoc>&#xD;
Changes the brush to the named type.</javadoc>
    </method>
    <method return="void" name="uiChangeBrushSize">
        <parameters type="float" name="param1"/>
        <parameters type="float" name="param2"/>
        <parameters type="float" name="param3"/>
        <parameters type="float" name="param4"/>
        <javadoc>&#xD;
Changes the size of the current brush.</javadoc>
    </method>
    <method return="void" name="uiScrollBrushSize">
        <javadoc>&#xD;
Increment the size of the current brush up/down.</javadoc>
    </method>
    <method return="void" name="uiToggleBrushMask">
        <javadoc>&#xD;
This is not what you are looking for.</javadoc>
    </method>
    <method return="void" name="uiOpenCameraTrackBrowser">
        <javadoc>Open a camera track from the data directory.</javadoc>
    </method>
    <method return="void" name="uiSaveCameraTrackBrowser">
        <javadoc>Save a camera track to the data directory.</javadoc>
    </method>
    <method return="void" name="trackLoad">
        <parameters type="string" name="filename"/>
        <javadoc>Loads a camera track and makes it current.</javadoc>
    </method>
    <method return="void" name="trackSave">
        <parameters type="string" name="filename"/>
        <javadoc>Saves the current camera track.</javadoc>
    </method>
    <method return="void" name="trackClear">
        <javadoc>Clears all tracks.</javadoc>
    </method>
    <method return="void" name="trackStepForward">
        <javadoc>Steps the current camera track 1 step forward.</javadoc>
    </method>
    <method return="void" name="trackStepBackward">
        <javadoc>Steps the current camera track 1 step backward.</javadoc>
    </method>
    <method return="void" name="trackToggleShow">
        <javadoc>Toggles rendering of the camera track on and off.</javadoc>
    </method>
    <method return="void" name="trackAddWaypoint">
        <javadoc>Adds the camera's current position and orientation to the current camera track.</javadoc>
    </method>
    <method return="void" name="trackEditWaypoint">
        <javadoc>Edits the currently selected camera track.</javadoc>
    </method>
    <method return="void" name="trackSetSelectedWaypoint">
        <parameters type="int" name="index"/>
        <javadoc>Sets the current waypoint to the button with the same index.</javadoc>
    </method>
    <method return="void" name="trackGotoSelectedWaypoint">
        <parameters type="int" name="index"/>
        <javadoc>Moves the camera to the current waypoint.</javadoc>
    </method>
    <method return="void" name="trackRemoveWaypoint">
        <javadoc>Removes the most recently added track waypoint from the current camera track.</javadoc>
    </method>
    <method return="void" name="trackInsert">
        <javadoc>Adds a new camera track.</javadoc>
    </method>
    <method return="void" name="trackRemove">
        <javadoc>Removes selected track.</javadoc>
    </method>
    <method return="void" name="trackPlay">
        <parameters type="int" name="duration"/>
        <parameters type="int" name="eventID"/>
        <javadoc>&#xD;
Plays the current track, with no arguments uses current duration, otherwise sets duration.&#xD;
&#xD;
@see aom.scripting.xs.tr.Triggers#trEventFire(int) trEventFire(int)&#xD;
@see Unit#uiTransformSelectedUnit(string) uiTransformSelectedUnit(string)&#xD;
@see aom.scripting.xs.tr.UserInterface#trRenderSnow(float) trRenderSnow(float)&#xD;
&#xD;
@local 	The trigger event is only fired on the local computer.&#xD;
Only use this with trigger that either autosync (e.g. uiTransformSelectedUnit(string))&#xD;
or that don't impact the gameplay (e.g. trRenderSnow(float)).&#xD;
&#xD;
@note This function provides the only way to fire trigger events directly from the console.</javadoc>
    </method>
    <method return="void" name="trackPause">
        <javadoc>Pauses the current camera track.</javadoc>
    </method>
    <method return="void" name="trackStop">
        <javadoc>Stops the current camera track.</javadoc>
    </method>
    <method return="void" name="trackAdvance">
        <javadoc>Advances the camera track to a specific location.</javadoc>
    </method>
    <method return="void" name="trackGotoSelectedEvent">
        <parameters type="int" name="index"/>
        <javadoc>Moves the camera to the current event.</javadoc>
    </method>
    <method return="void" name="unitData">
        <parameters type="int" name="UnitID"/>
        <javadoc>&#xD;
Spews database values on the specified unit or the selected unit if no argument.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="unitSetVariation">
        <parameters type="int" name="variation"/>
        <parameters type="int" name="unitID"/>
        <javadoc>&#xD;
Sets the current variation of the given UnitID (current selected unit(s) if unitID is -1).&#xD;
&#xD;
@local&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="unitIncVariation">
        <parameters type="int" name="unitID"/>
        <javadoc>&#xD;
Increments the current variation of the given unitID (current selected unit(s) if unitID is -1).&#xD;
&#xD;
@local&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="unitDecVariation">
        <parameters type="int" name="unitID"/>
        <javadoc>&#xD;
Decrements the current variation of the given unitID (current selected unit(s) if unitID is -1).&#xD;
&#xD;
@local&#xD;
&#xD;
@editor</javadoc>
    </method>
    <method return="void" name="unitSetStanceAggressive">
        <javadoc>&#xD;
Sets the unit stance for all selected units to aggressive.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="unitSetStanceDefensive">
        <javadoc>&#xD;
Sets the unit stance for all selected units to defensive.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="unitSetStancePassive">
        <javadoc>&#xD;
Sets the unit stance for all selected units to passive.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="unitSetFormationDefault">
        <javadoc>&#xD;
Sets the formation for all selected units to line.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="unitSetFormationBox">
        <javadoc>&#xD;
Sets the formation for all selected units to box.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="unitSetFormationMixed">
        <javadoc>&#xD;
Sets the formation for all selected units to mixed.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="unitSetFormationSpread">
        <javadoc>&#xD;
Sets the formation for all selected units to spread.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="unitTownBell">
        <javadoc>&#xD;
Issues a town bell for the selected unit(s).&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="unitReturnToWork">
        <javadoc>&#xD;
Issues a return to work for the selected unit(s).&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiSetProtoID">
        <parameters type="int" name="type"/>
        <javadoc>&#xD;
Sets the cursor to a ProtoUnitID.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiIncPlaceVariation">
        <javadoc>Increments the variation to place.</javadoc>
    </method>
    <method return="void" name="uiDecPlaceVariation">
        <javadoc>Decrements the variation to place.</javadoc>
    </method>
    <method return="void" name="uiSetProtoCursor">
        <parameters type="string" name="protoName"/>
        <parameters type="bool" name="setPlacement"/>
        <javadoc>&#xD;
Sets the cursor to a ProtoUnit.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiSetProtoCursorID">
        <parameters type="int" name="protoID"/>
        <javadoc>&#xD;
Sets the cursor to a ProtoUnit.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiClearCursor">
        <javadoc>&#xD;
Resets the cursor back to the basic pointer.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiBuildAtPointer">
        <javadoc>&#xD;
Instructs the currently selected unit(s) to build the currently active cursor protounit at the pointer location.&#xD;
This is typically used in game to build buildings.&#xD;
It is however not limited to buildings, and can be used to place units too.&#xD;
&#xD;
@sync&#xD;
&#xD;
@see #uiSetProtoCursor(string, bool)&#xD;
@see #uiPlaceAtPointer(bool)</javadoc>
    </method>
    <method return="void" name="uiPlaceAtPointer">
        <parameters type="bool" name="changeVariation"/>
        <javadoc>&#xD;
Places the currently active cursor protounit.&#xD;
&#xD;
@editor This is typically used to place units in the editor.&#xD;
&#xD;
@sync&#xD;
&#xD;
@see #uiSetProtoCursor(string, bool)&#xD;
@see #uiBuildAtPointer()</javadoc>
    </method>
    <method return="void" name="uiYawUnitRight">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the yaw unit right key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiYawUnitLeft">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the yaw unit left key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiPitchUnitDown">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the pitch unit down key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiPitchUnitUp">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the pitch unit up key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiRollUnitRight">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the roll unit right key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiRollUnitLeft">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the roll unit left key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiMoveUnitForward">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the move unit forward key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiMoveUnitBackward">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the move unit backward key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiMoveUnitRight">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the move unit right key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiMoveUnitLeft">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the move unit left key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiMoveUnitUp">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the move unit up key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiMoveUnitDown">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the move unit down key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiWheelRotatePlacedUnit">
        <javadoc>Rotate placed unit with wheel, i.e. intended to be mapped to wheel.</javadoc>
    </method>
    <method return="void" name="uiTransformSelectedUnit">
        <parameters type="string" name="protoName"/>
        <javadoc>&#xD;
Transforms the selected unit into the specified ProtoUnit.&#xD;
&#xD;
@sync 	This command can be used to manually transfer a series of bits to other players&#xD;
by converting gatherers in ulfsarks or walls in gates and back.</javadoc>
    </method>
    <method return="int" name="protoCount">
        <parameters type="string" name="typeName"/>
        <javadoc>&#xD;
Shows how many ProtoUnits that are alive in the scenario.&#xD;
&#xD;
@deprecated&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiToggleBuildingQueue">
        <javadoc>&#xD;
Toggles whether the current building does repeat building on its train queue.&#xD;
&#xD;
@sync&#xD;
&#xD;
@since AoT</javadoc>
    </method>
    <method return="void" name="uiSummonWorkersToSelectedUnit">
        <javadoc>&#xD;
Issues a command to all workers to work on the currently selected building.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="trainByID">
        <parameters type="int" name="protoUnitID"/>
        <parameters type="int" name="trainingUnitID"/>
        <parameters type="int" name="playerID"/>
        <javadoc>&#xD;
Start the training of a unit of ProtoUnitID from TrainingUnitID.&#xD;
&#xD;
If no player is specified, the current one is used.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="trainInSelected">
        <parameters type="string" name="protoName"/>
        <parameters type="int" name="traincount"/>
        <javadoc>&#xD;
Tries to train the selected unit type in any valid selected unit.&#xD;
&#xD;
@note No algorithm to properly distribute the production over all buildings is used.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="tis">
        <parameters type="string" name="protoName"/>
        <parameters type="int" name="traincount"/>
        <javadoc>&#xD;
Just like trainInSelected, but more abbreviated.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="tisID">
        <parameters type="int" name="protoID"/>
        <parameters type="int" name="traincount"/>
        <javadoc>&#xD;
Just like trainInSelected, but more abbreviated because it takes a protoID.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="trainCancelByButtonIndex">
        <parameters type="int" name="buttonIndex"/>
        <parameters type="int" name="trainingUnitID"/>
        <parameters type="int" name="playerID"/>
        <javadoc>&#xD;
Cancels the training of a unit from TrainingUnitID at the given index.&#xD;
&#xD;
If no player is specified, the current one is used.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiDeleteSelectedUnit">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Deletes selected unit. This is the default in-game action when the delete button is pressed.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiRemoveSelectedUnit">
        <parameters type="int" name="unitID"/>
        <javadoc>&#xD;
Removes specified unit, or selected unit if not ID is specified.&#xD;
This is the default action in the editor when the delete button is pressed.</javadoc>
    </method>
    <method return="void" name="uiStopSelectedUnits">
        <javadoc>&#xD;
Stop selected units.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiUnbuildSelectedUnit">
        <javadoc>&#xD;
Enter unbuild mode with selected building.&#xD;
&#xD;
@local</javadoc>
    </method>
    <method return="void" name="uiUnbuildSelectedUnitAtPointer">
        <javadoc>&#xD;
Actually unbuild selected building.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiScaleUnitDown">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the unit scale down key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiScaleUnitUp">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the unit scale up key has gone up/down.&#xD;
&#xD;
@single</javadoc>
    </method>
    <method return="void" name="uiWorkAtPointer">
        <javadoc>&#xD;
Issues a work (e.g. walk to, empower, garrison, attack, ...) at pointer location.&#xD;
&#xD;
@sync</javadoc>
    </method>
    <method return="void" name="uiRotateSelection">
        <javadoc>&#xD;
Rotates the selected unit.</javadoc>
    </method>
    <method return="void" name="uiDeleteUnits">
        <parameters type="int" name="keyState"/>
        <javadoc>&#xD;
Indicates that the delete units button has gone up/down.</javadoc>
    </method>
	    <method return="void" name="trPaintTerrain">
        <parameters type="int" name="x0"/>
        <parameters type="int" name="y0"/>
        <parameters type="int" name="x1"/>
        <parameters type="int" name="y1"/>
        <parameters type="int" name="type"/>
        <parameters type="int" name="subType"/>
        <parameters type="bool" name="updateObstruction"/>
		<javadoc>Paint the provided rectangle terrain type for the provided type and sub type. Coordinates are inclusive.</javadoc>
    </method>
    <method return="int" name="trGetTerrainType">
        <parameters type="int" name="x"/>
        <parameters type="int" name="y"/>
		<javadoc>Gets the terrain type at the provided location.</javadoc>
    </method>
    <method return="int" name="trGetTerrainSubType">
        <parameters type="int" name="x"/>
        <parameters type="int" name="y"/>
		<javadoc>Gets the terrain sub type at the provided location.</javadoc>
    </method>
    <method return="void" name="trChangeTerrainHeight">
        <parameters type="int" name="x0"/>
        <parameters type="int" name="y0"/>
        <parameters type="int" name="x1"/>
        <parameters type="int" name="y1"/>
        <parameters type="float" name="height"/>
        <parameters type="bool" name="updateObstruction"/>
		<javadoc>Sets the terrain elevation for the provided rectangle location. Coordinates are inclusive.</javadoc>
    </method>
    <method return="float" name="trGetTerrainHeight">
        <parameters type="int" name="x"/>
        <parameters type="int" name="y"/>
		<javadoc>Gets the terrain elevation at the provided location.</javadoc>
    </method>
    <method return="void" name="trSetCivAndCulture">
        <parameters type="int" name="player"/>
        <parameters type="int" name="civ"/>
        <parameters type="int" name="culture"/>
		<javadoc>Overrides the player civilisation and culture.</javadoc>
    </method>
    <method return="int" name="trGetUnitScenarioNameNumber">
        <parameters type="int" name="id"/>
		<javadoc>Retrieves the scenario name number from the instance id. This is the reverse of kbGetBlockID.</javadoc>
    </method>
    <method return="int" name="trGetNextUnitScenarioNameNumber">
	<javadoc>Retrieves the next scenario name number that will be allocated for a unit.</javadoc>
    </method>
    <method return="void" name="trCoverTerrainWithWater">
        <parameters type="int" name="height"/>
        <parameters type="int" name="depth"/>
        <parameters type="string" name="water"/>
		<javadoc>Paints the entire map with water. This includes flattening the map and replacing the terrain. This version is compatible with online play.</javadoc>
    </method>
    <method return="float" name="trGetWaterHeight">
        <parameters type="int" name="x"/>
        <parameters type="int" name="y"/>
		<javadoc>Retrieves the height of the water at the current location.</javadoc>
    </method>
    <method return="void" name="trSetGPData">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="type"/>
        <parameters type="int" name="slot"/>
        <parameters type="int" name="data"/>
		<javadoc>Unlike what the command suggests, this adds rather than sets the god power data for the provided index. The fields are known to be the following:
(0) God power tech id
(1) Immediate use count
(2) Recharge use count
(3) Some value relating to if cast
(4) The time the power was last cast in milliseconds
(5) The current recharge time of the god power.</javadoc>
    </method>
    <method return="int" name="trGetGPData">
        <parameters type="int" name="playerID"/>
        <parameters type="int" name="type"/>
        <parameters type="int" name="slot"/>
		<javadoc>Retrieves the god power data for the following type. The fields are known to be the following:
(0) God power tech id
(1) Immediate use count
(2) Recharge use count
(3) Some value relating to if cast
(4) The time the power was last cast in milliseconds
(5) The current recharge time of the god power.</javadoc>
    </method>
    <method return="void" name="trMutateSelected">
        <parameters type="int" name="newunittype"/>
		<javadoc>Transform the current selection to the new provided type. This is equivalent to unitTransform for the selection only.</javadoc>
    </method>
    <method return="float" name="xsSqrt">
        <parameters type="float" name="value"/>
		<javadoc>Square roots the provided value.</javadoc>
    </method>
    <method return="float" name="xsSin">
        <parameters type="float" name="value"/>
		<javadoc>Calculates the sine of the provided value in radians.</javadoc>
    </method>
    <method return="float" name="xsCos">
        <parameters type="float" name="value"/>
		<javadoc>Calculates the cosine of the provided value in radians.</javadoc>
    </method>
    <method return="float" name="xsAtan">
        <parameters type="float" name="value"/>
		<javadoc>Calculates the arctangent of the provided value giving the result in radians</javadoc>
    </method>
    <method return="float" name="xsAtan2">
        <parameters type="float" name="y"/>
        <parameters type="float" name="x"/>
		<javadoc>Calculates the arctangent of the provided values the result in radians. This version gives the correct quadrant.</javadoc>
    </method>
    <method return="float" name="xsPow">
        <parameters type="float" name="base"/>
        <parameters type="int" name="power"/>
		<javadoc>Rases the value to the power value.</javadoc>
    </method>
    <method return="float" name="xsFloor">
        <parameters type="float" name="value"/>
		<javadoc>Rounds down the value to the next whole number.</javadoc>
    </method>
    <method return="float" name="xsCeil">
        <parameters type="float" name="value"/>
		<javadoc>Rounds up the value to the next whole number.</javadoc>
    </method>
    <method return="float" name="xsRound">
        <parameters type="float" name="value"/>
		<javadoc>Rounds the value to the nearest whole number.</javadoc>
    </method>
    <method return="float" name="xsClamp">
        <parameters type="float" name="value"/>
        <parameters type="float" name="min"/>
        <parameters type="float" name="max"/>
		<javadoc>Shifts the provided value until it is inside the provided range.</javadoc>
    </method>
    <method return="float" name="xsMin">
        <parameters type="float" name="first"/>
        <parameters type="float" name="second"/>
		<javadoc>Returns the minimum of the provided values.</javadoc>
    </method>
    <method return="float" name="xsMax">
        <parameters type="float" name="first"/>
        <parameters type="float" name="second"/>
		<javadoc>Returns the maximum of the provided values.</javadoc>
    </method>
    <method return="float" name="xsAbs">
        <parameters type="float" name="value"/>
		<javadoc>Removes the sign of the provided value giving the magnitude only.</javadoc>
    </method>
    <method return="int" name="xsStringLength">
        <parameters type="string" name="value"/>
		<javadoc>Gets the length of the provided string.</javadoc>
    </method>
    <method return="string" name="xsSubString">
        <parameters type="string" name="value"/>
        <parameters type="int" name="length"/>
        <parameters type="int" name="pos"/>
		<javadoc>Retrives part of the string based on the length and position.</javadoc>
    </method>
    <method return="int" name="xsFindString">
        <parameters type="string" name="value"/>
        <parameters type="string" name="findValue"/>
        <parameters type="int" name="position"/>
		<javadoc>Finds the provided string inside the other string with a starting search position. The value retrieved is the next occurance.</javadoc>
    </method>
    <method return="void" name="trSetSunPosition">
        <parameters type="float" name="inclination"/>
        <parameters type="float" name="rotation"/>
        <parameters type="bool" name="relative"/>
		<javadoc>Sets the sun inclination and rotation in degrees.</javadoc>
    </method>
    <method return="void" name="trSetCloudData">
        <parameters type="float" name="intensity"/>
        <parameters type="float" name="scaleX"/>
        <parameters type="float" name="scaleZ"/>
        <parameters type="float" name="speed"/>
        <parameters type="float" name="directionX"/>
        <parameters type="float" name="directionZ"/>
		<javadoc>Modifies the cloud data according to the provided parameters. Note that larger scale actually reduces the cloud size.</javadoc>
    </method>
    <method return="void" name="trSetCloudMap">
        <parameters type="string" name="texture"/>
		<javadoc>Sets the file path to use for the cloud. This searches from the texture folder and supports sub folders with the appropriate provided path. The texture file extension should be included.</javadoc>
    </method>
    <method return="void" name="trSetSelectedScale">
        <parameters type="float" name="scaleX"/>
        <parameters type="float" name="scaleY"/>
        <parameters type="float" name="scaleZ"/>
		<javadoc>Changes the scale of the current selection.</javadoc>
    </method>
    <method return="void" name="trSetSelectedHeight">
        <parameters type="float" name="height"/>
		<javadoc>This appears to change the flying height of selected bird units if applied while moving.</javadoc>
    </method>
    <method return="void" name="trSetSelectedUpVector">
        <parameters type="float" name="stretchX"/>
        <parameters type="float" name="stretchY"/>
        <parameters type="float" name="stretchZ"/>
		<javadoc>Applies the provided stretch values to the current selection.</javadoc>
    </method>
    <method return="void" name="trSetSelectedUnitOrientation">
        <parameters type="vector" name="mX"/>
        <parameters type="vector" name="mY"/>
        <parameters type="bool" name="immediate"/>
		<javadoc>Applies the provided rotation matrix to the current selection. The Z part is automatically calculated using cross product.</javadoc>
    </method>
    <method return="int" name="xsStringToInt">
        <parameters type="string" name="value"/>
		<javadoc>Converts the provided text into an integer.</javadoc>
	</method>
    <method return="void" name="trUnitOverrideAnimation">
        <parameters type="int" name="type"/>
        <parameters type="int" name="variation"/>
        <parameters type="bool" name="loop"/>
        <parameters type="bool" name="freeOnDeath"/>
        <parameters type="int" name="eventID"/>
        <parameters type="int" name="extra"/>
		<javadoc>Applies the provided animation to current selection.</javadoc>
	</method>
	<method return="void" name="trUnitSetAnimationPath">
        <parameters type="string" name="value"/>
		<javadoc>Overrides the unit animation look up. E.g. value: "1,0,0,0,0,0,0". Each value represents a selector in the animation file. If more values are provided than needed the rest are ignored.</javadoc>
	</method>
	<method return="void" name="trSetCurrentScenarioUserData">
        <parameters type="int" name="index"/>
        <parameters type="int" name="value"/>
		<javadoc>Stores the provided value in the user profile for this scenario. Index can range from 0-15.</javadoc>
	</method>
	<method return="int" name="trGetScenarioUserData">
        <parameters type="int" name="index"/>
        <parameters type="string" name="scenario"/>
		<javadoc>Retrives the provided value for the index with the provided scenario or current scenario if not provided. Index can range from 0-15.</javadoc>
	</method>
</model>
